{"version":3,"sources":["App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","App/components/BackButton/assets/backArrow.svg","../../src/service/error.tsx","../../src/utils/currency.ts","../../src/service/sdk.ts","../../src/service/wallet.tsx","../../src/service/account.tsx","../../src/utils/errors.ts","config.ts","App/components/ProtectedSwitch.tsx","App/paths.ts","theme/layout/Center/index.tsx","theme/layout/Stack/index.tsx","App/components/Loading/index.tsx","App/routes/Login/index.tsx","App/routes/OperationResult/index.tsx","App/components/BackButton/index.tsx","App/components/YourAccount/index.tsx","App/forms/validationSchemas.ts","App/routes/TokenDetail/FormSendTokens/index.tsx","App/routes/TokenDetail/index.tsx","App/forms/Search.tsx","App/routes/Tokens/components/FormSearchName.tsx","App/routes/Tokens/components/TokenList/index.tsx","App/routes/Tokens/index.tsx","App/index.tsx","index.tsx"],"names":["module","exports","defaultContext","setError","clearError","ErrorContext","React","useError","ErrorProvider","children","error","context","value","nativeCoinToDisplay","coin","coinToDisplay","coinMap","amountToDisplay","Decimal","denom","amount","loadOrCreateMnemonic","key","loaded","localStorage","generated","Bip39","Random","createClient","config","signer","firstAddress","feeTable","feeToken","gasPrice","stdFee","gas","Math","upload","init","exec","migrate","send","changeAdmin","buildFeeTable","loadOrCreateWallet","addressPrefix","mnemonic","hdPath","makeCosmoshubPath","Secp256k1Wallet","initialized","address","getClient","Error","CosmWasmContext","useSdk","SdkProvider","loadWallet","contextWithInit","setValue","client","faucetUrl","acct","fetch","method","headers","body","JSON","ticker","useState","BurnerWalletProvider","refreshAccount","AccountContext","useAccount","AccountProvider","sdk","account","getErrorFromStackTrace","stackTrace","match","stringStackTrace","httpUrl","faucetToken","ushell","fractionalDigits","ureef","ProtectedSwitch","location","to","pathname","state","redirectPathname","redirectState","Center","tag","Tag","className","props","classNames","joinClassNames","Stack","spinIndicator","LoadingOutlined","style","fontSize","spin","Loading","loadingText","tip","indicator","Title","Text","Login","history","useHistory","initializing","setInitializing","useEffect","push","src","cosmWasmLogo","alt","level","type","onClick","disabled","OperationResult","success","message","customButtonText","customButtonActionPath","customButtonActionState","icon","textClass","buttonText","buttonAction","successIcon","goToTokensList","failIcon","goBack","getResultContent","chosenButtonText","chosenButtonAction","BackButton","path","backArrow","YourAccount","showTitle","accountProvider","copyToClipboard","regexStartsWithPrefix","RegExp","addressShape","Yup","required","matches","length","searchValidationSchema","shape","sendAddressValidationSchema","FormSendTokens","tokenName","tokenAmount","sendTokensAction","sendValidationSchema","positive","max","parseFloat","concat","initialValues","onSubmit","validationSchema","formikProps","name","placeholder","submitForm","isValid","dirty","TokenDetail","loading","setLoading","useParams","nativeToken","nameToDisplay","amountInteger","amountDecimal","split","values","recipientAddress","amountToTransfer","displayAmountToNative","transferAmount","sendTokens","then","result","isPostTxFailure","Promise","reject","rawLog","catch","console","tokenDetailPath","tokenDetailState","TypedInput","validate","fast","onChange","$onChange","onBlur","$onBlur","restProps","ref","field","event","Search","FormSearchName","currentAddress","setCurrentAddress","enterButton","onSearch","TokenList","balance","setBalance","getAccount","amAllowed","map","denomToDisplay","data-state","token","Tokens","App","basename","process","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c8015e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nconst useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nfunction ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n\nexport { ErrorProvider, useError };\n","import { FeeTable } from \"@cosmjs/cosmwasm\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { AppConfig } from \"../config\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nfunction printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nfunction printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nfunction buildFeeTable({ feeToken, gasPrice }: AppConfig): FeeTable {\n  const stdFee = (gas: number, denom: string, price: number) => {\n    const amount = Math.floor(gas * price);\n    return {\n      amount: [{ amount: amount.toString(), denom: denom }],\n      gas: gas.toString(),\n    };\n  };\n\n  return {\n    upload: stdFee(1500000, feeToken, gasPrice),\n    init: stdFee(600000, feeToken, gasPrice),\n    exec: stdFee(200000, feeToken, gasPrice),\n    migrate: stdFee(600000, feeToken, gasPrice),\n    send: stdFee(80000, feeToken, gasPrice),\n    changeAdmin: stdFee(80000, feeToken, gasPrice),\n  };\n}\n\ninterface MappedCoin {\n  readonly denom: string;\n  readonly fractionalDigits: number;\n}\n\ninterface CoinMap {\n  readonly [key: string]: MappedCoin;\n}\n\nfunction nativeCoinToDisplay(coin: Coin, coinMap: CoinMap): Coin {\n  if (!coinMap) return coin;\n\n  const coinToDisplay = coinMap[coin.denom];\n  if (!coinToDisplay) return coin;\n\n  const amountToDisplay = Decimal.fromAtomics(coin.amount, coinToDisplay.fractionalDigits).toString();\n\n  return { denom: coinToDisplay.denom, amount: amountToDisplay };\n}\n\n// display amount is eg \"12.0346\", return is in native tokens\n// with 6 fractional digits, this would be eg. \"12034600\"\nfunction displayAmountToNative(amountToDisplay: string, coinMap: CoinMap, nativeDenom: string): string {\n  const fractionalDigits = coinMap[nativeDenom]?.fractionalDigits;\n  if (fractionalDigits) {\n    // use https://github.com/CosmWasm/cosmjs/blob/v0.22.2/packages/math/src/decimal.ts\n    const decimalAmount = Decimal.fromUserInput(amountToDisplay, fractionalDigits);\n    return decimalAmount.atomics;\n  }\n\n  return amountToDisplay;\n}\n\nexport {\n  printableCoin,\n  printableBalance,\n  buildFeeTable,\n  MappedCoin,\n  CoinMap,\n  nativeCoinToDisplay,\n  displayAmountToNative,\n};\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { makeCosmoshubPath, OfflineSigner, Secp256k1Wallet } from \"@cosmjs/launchpad\";\nimport { AppConfig } from \"../config\";\nimport { buildFeeTable } from \"../utils/currency\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nfunction generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nfunction loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nasync function loadOrCreateWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nasync function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const feeTable = buildFeeTable(config);\n  return new SigningCosmWasmClient(config.httpUrl, firstAddress, signer, feeTable);\n}\n\nexport { generateMnemonic, loadOrCreateMnemonic, loadOrCreateWallet, createClient };\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { OfflineSigner } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { createClient, loadOrCreateWallet } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly address: string;\n  readonly init: () => void;\n  readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  address: \"\",\n  init: () => {\n    return;\n  },\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nconst useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface ConfigWalletProps extends ConfigProp {\n  readonly loadWallet: (addressPrefix: string) => Promise<OfflineSigner>;\n}\n\ntype SdkProviderProps = ConfigWalletProps & React.HTMLAttributes<HTMLOrSVGElement>;\n\nfunction SdkProvider({ config, loadWallet, children }: SdkProviderProps): JSX.Element {\n  const contextWithInit = { ...defaultContext, init: init };\n  const [value, setValue] = useState(contextWithInit);\n\n  function init() {\n    loadWallet(config.addressPrefix)\n      .then((signer) => createClient(config, signer))\n      .then(async (client) => {\n        const address = client.senderAddress;\n        // load from faucet if needed\n        if (config.faucetUrl) {\n          const acct = await client.getAccount();\n          if (!acct?.balance?.length) {\n            await fetch(config.faucetUrl, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ ticker: config.faucetToken, address }),\n            });\n          }\n        }\n\n        setValue({\n          initialized: true,\n          address: address,\n          init: () => {\n            return;\n          },\n          getClient: () => client,\n        });\n      });\n  }\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n\ninterface ConfigProp {\n  readonly config: AppConfig;\n}\n\ntype BurnerWalletProviderProps = ConfigProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nfunction BurnerWalletProvider({ config, children }: BurnerWalletProviderProps): JSX.Element {\n  return (\n    <SdkProvider config={config} loadWallet={loadOrCreateWallet}>\n      {children}\n    </SdkProvider>\n  );\n}\n\nexport { useSdk, SdkProvider, BurnerWalletProvider };\n","import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nconst useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nfunction AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n\nexport { AccountProvider, useAccount };\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error;\n}\n","import { AppConfig, CoinMap } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  httpUrl: \"http://localhost:1317\",\n  feeToken: \"ucosm\",\n  gasPrice: 0.025,\n  faucetUrl: \"http://localhost:8000/credit\",\n  faucetToken: \"COSM\",\n  addressPrefix: \"cosmos\",\n};\n\nconst coinMap: CoinMap = {\n  ushell: { denom: \"SHELL\", fractionalDigits: 6 },\n  ureef: { denom: \"REEF\", fractionalDigits: 6 },\n};\n\nconst coralnet: AppConfig = {\n  httpUrl: \"https://lcd.coralnet.cosmwasm.com\",\n  feeToken: \"ushell\",\n  gasPrice: 0.025,\n  faucetUrl: \"https://faucet.coralnet.cosmwasm.com/credit\",\n  faucetToken: \"SHELL\",\n  addressPrefix: \"coral\",\n  coinMap: coinMap,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : coralnet;\n","import { useSdk } from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { pathLogin } from \"../paths\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: unknown;\n}\n\nfunction ProtectedSwitch({ children, location }: SwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: pathLogin,\n        state: { redirectPathname: location.pathname, redirectState: location.state },\n      }}\n    />\n  );\n}\n\nexport default ProtectedSwitch;\n","export const pathLogin = \"/login\";\nexport const pathTokens = \"/tokens\";\nexport const pathOperationResult = \"/result\";\n","import joinClassNames from \"classnames\";\nimport * as React from \"react\";\nimport \"./Center.less\";\n\ninterface TagProp {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport type CenterProps = TagProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nfunction Center({ tag: Tag = \"div\", className, children, ...props }: CenterProps): JSX.Element {\n  const classNames = joinClassNames(\"Center\", className);\n\n  return (\n    <Tag className={classNames} {...props}>\n      {children}\n    </Tag>\n  );\n}\n\nexport default Center;\n","import joinClassNames from \"classnames\";\nimport * as React from \"react\";\nimport \"./Stack.less\";\n\ninterface TagProp {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport type StackProps = TagProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nfunction Stack({ tag: Tag = \"div\", className, children, ...props }: StackProps): JSX.Element {\n  const classNames = joinClassNames(\"Stack\", className);\n\n  return (\n    <Tag className={classNames} {...props}>\n      {children}\n    </Tag>\n  );\n}\n\nexport default Stack;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport { Spin } from \"antd\";\nimport React from \"react\";\nimport Center from \"../../../theme/layout/Center\";\nimport \"./Loading.less\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nfunction Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <Center tag=\"main\" className=\"Loading\">\n      <Spin indicator={spinIndicator} tip={tip} className=\"Spin\" />\n    </Center>\n  );\n}\n\nexport default Loading;\n","import { useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport Loading from \"../../components/Loading\";\nimport { RedirectLocation } from \"../../components/ProtectedSwitch\";\nimport { pathTokens } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\nimport \"./Login.less\";\n\nconst { Title, Text } = Typography;\n\nfunction Login(): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const sdk = useSdk();\n  const { refreshAccount, account } = useAccount();\n\n  const [initializing, setInitializing] = useState(false);\n\n  function init() {\n    setInitializing(true);\n    sdk.init();\n  }\n\n  useEffect(() => {\n    if (sdk.initialized) {\n      refreshAccount();\n    }\n  }, [sdk.initialized, refreshAccount]);\n\n  useEffect(() => {\n    if (account) {\n      if (state) {\n        history.push(state.redirectPathname, state.redirectState);\n      } else {\n        history.push(pathTokens);\n      }\n    }\n  }, [account, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <Center tag=\"main\" className=\"Login\">\n      <Stack className=\"MainStack\">\n        <img src={cosmWasmLogo} alt=\"CosmWasm logo\" />\n        <Stack className=\"WelcomeStack\">\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <Text className=\"LightText\">Welcome to your Wallet</Text>\n            <Text className=\"LightText\">Select one of the following options to start:</Text>\n          </Typography>\n          <Button type=\"primary\" onClick={init}>\n            Browser (Demo)\n          </Button>\n          <Button disabled type=\"primary\">\n            Keplr (Secure)\n          </Button>\n        </Stack>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default Login;\n","import { Button, Typography } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport { pathTokens } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\nimport \"./OperationResult.less\";\n\nconst { Text } = Typography;\n\nfunction goToTokensList(history: History) {\n  history.push(pathTokens);\n}\n\ninterface ResultContent {\n  readonly icon: string;\n  readonly textClass: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nfunction getResultContent(success: boolean, history: History): ResultContent {\n  if (success) {\n    return {\n      icon: successIcon,\n      textClass: \"SuccessText\",\n      buttonText: \"Home\",\n      buttonAction: () => goToTokensList(history),\n    };\n  }\n\n  return {\n    icon: failIcon,\n    textClass: \"FailText\",\n    buttonText: \"Retry\",\n    buttonAction: history.goBack,\n  };\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n  readonly customButtonActionState?: any;\n}\n\nfunction OperationResult(): JSX.Element {\n  const history = useHistory();\n\n  const {\n    success,\n    message,\n    error,\n    customButtonText,\n    customButtonActionPath,\n    customButtonActionState,\n  } = history.location.state as OperationResultState;\n  const { icon, textClass, buttonText, buttonAction } = getResultContent(success, history);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath, customButtonActionState)\n    : buttonAction;\n\n  return (\n    <Center tag=\"main\" className=\"OperationResult\">\n      <Stack className=\"MainStack\">\n        <img src={icon} alt=\"Result icon\" />\n        <Text className={textClass}>{message}</Text>\n        {error && <Text className={textClass}>{error}</Text>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default OperationResult;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport backArrow from \"./assets/backArrow.svg\";\nimport \"./BackButton.less\";\n\ninterface BackButtonProps {\n  readonly path?: string;\n  readonly state?: unknown;\n}\n\nfunction BackButton({ path, state }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path, state) : history.goBack;\n\n  return <img src={backArrow} alt=\"Back arrow\" className=\"BackButton\" onClick={goBack} />;\n}\n\nexport default BackButton;\n","import { useAccount } from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport Center, { CenterProps } from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport \"./YourAccount.less\";\n\nconst { Title, Text } = Typography;\n\ninterface YourAccountProps extends CenterProps {\n  readonly showTitle?: boolean;\n}\n\nfunction YourAccount({ showTitle, ...props }: YourAccountProps): JSX.Element {\n  const accountProvider = useAccount();\n\n  return (\n    <Center className=\"YourAccount\" {...props}>\n      <Stack>\n        {showTitle || (typeof showTitle === \"undefined\" && <Title level={3}>Your Account</Title>)}\n        <Text>{accountProvider.account.address}</Text>\n        <Button type=\"primary\" onClick={() => copyToClipboard(accountProvider.account.address)}>\n          Copy Account Address\n        </Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default YourAccount;\n","import * as Yup from \"yup\";\nimport { config } from \"../../config\";\n\nconst regexStartsWithPrefix = new RegExp(`^${config.addressPrefix}`);\n\nconst addressShape = {\n  address: Yup.string()\n    .required(\"An address is required\")\n    .matches(regexStartsWithPrefix, `\"${config.addressPrefix}\" prefix required`)\n    .length(39 + config.addressPrefix.length, \"Address invalid\"),\n};\n\nexport const searchValidationSchema = Yup.object().shape(addressShape);\n\nexport const sendAddressValidationSchema = Yup.object().shape(addressShape);\n","import { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport Stack from \"../../../../theme/layout/Stack\";\nimport { sendAddressValidationSchema } from \"../../../forms/validationSchemas\";\nimport \"./FormSendTokens.less\";\n\nconst { Text } = Typography;\n\ninterface FormSendTokensProps {\n  readonly tokenName: string;\n  readonly tokenAmount: string;\n  readonly sendTokensAction: (values: any) => void;\n}\n\nfunction FormSendTokens({ tokenName, tokenAmount, sendTokensAction }: FormSendTokensProps): JSX.Element {\n  const sendAmountValidationSchema = Yup.object().shape({\n    amount: Yup.number()\n      .required(\"An amount is required\")\n      .positive(\"Amount should be positive\")\n      .max(parseFloat(tokenAmount), `Amount cannot be greater than ${tokenAmount}`),\n  });\n\n  const sendValidationSchema = sendAmountValidationSchema.concat(sendAddressValidationSchema);\n\n  return (\n    <Formik\n      initialValues={{ amount: \"\", address: \"\" }}\n      onSubmit={sendTokensAction}\n      validationSchema={sendValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <Stack className=\"FormSendTokens\">\n            <div className=\"formField\">\n              <Text>Send</Text>\n              <FormItem name=\"amount\">\n                <Input name=\"amount\" placeholder=\"Enter amount\" />\n              </FormItem>\n              <Text>{tokenName}</Text>\n            </div>\n            <div className=\"formField\">\n              <Text>to</Text>\n              <FormItem name=\"address\">\n                <Input name=\"address\" placeholder=\"Enter address\" />\n              </FormItem>\n            </div>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Send\n            </Button>\n          </Stack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default FormSendTokens;\n","import {\n  displayAmountToNative,\n  getErrorFromStackTrace,\n  nativeCoinToDisplay,\n  useAccount,\n  useSdk,\n} from \"@cosmicdapp/logic\";\nimport { Coin, isPostTxFailure } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport Loading from \"../../components/Loading\";\nimport YourAccount from \"../../components/YourAccount\";\nimport { pathOperationResult, pathTokens } from \"../../paths\";\nimport { OperationResultState } from \"../OperationResult\";\nimport FormSendTokens from \"./FormSendTokens\";\nimport \"./TokenDetail.less\";\n\nconst { Title, Text } = Typography;\n\ninterface TokenDetailParams {\n  readonly tokenName: string;\n}\n\nexport interface TokenDetailState {\n  readonly tokenAmount: string;\n}\n\nfunction TokenDetail(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const { tokenName }: TokenDetailParams = useParams();\n  const { tokenAmount } = history.location.state as TokenDetailState;\n\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const sendTokensAction = (values) => {\n    setLoading(true);\n    const { address, amount } = values;\n    const recipientAddress: string = address;\n\n    const amountToTransfer = displayAmountToNative(amount, config.coinMap, tokenName);\n\n    const nativeTokenToTransfer: Coin = { denom: tokenName, amount: amountToTransfer };\n    const transferAmount: readonly Coin[] = [nativeTokenToTransfer];\n\n    getClient()\n      .sendTokens(recipientAddress, transferAmount)\n      .then((result) => {\n        if (isPostTxFailure(result)) {\n          return Promise.reject(result.rawLog);\n        }\n\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `${amount} ${tokenName} succesfully sent to ${recipientAddress}`,\n            customButtonText: \"Tokens\",\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        const tokenDetailPath = `${pathTokens}/${tokenName}`;\n        const tokenDetailState: TokenDetailState = { tokenAmount };\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Send transaction failed:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: tokenDetailPath,\n            customButtonActionState: tokenDetailState,\n          } as OperationResultState,\n        });\n      });\n  };\n\n  const nativeToken: Coin = { denom: tokenName, amount: tokenAmount };\n  const { denom: nameToDisplay, amount: amountToDisplay } = nativeCoinToDisplay(nativeToken, config.coinMap);\n  const [amountInteger, amountDecimal] = amountToDisplay.split(\".\");\n\n  return (\n    (loading && <Loading loadingText={`Sending ${nameToDisplay}...`} />) ||\n    (!loading && (\n      <Center tag=\"main\" className=\"TokenDetail\">\n        <Stack className=\"MainStack\">\n          <BackButton path={pathTokens} />\n          <Stack className=\"AccountStack\">\n            <Title>{nameToDisplay}</Title>\n            <YourAccount showTitle={false} />\n          </Stack>\n          <div className=\"Amount\">\n            <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n            {amountDecimal && <Text>{amountDecimal}</Text>}\n            <Text>{\" tokens\"}</Text>\n          </div>\n          <FormSendTokens\n            tokenName={nameToDisplay}\n            tokenAmount={amountToDisplay}\n            sendTokensAction={sendTokensAction}\n          />\n        </Stack>\n      </Center>\n    ))\n  );\n}\n\nexport default TokenDetail;\n","// Search form not present in form-antd: https://github.com/jannikbuschke/formik-antd/blob/master/src/input/index.tsx\nimport { Input as BaseInput } from \"antd\";\nimport { InputProps as BaseInputProps, SearchProps as BaseSearchProps } from \"antd/lib/input\";\nimport { FieldProps } from \"formik\";\nimport { Field } from \"formik-antd\";\nimport * as React from \"react\";\nimport Search from \"antd/lib/input/Search\";\n\ninterface FormikFieldProps {\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validate?: (value: any) => undefined | string | Promise<any>;\n  fast?: boolean;\n}\n\ntype InputProps = FormikFieldProps & BaseInputProps;\n\ninterface InputType\n  extends React.ForwardRefExoticComponent<\n    FormikFieldProps & BaseInputProps & React.RefAttributes<BaseInput>\n  > {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  Search: React.ForwardRefExoticComponent<FormikFieldProps & BaseSearchProps & React.RefAttributes<Search>>;\n}\n\n// eslint-disable-next-line react/display-name\nconst Input = React.forwardRef((\n  { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: InputProps,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  ref: React.Ref<Search>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({ field: { value, onChange, onBlur } }: FieldProps) => (\n      <BaseInput\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(event) => {\n          onChange(event);\n          $onChange && $onChange(event);\n        }}\n        onBlur={(event) => {\n          onBlur(event);\n          $onBlur && $onBlur(event);\n        }}\n        {...restProps}\n      />\n    )}\n  </Field>\n));\n\nconst TypedInput = (Input as unknown) as InputType;\ntype SearchProps = FormikFieldProps & BaseSearchProps;\n\n// eslint-disable-next-line react/display-name\nTypedInput.Search = React.forwardRef(\n  (\n    { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: SearchProps,\n    ref: React.Ref<BaseInput>,\n  ) => (\n    <Field name={name} validate={validate} fast={fast}>\n      {({ field: { value, onChange, onBlur } }: FieldProps) => (\n        <BaseInput.Search\n          ref={ref}\n          name={name}\n          value={value}\n          onChange={(event) => {\n            onChange(event);\n            $onChange && $onChange(event);\n          }}\n          onBlur={(event) => {\n            onBlur(event);\n            $onBlur && $onBlur(event);\n          }}\n          {...restProps}\n        />\n      )}\n    </Field>\n  ),\n);\n\nexport default TypedInput.Search;\n","import { Formik } from \"formik\";\nimport { Form, FormItem } from \"formik-antd\";\nimport React from \"react\";\nimport Search from \"../../../forms/Search\";\nimport { searchValidationSchema } from \"../../../forms/validationSchemas\";\n\ninterface FormSearchNameProps {\n  readonly currentAddress: string;\n  readonly setCurrentAddress: (value: React.SetStateAction<string>) => void;\n}\n\nfunction FormSearchName({ currentAddress, setCurrentAddress }: FormSearchNameProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ address: currentAddress }}\n      validationSchema={searchValidationSchema}\n      onSubmit={(values) => {\n        setCurrentAddress(values.address);\n      }}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"address\">\n            <Search\n              name=\"address\"\n              placeholder=\"Enter address\"\n              enterButton\n              onSearch={formikProps.submitForm}\n            />\n          </FormItem>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default FormSearchName;\n","import { nativeCoinToDisplay, useAccount, useError, useSdk } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../../../../../config\";\nimport Stack from \"../../../../../theme/layout/Stack\";\nimport { pathTokens } from \"../../../../paths\";\nimport { TokenDetailState } from \"../../../TokenDetail\";\nimport \"./TokenList.less\";\n\nconst { Text } = Typography;\n\ninterface TokenListProps {\n  readonly currentAddress: string;\n}\n\nfunction TokenList({ currentAddress }: TokenListProps): JSX.Element {\n  const { getClient } = useSdk();\n  const { setError } = useError();\n  const [balance, setBalance] = useState<readonly Coin[]>([]);\n\n  useEffect(() => {\n    getClient()\n      .getAccount(currentAddress)\n      .then(({ balance }) => setBalance(balance))\n      .catch(setError);\n  }, [getClient, currentAddress, setError]);\n\n  const { account } = useAccount();\n  const amAllowed = account.address === currentAddress;\n\n  const history = useHistory<TokenDetailState>();\n  function goTokenDetail(token: Coin) {\n    history.push(`${pathTokens}/${token.denom}`, { tokenAmount: token.amount });\n  }\n\n  return (\n    <Stack className=\"TokenList\">\n      {balance.map((nativeToken) => {\n        const { denom: denomToDisplay, amount: amountToDisplay } = nativeCoinToDisplay(\n          nativeToken,\n          config.coinMap,\n        );\n\n        return (\n          <div\n            key={nativeToken.denom}\n            className=\"tokenItem\"\n            data-state={amAllowed ? \"\" : \"forbidden\"}\n            onClick={() => {\n              amAllowed && goTokenDetail(nativeToken);\n            }}\n          >\n            <div className=\"borderContainer\">\n              <Text>{denomToDisplay}</Text>\n              <Text>{amountToDisplay !== \"0\" ? amountToDisplay : \"No tokens\"}</Text>\n            </div>\n          </div>\n        );\n      })}\n    </Stack>\n  );\n}\n\nexport default TokenList;\n","import { useAccount } from \"@cosmicdapp/logic\";\nimport { Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport YourAccount from \"../../components/YourAccount\";\nimport FormSearchName from \"./components/FormSearchName\";\nimport TokenList from \"./components/TokenList\";\nimport \"./Tokens.less\";\n\nconst { Title } = Typography;\n\nfunction Tokens(): JSX.Element {\n  const { account } = useAccount();\n  const [currentAddress, setCurrentAddress] = useState(account.address);\n\n  return (\n    <Center tag=\"main\" className=\"Tokens\">\n      <Stack className=\"MainStack\">\n        <Title>Tokens</Title>\n        <FormSearchName currentAddress={currentAddress} setCurrentAddress={setCurrentAddress} />\n        <TokenList currentAddress={currentAddress} />\n        <YourAccount />\n      </Stack>\n    </Center>\n  );\n}\n\nexport default Tokens;\n","import { AccountProvider, BurnerWalletProvider, ErrorProvider } from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport ProtectedSwitch from \"./components/ProtectedSwitch\";\nimport { pathLogin, pathOperationResult, pathTokens } from \"./paths\";\nimport Login from \"./routes/Login\";\nimport OperationResult from \"./routes/OperationResult\";\nimport TokenDetail from \"./routes/TokenDetail\";\nimport Tokens from \"./routes/Tokens\";\n\nfunction App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <BurnerWalletProvider config={config}>\n        <AccountProvider>\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path={pathLogin} component={Login} />\n              <ProtectedSwitch>\n                <Route exact path={pathTokens} component={Tokens} />\n                <Route exact path={`${pathTokens}/:tokenName`} component={TokenDetail} />\n                <Route exact path={pathOperationResult} component={OperationResult} />\n              </ProtectedSwitch>\n            </Switch>\n          </Router>\n        </AccountProvider>\n      </BurnerWalletProvider>\n    </ErrorProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.less\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}