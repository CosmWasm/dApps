{"version":3,"sources":["App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","App/assets/backArrow.svg","../../src/service/error.tsx","../../src/utils/currency.ts","../../src/service/sdk.ts","../../src/service/wallet.tsx","../../src/service/account.tsx","../../src/service/ProtectedSwitch.tsx","../../src/utils/errors.ts","../../src/components/layout/Center/component.tsx","../../src/components/layout/Center/style.ts","../../src/components/layout/Stack/component.tsx","../../src/components/layout/Stack/style.ts","../../src/components/layout/PageLayout/component.tsx","../../src/components/layout/PageLayout/style.ts","../../src/components/logic/BackButton/component.tsx","../../src/components/logic/BackButton/style.ts","../../src/components/logic/Loading/style.ts","../../src/components/logic/Loading/index.tsx","../../src/components/logic/Login/style.ts","../../src/components/logic/Login/index.tsx","../../src/components/logic/OperationResult/style.ts","../../src/components/logic/OperationResult/index.tsx","../../src/components/logic/YourAccount/style.ts","../../src/components/logic/YourAccount/index.tsx","../../src/theme/GlobalStyle/GlobalAntOverride.ts","../../src/theme/GlobalStyle/GlobalColors.ts","../../src/theme/GlobalStyle/GlobalFonts.ts","../../src/theme/GlobalStyle/GlobalReset.ts","../../src/theme/GlobalStyle/GlobalSpacing.ts","../../src/theme/GlobalStyle/index.tsx","config.ts","App/routes/Login/index.tsx","App/paths.ts","App/routes/OperationResult/index.tsx","App/forms/validationSchemas.ts","App/routes/TokenDetail/FormSendTokens/style.ts","App/routes/TokenDetail/FormSendTokens/index.tsx","App/routes/TokenDetail/style.ts","App/routes/TokenDetail/index.tsx","App/forms/Search.tsx","App/routes/Tokens/components/FormSearchName.tsx","App/routes/Tokens/components/TokenList/style.ts","App/routes/Tokens/components/TokenList/index.tsx","App/routes/Tokens/style.ts","App/routes/Tokens/index.tsx","App/index.tsx","index.tsx"],"names":["module","exports","defaultContext","setError","clearError","ErrorContext","React","useError","ErrorProvider","children","error","context","value","printableCoin","coin","ticker","Decimal","nativeCoinToDisplay","coinMap","coinToDisplay","amountToDisplay","denom","amount","createClient","signer","firstAddress","feeTable","buildFeeTable","feeToken","gasPrice","stdFee","gas","Math","upload","init","exec","migrate","send","changeAdmin","config","e","loadOrCreateWallet","mnemonic","key","loaded","localStorage","generated","Bip39","Random","loadOrCreateMnemonic","hdPath","makeCosmoshubPath","Secp256k1Wallet","initialized","address","getClient","Error","CosmWasmContext","useSdk","SdkProvider","loadWallet","contextWithInit","setValue","client","faucetUrl","acct","fetch","method","headers","body","JSON","useState","BurnerWalletProvider","refreshAccount","AccountContext","useAccount","AccountProvider","sdk","account","ProtectedSwitch","authPath","location","to","pathname","state","redirectPathname","redirectState","undefined","getErrorFromStackTrace","stackTrace","match","stringStackTrace","Center","tag","Tag","props","StyledCenter","styled","Stack","StyledStack","PageLayout","StyledPageLayout","BackButton","icon","path","history","useHistory","goBack","src","alt","onClick","StyledBackButton","StyledSpin","spinIndicator","style","fontSize","spin","Loading","tip","loadingText","indicator","Text","Typography","MainStack","WelcomeStack","LightText","Title","Login","pathAfterLogin","appName","appLogo","initializing","setInitializing","useEffect","level","type","disabled","ResultText","OperationResult","defaultButtonAction","successIcon","failIcon","success","message","customButtonText","customButtonActionPath","customButtonActionState","result","buttonText","buttonAction","getResultContent","chosenButtonText","chosenButtonAction","AccountStack","YourAccount","hideTitle","hideBalance","balance","printableBalance","copyToClipboard","GlobalAntOverride","createGlobalStyle","GlobalColors","GlobalFonts","GlobalReset","GlobalSpacing","GlobalStyle","httpUrl","faucetToken","addressPrefix","ushell","fractionalDigits","ureef","cosmWasmLogo","goToTokensList","push","regexStartsWithPrefix","RegExp","addressShape","Yup","required","matches","length","searchValidationSchema","shape","sendAddressValidationSchema","FormStack","FormField","div","FormSendTokens","tokenName","tokenAmount","sendTokensAction","sendValidationSchema","positive","max","parseFloat","concat","initialValues","onSubmit","validationSchema","formikProps","name","placeholder","submitForm","isValid","dirty","Amount","TokenDetail","loading","setLoading","useParams","accountProvider","nativeToken","nameToDisplay","amountInteger","amountDecimal","split","backArrowIcon","values","recipientAddress","amountToTransfer","nativeDenom","displayAmountToNative","transferAmount","sendTokens","then","isPostTxFailure","Promise","reject","rawLog","catch","console","tokenDetailPath","tokenDetailState","TypedInput","validate","fast","onChange","$onChange","onBlur","$onBlur","restProps","ref","field","event","Search","FormSearchName","currentAddress","setCurrentAddress","enterButton","onSearch","TokenStack","TokenItem","BorderContainer","TokenList","setBalance","getAccount","amAllowed","map","denomToDisplay","data-state","token","Tokens","App","basename","process","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.675446b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n","import { FeeTable } from \"@cosmjs/cosmwasm\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { AppConfig } from \"../config\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function buildFeeTable({ feeToken, gasPrice }: AppConfig): FeeTable {\n  const stdFee = (gas: number, denom: string, price: number) => {\n    const amount = Math.floor(gas * price);\n    return {\n      amount: [{ amount: amount.toString(), denom: denom }],\n      gas: gas.toString(),\n    };\n  };\n\n  return {\n    upload: stdFee(1500000, feeToken, gasPrice),\n    init: stdFee(600000, feeToken, gasPrice),\n    exec: stdFee(200000, feeToken, gasPrice),\n    migrate: stdFee(600000, feeToken, gasPrice),\n    send: stdFee(80000, feeToken, gasPrice),\n    changeAdmin: stdFee(80000, feeToken, gasPrice),\n  };\n}\n\nexport interface MappedCoin {\n  readonly denom: string;\n  readonly fractionalDigits: number;\n}\n\nexport interface CoinMap {\n  readonly [key: string]: MappedCoin;\n}\n\nexport function nativeCoinToDisplay(coin: Coin, coinMap: CoinMap): Coin {\n  if (!coinMap) return coin;\n\n  const coinToDisplay = coinMap[coin.denom];\n  if (!coinToDisplay) return coin;\n\n  const amountToDisplay = Decimal.fromAtomics(coin.amount, coinToDisplay.fractionalDigits).toString();\n\n  return { denom: coinToDisplay.denom, amount: amountToDisplay };\n}\n\n// display amount is eg \"12.0346\", return is in native tokens\n// with 6 fractional digits, this would be eg. \"12034600\"\nexport function displayAmountToNative(\n  amountToDisplay: string,\n  coinMap: CoinMap,\n  nativeDenom: string,\n): string {\n  const fractionalDigits = coinMap[nativeDenom]?.fractionalDigits;\n  if (fractionalDigits) {\n    // use https://github.com/CosmWasm/cosmjs/blob/v0.22.2/packages/math/src/decimal.ts\n    const decimalAmount = Decimal.fromUserInput(amountToDisplay, fractionalDigits);\n    return decimalAmount.atomics;\n  }\n\n  return amountToDisplay;\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { makeCosmoshubPath, OfflineSigner, Secp256k1Wallet } from \"@cosmjs/launchpad\";\nimport { AppConfig } from \"../config\";\nimport { buildFeeTable } from \"../utils/currency\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport async function loadOrCreateWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const feeTable = buildFeeTable(config);\n  return new SigningCosmWasmClient(config.httpUrl, firstAddress, signer, feeTable);\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { OfflineSigner } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { createClient, loadOrCreateWallet } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly address: string;\n  readonly init: () => void;\n  readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  address: \"\",\n  init: () => {\n    return;\n  },\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface ConfigWalletProps extends ConfigProp {\n  readonly loadWallet: (addressPrefix: string) => Promise<OfflineSigner>;\n}\n\ntype SdkProviderProps = ConfigWalletProps & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function SdkProvider({ config, loadWallet, children }: SdkProviderProps): JSX.Element {\n  const contextWithInit = { ...defaultContext, init: init };\n  const [value, setValue] = useState(contextWithInit);\n\n  function init() {\n    loadWallet(config.addressPrefix)\n      .then((signer) => createClient(config, signer))\n      .then(async (client) => {\n        const address = client.senderAddress;\n        // load from faucet if needed\n        if (config.faucetUrl) {\n          const acct = await client.getAccount();\n          if (!acct?.balance?.length) {\n            await fetch(config.faucetUrl, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ ticker: config.faucetToken, address }),\n            });\n          }\n        }\n\n        setValue({\n          initialized: true,\n          address: address,\n          init: () => {\n            return;\n          },\n          getClient: () => client,\n        });\n      });\n  }\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n\ninterface ConfigProp {\n  readonly config: AppConfig;\n}\n\ntype BurnerWalletProviderProps = ConfigProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function BurnerWalletProvider({ config, children }: BurnerWalletProviderProps): JSX.Element {\n  return (\n    <SdkProvider config={config} loadWallet={loadOrCreateWallet}>\n      {children}\n    </SdkProvider>\n  );\n}\n","import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useSdk } from \"./wallet\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\ninterface ProtectedSwitchProps extends SwitchProps {\n  readonly authPath: string;\n}\n\nexport function ProtectedSwitch({ authPath, children, location }: ProtectedSwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: authPath,\n        state: location ? { redirectPathname: location.pathname, redirectState: location.state } : undefined,\n      }}\n    />\n  );\n}\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error;\n}\n","import * as React from \"react\";\n\nexport interface CenterProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Center({ tag: Tag = \"div\", children, ...props }: CenterProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Center } from \"./component\";\n\nexport const StyledCenter = styled(Center)`\n  box-sizing: content-box;\n\n  max-width: var(--max-width, none);\n\n  margin-left: auto;\n  margin-right: auto;\n\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from \"react\";\n\nexport interface StackProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Stack({ tag: Tag = \"div\", children, ...props }: StackProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"./component\";\n\nexport const StyledStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  & > * {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  & > * + * {\n    margin-top: var(--gap, var(--s0));\n  }\n`;\n","import { Center, CenterProps } from \"../Center\";\nimport * as React from \"react\";\n\nexport function PageLayout({ children, ...props }: CenterProps): JSX.Element {\n  return (\n    <Center tag=\"main\" {...props}>\n      {children}\n    </Center>\n  );\n}\n","import styled from \"styled-components\";\nimport { PageLayout } from \"./component\";\n\nexport const StyledPageLayout = styled(PageLayout)`\n  --max-width: 22rem;\n  --gap: var(--s8);\n\n  padding: var(--s4);\n\n  /* Reduces padding when width < 380px, but uses em for better media query support */\n  @media (max-width: 23.6875em) {\n    padding: var(--s-1) 0 var(--s-2) 0;\n  }\n\n  [alt=\"Back arrow\"] {\n    align-self: flex-start;\n  }\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface BackButtonProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly icon: string;\n  readonly path?: string;\n  readonly state?: any;\n}\n\nexport function BackButton({ icon, path, state, ...props }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path, state) : history.goBack;\n\n  return <img src={icon} alt=\"Back arrow\" onClick={goBack} {...props} />;\n}\n","import styled from \"styled-components\";\nimport { BackButton } from \"./component\";\n\nexport const StyledBackButton = styled(BackButton)`\n  cursor: pointer;\n`;\n","import { Spin } from \"antd\";\nimport styled from \"styled-components\";\n\nexport const StyledSpin = styled(Spin)`\n  & > span + div {\n    margin-top: var(--s2);\n  }\n`;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport * as React from \"react\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { StyledSpin } from \"./style\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nexport function Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <PageLayout>\n      <StyledSpin indicator={spinIndicator} tip={tip} />\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s9);\n  }\n`;\n\nexport const WelcomeStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const LightText = styled(Text)`\n  display: block;\n  font-weight: lighter;\n`;\n","import { RedirectLocation, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { Loading } from \"../../logic/Loading\";\nimport { LightText, MainStack, WelcomeStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface LoginProps {\n  readonly pathAfterLogin: string;\n  readonly appName: string;\n  readonly appLogo: string;\n}\n\nexport function Login({ pathAfterLogin, appName, appLogo }: LoginProps): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const sdk = useSdk();\n  const { refreshAccount, account } = useAccount();\n\n  const [initializing, setInitializing] = useState(false);\n\n  function init() {\n    setInitializing(true);\n    sdk.init();\n  }\n\n  useEffect(() => {\n    if (sdk.initialized) {\n      refreshAccount();\n    }\n  }, [sdk.initialized, refreshAccount]);\n\n  useEffect(() => {\n    if (account) {\n      if (state) {\n        history.push(state.redirectPathname, state.redirectState);\n      } else {\n        history.push(pathAfterLogin);\n      }\n    }\n  }, [account, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <PageLayout>\n      <MainStack>\n        <img src={appLogo} alt=\"CosmWasm logo\" />\n        <WelcomeStack>\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <LightText>Welcome to your {appName}</LightText>\n            <LightText>Select one of the following options to start:</LightText>\n          </Typography>\n          <Button type=\"primary\" onClick={init}>\n            Browser (Demo)\n          </Button>\n          <Button disabled type=\"primary\">\n            Keplr (Secure)\n          </Button>\n        </WelcomeStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const ResultText = styled(Text)`\n  font-size: var(--s-1);\n\n  &[data-result=\"success\"] {\n    color: var(--color-green);\n  }\n\n  &[data-result=\"failure\"] {\n    color: var(--color-red);\n  }\n`;\n","import { Button } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { MainStack, ResultText } from \"./style\";\n\ninterface ResultContent {\n  readonly result: \"success\" | \"failure\";\n  readonly icon: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n  readonly customButtonActionState?: any;\n}\n\nexport interface OperationResultProps {\n  readonly defaultButtonAction: (history: History) => void;\n  readonly successIcon: string;\n  readonly failIcon: string;\n}\n\nexport function OperationResult({\n  defaultButtonAction,\n  successIcon,\n  failIcon,\n}: OperationResultProps): JSX.Element {\n  const history = useHistory();\n\n  const {\n    success,\n    message,\n    error,\n    customButtonText,\n    customButtonActionPath,\n    customButtonActionState,\n  } = history.location.state as OperationResultState;\n\n  function getResultContent(success: boolean): ResultContent {\n    if (success) {\n      return {\n        result: \"success\",\n        icon: successIcon,\n        buttonText: \"Home\",\n        buttonAction: () => defaultButtonAction(history),\n      };\n    }\n\n    return {\n      result: \"failure\",\n      icon: failIcon,\n      buttonText: \"Retry\",\n      buttonAction: history.goBack,\n    };\n  }\n\n  const { icon, result, buttonText, buttonAction } = getResultContent(success);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath, customButtonActionState)\n    : buttonAction;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <img src={icon} alt=\"Result icon\" />\n        <ResultText data-result={result}>{message}</ResultText>\n        {error && <ResultText data-result={result}>{error}</ResultText>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s-2);\n  }\n\n  h3,\n  div[role=\"separator\"] {\n    margin: 0;\n  }\n\n  span,\n  button {\n    overflow-wrap: anywhere;\n  }\n\n  span {\n    display: block;\n    font-size: var(--s-1);\n  }\n\n  span + span {\n    font-weight: bold;\n  }\n\n  button,\n  button span {\n    font-size: var(--s0);\n  }\n\n  button {\n    height: 100%;\n    white-space: normal;\n  }\n`;\n","import { printableBalance, useAccount } from \"@cosmicdapp/logic\";\nimport { Button, Divider, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport { StackProps } from \"../../layout/Stack\";\nimport { AccountStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface YourAccountProps extends StackProps {\n  readonly hideTitle?: boolean;\n  readonly hideBalance?: boolean;\n}\n\nexport function YourAccount({ tag, hideTitle, hideBalance }: YourAccountProps): JSX.Element {\n  const accountProvider = useAccount();\n  const { address, balance } = accountProvider.account ?? { address: \"\", balance: [] };\n\n  return (\n    <AccountStack tag={tag}>\n      {!hideTitle && (\n        <header>\n          <Title level={3}>Your Account</Title>\n          {!hideBalance && <Divider />}\n        </header>\n      )}\n      <Text>{address}</Text>\n      {!hideBalance && <Text>({printableBalance(balance)})</Text>}\n      <Button type=\"primary\" onClick={() => copyToClipboard(address)}>\n        Copy Account Address\n      </Button>\n    </AccountStack>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalAntOverride = createGlobalStyle`\n  .ant-btn:not(.ant-input-search-button) {\n    width: var(--max-width);\n    max-width: 100vw;\n  }\n  \n  .ant-form div[role=\"alert\"] li {\n    color: var(--form-error);\n    font-size: var(--s-1);\n    text-align: left;\n    margin: var(--s-1);\n  \n    &::before {\n      content: \"* \";\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalColors = createGlobalStyle`\n  :root {\n    --color-black: #333;\n    --color-red: #eb5757;\n    --color-green: #27ae60;\n    --color-blue: #2f80ed;\n    --color-blue-light: #1890ff;\n\n    --color-primary: var(--color-blue);\n    --button-color: var(--color-blue-light);\n    --text-color: var(--color-primary);\n    --heading-color: var(--color-primary);\n    --form-error: var(--color-red);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalFonts = createGlobalStyle`\n  :root {\n    --ff-montserrat: Montserrat, sans-serif;\n    --ff-iceland: Iceland, serif;\n\n    --ff-text: var(--ff-montserrat);\n    --ff-heading: var(--ff-iceland);\n    \n    font-family: var(--ff-text);\n  }\n\n  p,\n  span {\n    font-family: var(--ff-text);\n    font-size: var(--s0);\n    overflow-wrap: anywhere;\n  }\n  \n  h1,\n  h2,\n  h3 {\n    font-family: var(--ff-heading);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalReset = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    min-height: 100vh;\n    line-height: 1.5;\n    text-rendering: optimizeSpeed;\n  }\n  \n  body,\n  h1,\n  h2,\n  p,\n  ul[class],\n  ol[class] {\n    margin: 0;\n  }\n  \n  ul[class],\n  ol[class] {\n    padding: 0;\n    list-style: none;\n  }\n  \n  button,\n  input,\n  select,\n  textarea {\n    font: inherit;\n  }\n  \n  img {\n    display: block;\n    max-width: 100%;\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01s !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01s !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalSpacing = createGlobalStyle`\n  :root {\n    --ratio: 1.25;\n\n    --s-6: calc(var(--s-5) / var(--ratio));\n    --s-5: calc(var(--s-4) / var(--ratio));\n    --s-4: calc(var(--s-3) / var(--ratio));\n    --s-3: calc(var(--s-2) / var(--ratio));\n    --s-2: calc(var(--s-1) / var(--ratio));\n    --s-1: calc(var(--s0) / var(--ratio));\n    --s0: 1rem;\n    --s1: calc(var(--s0) * var(--ratio));\n    --s2: calc(var(--s1) * var(--ratio));\n    --s3: calc(var(--s2) * var(--ratio));\n    --s4: calc(var(--s3) * var(--ratio));\n    --s5: calc(var(--s4) * var(--ratio));\n    --s6: calc(var(--s5) * var(--ratio));\n    --s7: calc(var(--s6) * var(--ratio));\n    --s8: calc(var(--s7) * var(--ratio));\n    --s9: calc(var(--s8) * var(--ratio));\n  }\n`;\n","import React from \"react\";\nimport { GlobalAntOverride } from \"./GlobalAntOverride\";\nimport { GlobalColors } from \"./GlobalColors\";\nimport { GlobalFonts } from \"./GlobalFonts\";\nimport { GlobalReset } from \"./GlobalReset\";\nimport { GlobalSpacing } from \"./GlobalSpacing\";\n\nexport function GlobalStyle(): JSX.Element {\n  return (\n    <>\n      <GlobalReset />\n      <GlobalSpacing />\n      <GlobalColors />\n      <GlobalFonts />\n      <GlobalAntOverride />\n    </>\n  );\n}\n","import { AppConfig, CoinMap } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  httpUrl: \"http://localhost:1317\",\n  feeToken: \"ucosm\",\n  gasPrice: 0.025,\n  faucetUrl: \"http://localhost:8000/credit\",\n  faucetToken: \"COSM\",\n  addressPrefix: \"cosmos\",\n};\n\nconst coinMap: CoinMap = {\n  ushell: { denom: \"SHELL\", fractionalDigits: 6 },\n  ureef: { denom: \"REEF\", fractionalDigits: 6 },\n};\n\nconst coralnet: AppConfig = {\n  httpUrl: \"https://lcd.coralnet.cosmwasm.com\",\n  feeToken: \"ushell\",\n  gasPrice: 0.025,\n  faucetUrl: \"https://faucet.coralnet.cosmwasm.com/credit\",\n  faucetToken: \"SHELL\",\n  addressPrefix: \"coral\",\n  coinMap: coinMap,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : coralnet;\n","import { Login as LoginDesign } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport { pathTokens } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\n\nexport function Login(): JSX.Element {\n  return <LoginDesign pathAfterLogin={pathTokens} appName=\"Wallet\" appLogo={cosmWasmLogo} />;\n}\n","export const pathLogin = \"/login\";\nexport const pathTokens = \"/tokens\";\nexport const pathOperationResult = \"/result\";\n","import { OperationResult as OperationResultDesign } from \"@cosmicdapp/design\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { pathTokens } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\n\nfunction goToTokensList(history: History) {\n  history.push(pathTokens);\n}\n\nexport function OperationResult(): JSX.Element {\n  return (\n    <OperationResultDesign\n      defaultButtonAction={goToTokensList}\n      successIcon={successIcon}\n      failIcon={failIcon}\n    />\n  );\n}\n","import * as Yup from \"yup\";\nimport { config } from \"../../config\";\n\nconst regexStartsWithPrefix = new RegExp(`^${config.addressPrefix}`);\n\nconst addressShape = {\n  address: Yup.string()\n    .required(\"An address is required\")\n    .matches(regexStartsWithPrefix, `\"${config.addressPrefix}\" prefix required`)\n    .length(39 + config.addressPrefix.length, \"Address invalid\"),\n};\n\nexport const searchValidationSchema = Yup.object().shape(addressShape);\n\nexport const sendAddressValidationSchema = Yup.object().shape(addressShape);\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: baseline;\n\n  & > * + * {\n    margin-left: var(--s0);\n  }\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n  }\n`;\n","import { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { sendAddressValidationSchema } from \"../../../forms/validationSchemas\";\nimport { FormField, FormStack } from \"./style\";\n\nconst { Text } = Typography;\n\ninterface FormSendTokensProps {\n  readonly tokenName: string;\n  readonly tokenAmount: string;\n  readonly sendTokensAction: (values: unknown) => void;\n}\n\nexport function FormSendTokens({\n  tokenName,\n  tokenAmount,\n  sendTokensAction,\n}: FormSendTokensProps): JSX.Element {\n  const sendAmountValidationSchema = Yup.object().shape({\n    amount: Yup.number()\n      .required(\"An amount is required\")\n      .positive(\"Amount should be positive\")\n      .max(parseFloat(tokenAmount), `Amount cannot be greater than ${tokenAmount}`),\n  });\n\n  const sendValidationSchema = sendAmountValidationSchema.concat(sendAddressValidationSchema);\n\n  return (\n    <Formik\n      initialValues={{ amount: \"\", address: \"\" }}\n      onSubmit={sendTokensAction}\n      validationSchema={sendValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormField>\n              <Text>Send</Text>\n              <FormItem name=\"amount\">\n                <Input name=\"amount\" placeholder=\"Enter amount\" />\n              </FormItem>\n              <Text>{tokenName}</Text>\n            </FormField>\n            <FormField>\n              <Text>to</Text>\n              <FormItem name=\"address\">\n                <Input name=\"address\" placeholder=\"Enter address\" />\n              </FormItem>\n            </FormField>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Send\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport {\n  displayAmountToNative,\n  getErrorFromStackTrace,\n  nativeCoinToDisplay,\n  useAccount,\n  useSdk,\n} from \"@cosmicdapp/logic\";\nimport { Coin, isPostTxFailure } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathOperationResult, pathTokens } from \"../../paths\";\nimport { FormSendTokens } from \"./FormSendTokens\";\nimport { AccountStack, Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface TokenDetailParams {\n  readonly tokenName: string;\n}\n\nexport interface TokenDetailState {\n  readonly tokenAmount: string;\n}\n\nexport function TokenDetail(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const { tokenName }: TokenDetailParams = useParams();\n  const { tokenAmount } = history.location.state as TokenDetailState;\n\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const sendTokensAction = (values) => {\n    setLoading(true);\n    const { address, amount } = values;\n    const recipientAddress: string = address;\n\n    // TODO: Add try catch so it does not fail i.e. too many decimals\n    const amountToTransfer = displayAmountToNative(amount, config.coinMap, tokenName);\n\n    const nativeTokenToTransfer: Coin = { denom: tokenName, amount: amountToTransfer };\n    const transferAmount: readonly Coin[] = [nativeTokenToTransfer];\n\n    getClient()\n      .sendTokens(recipientAddress, transferAmount)\n      .then((result) => {\n        if (isPostTxFailure(result)) {\n          return Promise.reject(result.rawLog);\n        }\n\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `${amount} ${tokenName} successfully sent to ${recipientAddress}`,\n            customButtonText: \"Tokens\",\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        const tokenDetailPath = `${pathTokens}/${tokenName}`;\n        const tokenDetailState: TokenDetailState = { tokenAmount };\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Send transaction failed:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: tokenDetailPath,\n            customButtonActionState: tokenDetailState,\n          } as OperationResultState,\n        });\n      });\n  };\n\n  const nativeToken: Coin = { denom: tokenName, amount: tokenAmount };\n  // TODO: Add try catch so it does not fail i.e. too many decimals\n  const { denom: nameToDisplay, amount: amountToDisplay } = nativeCoinToDisplay(nativeToken, config.coinMap);\n  const [amountInteger, amountDecimal] = amountToDisplay.split(\".\");\n\n  return (\n    (loading && <Loading loadingText={`Sending ${nameToDisplay}...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <AccountStack>\n            <Title>{nameToDisplay}</Title>\n            <YourAccount hideTitle hideBalance />\n          </AccountStack>\n          <Amount>\n            <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n            {amountDecimal && <Text>{amountDecimal}</Text>}\n            <Text>{\" tokens\"}</Text>\n          </Amount>\n          <FormSendTokens\n            tokenName={nameToDisplay}\n            tokenAmount={amountToDisplay}\n            sendTokensAction={sendTokensAction}\n          />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n","// Search form not present in form-antd: https://github.com/jannikbuschke/formik-antd/blob/master/src/input/index.tsx\nimport { Input as BaseInput } from \"antd\";\nimport { InputProps as BaseInputProps, SearchProps as BaseSearchProps } from \"antd/lib/input\";\nimport { FieldProps } from \"formik\";\nimport { Field } from \"formik-antd\";\nimport * as React from \"react\";\nimport Search from \"antd/lib/input/Search\";\n\ninterface FormikFieldProps {\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validate?: (value: any) => undefined | string | Promise<any>;\n  fast?: boolean;\n}\n\ntype InputProps = FormikFieldProps & BaseInputProps;\n\ninterface InputType\n  extends React.ForwardRefExoticComponent<\n    FormikFieldProps & BaseInputProps & React.RefAttributes<BaseInput>\n  > {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  Search: React.ForwardRefExoticComponent<FormikFieldProps & BaseSearchProps & React.RefAttributes<Search>>;\n}\n\n// eslint-disable-next-line react/display-name\nconst Input = React.forwardRef((\n  { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: InputProps,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  ref: React.Ref<Search>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({ field: { value, onChange, onBlur } }: FieldProps) => (\n      <BaseInput\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(event) => {\n          onChange(event);\n          $onChange && $onChange(event);\n        }}\n        onBlur={(event) => {\n          onBlur(event);\n          $onBlur && $onBlur(event);\n        }}\n        {...restProps}\n      />\n    )}\n  </Field>\n));\n\nconst TypedInput = (Input as unknown) as InputType;\ntype SearchProps = FormikFieldProps & BaseSearchProps;\n\n// eslint-disable-next-line react/display-name\nTypedInput.Search = React.forwardRef(\n  (\n    { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: SearchProps,\n    ref: React.Ref<BaseInput>,\n  ) => (\n    <Field name={name} validate={validate} fast={fast}>\n      {({ field: { value, onChange, onBlur } }: FieldProps) => (\n        <BaseInput.Search\n          ref={ref}\n          name={name}\n          value={value}\n          onChange={(event) => {\n            onChange(event);\n            $onChange && $onChange(event);\n          }}\n          onBlur={(event) => {\n            onBlur(event);\n            $onBlur && $onBlur(event);\n          }}\n          {...restProps}\n        />\n      )}\n    </Field>\n  ),\n);\n\nexport default TypedInput.Search;\n","import { Formik } from \"formik\";\nimport { Form, FormItem } from \"formik-antd\";\nimport React from \"react\";\nimport Search from \"../../../forms/Search\";\nimport { searchValidationSchema } from \"../../../forms/validationSchemas\";\n\ninterface FormSearchNameProps {\n  readonly currentAddress: string;\n  readonly setCurrentAddress: (value: React.SetStateAction<string>) => void;\n}\n\nexport function FormSearchName({ currentAddress, setCurrentAddress }: FormSearchNameProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ address: currentAddress }}\n      validationSchema={searchValidationSchema}\n      onSubmit={(values) => {\n        setCurrentAddress(values.address);\n      }}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"address\">\n            <Search\n              name=\"address\"\n              placeholder=\"Enter address\"\n              enterButton\n              onSearch={formikProps.submitForm}\n            />\n          </FormItem>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const TokenStack = styled(Stack)`\n  & > * {\n    --gap: 0;\n  }\n`;\n\nexport const TokenItem = styled.div`\n  --v-padding: var(--s-2);\n  --border-size: 1px;\n\n  padding-top: var(--v-padding);\n  padding-bottom: var(--v-padding);\n\n  padding-left: var(--s4);\n  margin-left: calc(-1 * var(--s4));\n  padding-right: var(--s4);\n  margin-right: calc(-1 * var(--s4));\n\n  margin-bottom: calc(-1 * var(--border-size));\n\n  cursor: pointer;\n\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: var(--color-primary);\n\n    & * {\n      color: white;\n    }\n  }\n\n  &:first-child > * {\n    --border-size: 0;\n  }\n\n  & > * {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n\n    span:first-child {\n      font-family: var(--ff-iceland);\n      font-size: var(--s2);\n    }\n\n    span:not(:first-child) {\n      font-weight: bolder;\n      font-size: var(--s-1);\n    }\n  }\n\n  &[data-state=\"forbidden\"] {\n    &:hover,\n    &:active,\n    &:focus {\n      background-color: var(--color-black);\n      cursor: not-allowed;\n    }\n  }\n`;\n\nexport const BorderContainer = styled.div`\n  border-top: var(--border-size) solid var(--color-primary);\n  padding-top: var(--v-padding);\n  margin-top: calc(-1 * var(--v-padding));\n`;\n","import { nativeCoinToDisplay, useAccount, useError, useSdk } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../../../../../config\";\nimport { pathTokens } from \"../../../../paths\";\nimport { TokenDetailState } from \"../../../TokenDetail\";\nimport { BorderContainer, TokenItem, TokenStack } from \"./style\";\n\nconst { Text } = Typography;\n\ninterface TokenListProps {\n  readonly currentAddress: string;\n}\n\nexport function TokenList({ currentAddress }: TokenListProps): JSX.Element {\n  const { getClient } = useSdk();\n  const { setError } = useError();\n  const [balance, setBalance] = useState<readonly Coin[]>([]);\n\n  useEffect(() => {\n    getClient()\n      .getAccount(currentAddress)\n      .then(({ balance }) => setBalance(balance))\n      .catch(setError);\n  }, [getClient, currentAddress, setError]);\n\n  const { account } = useAccount();\n  const amAllowed = account.address === currentAddress;\n\n  const history = useHistory<TokenDetailState>();\n  function goTokenDetail(token: Coin) {\n    history.push(`${pathTokens}/${token.denom}`, { tokenAmount: token.amount });\n  }\n\n  return (\n    <TokenStack>\n      {balance.map((nativeToken) => {\n        const { denom: denomToDisplay, amount: amountToDisplay } = nativeCoinToDisplay(\n          nativeToken,\n          config.coinMap,\n        );\n\n        return (\n          <TokenItem\n            key={nativeToken.denom}\n            data-state={amAllowed ? \"\" : \"forbidden\"}\n            onClick={() => {\n              amAllowed && goTokenDetail(nativeToken);\n            }}\n          >\n            <BorderContainer>\n              <Text>{denomToDisplay}</Text>\n              <Text>{amountToDisplay !== \"0\" ? amountToDisplay : \"No tokens\"}</Text>\n            </BorderContainer>\n          </TokenItem>\n        );\n      })}\n    </TokenStack>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n","import { PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { useAccount } from \"@cosmicdapp/logic\";\nimport { Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { FormSearchName } from \"./components/FormSearchName\";\nimport { TokenList } from \"./components/TokenList\";\nimport { MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nexport function Tokens(): JSX.Element {\n  const { account } = useAccount();\n  const [currentAddress, setCurrentAddress] = useState(account.address);\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <Title>Tokens</Title>\n        <FormSearchName currentAddress={currentAddress} setCurrentAddress={setCurrentAddress} />\n        <TokenList currentAddress={currentAddress} />\n        <YourAccount hideTitle hideBalance />\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { GlobalStyle } from \"@cosmicdapp/design\";\nimport { AccountProvider, BurnerWalletProvider, ErrorProvider, ProtectedSwitch } from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport { pathLogin, pathOperationResult, pathTokens } from \"./paths\";\nimport { Login } from \"./routes/Login\";\nimport { OperationResult } from \"./routes/OperationResult\";\nimport { TokenDetail } from \"./routes/TokenDetail\";\nimport { Tokens } from \"./routes/Tokens\";\n\nexport function App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <BurnerWalletProvider config={config}>\n        <AccountProvider>\n          <GlobalStyle />\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path={pathLogin} component={Login} />\n              <ProtectedSwitch authPath={pathLogin}>\n                <Route exact path={pathTokens} component={Tokens} />\n                <Route exact path={`${pathTokens}/:tokenName`} component={TokenDetail} />\n                <Route exact path={pathOperationResult} component={OperationResult} />\n              </ProtectedSwitch>\n            </Switch>\n          </Router>\n        </AccountProvider>\n      </BurnerWalletProvider>\n    </ErrorProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}