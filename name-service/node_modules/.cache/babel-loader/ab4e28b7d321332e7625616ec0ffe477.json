{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nvar _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/index.tsx\";\nimport React, { useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../service\";\nimport { printableCoin } from \"../../../service/helpers\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport YourAccount from \"../../components/YourAccount\";\nimport { pathOperationResult } from \"../../paths\";\nimport \"./Transfer.less\";\nconst {\n  Title,\n  Text\n} = _Typography;\n\nfunction Transfer() {\n  const {\n    name,\n    contractAddress\n  } = useLocation().state;\n  const {\n    getClient\n  } = useSdk();\n  const accountProvider = useAccount();\n  const {\n    setError\n  } = useError();\n  const history = useHistory();\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [prices, setPrices] = useState({});\n  const transferPrice = prices.transfer;\n  React.useEffect(() => {\n    getClient().queryContractSmart(contractAddress, {\n      config: {}\n    }).then(response => {\n      setPrices({\n        transfer: response.transfer_price\n      });\n    }).catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    const payment = transferPrice ? [transferPrice] : undefined;\n    getClient().execute(contractAddress, {\n      transfer: {\n        name: name,\n        to: newOwnerAddress\n      }\n    }, \"Transferring my name\", payment).then(() => {\n      accountProvider.refreshAccount();\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: true,\n          message: `Succesfully transferred ${name} to ${newOwnerAddress}`\n        }\n      });\n    }).catch(error => {\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: `Name transfer failed: ${error}`\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Center, {\n    tag: \"main\",\n    className: \"Transfer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Stack, {\n    className: \"TransferStack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Transfer\"), /*#__PURE__*/React.createElement(_Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"Name: \"), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, name)), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"to\"), /*#__PURE__*/React.createElement(_Input, {\n    placeholder: \"Enter address\",\n    onChange: event => setNewOwnerAddress(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(_Button, {\n    type: \"primary\",\n    onClick: tryTransfer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, \"Transfer \", printableCoin(transferPrice))), /*#__PURE__*/React.createElement(YourAccount, {\n    tag: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Transfer;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/index.tsx"],"names":["React","useState","useHistory","useLocation","useAccount","useError","useSdk","printableCoin","Center","Stack","BackButton","YourAccount","pathOperationResult","Title","Text","Transfer","name","contractAddress","state","getClient","accountProvider","setError","history","newOwnerAddress","setNewOwnerAddress","prices","setPrices","transferPrice","transfer","useEffect","queryContractSmart","config","then","response","transfer_price","catch","tryTransfer","payment","undefined","execute","to","refreshAccount","push","pathname","success","message","error","event","target","value"],"mappings":"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","sourcesContent":["import { Button, Input, Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../service\";\nimport { printableCoin } from \"../../../service/helpers\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport YourAccount from \"../../components/YourAccount\";\nimport { pathOperationResult } from \"../../paths\";\nimport { Prices } from \"../Luxury/SearchResult\";\nimport \"./Transfer.less\";\nimport { ResultState } from \"../OperationResult\";\n\nconst { Title, Text } = Typography;\n\ninterface TransferState {\n  readonly name: string;\n  readonly contractAddress: string;\n}\n\nfunction Transfer(): JSX.Element {\n  const { name, contractAddress } = useLocation().state as TransferState;\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n  const { setError } = useError();\n  const history = useHistory();\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [prices, setPrices] = useState<Prices>({});\n  const transferPrice = prices.transfer;\n\n  React.useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setPrices({\n          transfer: response.transfer_price,\n        });\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    const payment = transferPrice ? [transferPrice] : undefined;\n\n    getClient()\n      .execute(\n        contractAddress,\n        { transfer: { name: name, to: newOwnerAddress } },\n        \"Transferring my name\",\n        payment,\n      )\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: { success: true, message: `Succesfully transferred ${name} to ${newOwnerAddress}` },\n        });\n      })\n      .catch((error) => {\n        history.push({\n          pathname: pathOperationResult,\n          state: { success: false, message: `Name transfer failed: ${error}` },\n        });\n      });\n  }\n\n  return (\n    <Center tag=\"main\" className=\"Transfer\">\n      <Stack>\n        <BackButton />\n        <Stack className=\"TransferStack\">\n          <Title>Transfer</Title>\n          <Typography>\n            <Text>Name: </Text>\n            <Text>{name}</Text>\n          </Typography>\n          <Text>to</Text>\n          <Input placeholder=\"Enter address\" onChange={(event) => setNewOwnerAddress(event.target.value)} />\n          <Button type=\"primary\" onClick={tryTransfer}>\n            Transfer {printableCoin(transferPrice)}\n          </Button>\n        </Stack>\n        <YourAccount tag=\"footer\" />\n      </Stack>\n    </Center>\n  );\n}\n\nexport default Transfer;\n"]},"metadata":{},"sourceType":"module"}