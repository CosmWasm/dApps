{"ast":null,"code":"import memoizeCapped from './_memoizeCapped.js';\n/** Used to match property names within property paths. */\n\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n/** Used to match backslashes in property paths. */\n\nvar reEscapeChar = /\\\\(\\\\)?/g;\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\n\nvar stringToPath = memoizeCapped(function (string) {\n  var result = [];\n\n  if (string.charCodeAt(0) === 46\n  /* . */\n  ) {\n      result.push('');\n    }\n\n  string.replace(rePropName, function (match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);\n  });\n  return result;\n});\nexport default stringToPath;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/lodash-es/_stringToPath.js"],"names":["memoizeCapped","rePropName","reEscapeChar","stringToPath","string","result","charCodeAt","push","replace","match","number","quote","subString"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,qBAA1B;AAEA;;AACA,IAAIC,UAAU,GAAG,kGAAjB;AAEA;;AACA,IAAIC,YAAY,GAAG,UAAnB;AAEA;;;;;;;;AAOA,IAAIC,YAAY,GAAGH,aAAa,CAAC,UAASI,MAAT,EAAiB;AAChD,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAID,MAAM,CAACE,UAAP,CAAkB,CAAlB,MAAyB;AAAG;AAAhC,IAAyC;AACvCD,MAAAA,MAAM,CAACE,IAAP,CAAY,EAAZ;AACD;;AACDH,EAAAA,MAAM,CAACI,OAAP,CAAeP,UAAf,EAA2B,UAASQ,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,SAA/B,EAA0C;AACnEP,IAAAA,MAAM,CAACE,IAAP,CAAYI,KAAK,GAAGC,SAAS,CAACJ,OAAV,CAAkBN,YAAlB,EAAgC,IAAhC,CAAH,GAA4CQ,MAAM,IAAID,KAAvE;AACD,GAFD;AAGA,SAAOJ,MAAP;AACD,CAT+B,CAAhC;AAWA,eAAeF,YAAf","sourcesContent":["import memoizeCapped from './_memoizeCapped.js';\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nexport default stringToPath;\n"]},"metadata":{},"sourceType":"module"}