{"ast":null,"code":"import isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n/** Used to match property names within property paths. */\n\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\n\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n\n  var type = typeof value;\n\n  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {\n    return true;\n  }\n\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n}\n\nexport default isKey;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/lodash-es/_isKey.js"],"names":["isArray","isSymbol","reIsDeepProp","reIsPlainProp","isKey","value","object","type","test","Object"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;AACA,IAAIC,YAAY,GAAG,kDAAnB;AAAA,IACIC,aAAa,GAAG,OADpB;AAGA;;;;;;;;;AAQA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,MAAtB,EAA8B;AAC5B,MAAIN,OAAO,CAACK,KAAD,CAAX,EAAoB;AAClB,WAAO,KAAP;AACD;;AACD,MAAIE,IAAI,GAAG,OAAOF,KAAlB;;AACA,MAAIE,IAAI,IAAI,QAAR,IAAoBA,IAAI,IAAI,QAA5B,IAAwCA,IAAI,IAAI,SAAhD,IACAF,KAAK,IAAI,IADT,IACiBJ,QAAQ,CAACI,KAAD,CAD7B,EACsC;AACpC,WAAO,IAAP;AACD;;AACD,SAAOF,aAAa,CAACK,IAAd,CAAmBH,KAAnB,KAA6B,CAACH,YAAY,CAACM,IAAb,CAAkBH,KAAlB,CAA9B,IACJC,MAAM,IAAI,IAAV,IAAkBD,KAAK,IAAII,MAAM,CAACH,MAAD,CADpC;AAED;;AAED,eAAeF,KAAf","sourcesContent":["import isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nexport default isKey;\n"]},"metadata":{},"sourceType":"module"}