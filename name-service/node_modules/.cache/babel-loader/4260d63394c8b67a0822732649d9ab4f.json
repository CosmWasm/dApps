{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Decimal = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\")); // Too large values lead to massive memory usage. Limit to something sensible.\n// The largest value we need is 18 (Ether).\n\n\nconst maxFractionalDigits = 100;\n/**\n * A type for arbitrary precision, non-negative decimals.\n *\n * Instances of this class are immutable.\n */\n\nclass Decimal {\n  constructor(atomics, fractionalDigits) {\n    this.data = {\n      atomics: new bn_js_1.default(atomics),\n      fractionalDigits: fractionalDigits\n    };\n  }\n\n  static fromUserInput(input, fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    const badCharacter = input.match(/[^0-9.]/);\n\n    if (badCharacter) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      throw new Error(`Invalid character at position ${badCharacter.index + 1}`);\n    }\n\n    let whole;\n    let fractional;\n\n    if (input.search(/\\./) === -1) {\n      // integer format, no separator\n      whole = input;\n      fractional = \"\";\n    } else {\n      const parts = input.split(\".\");\n\n      switch (parts.length) {\n        case 0:\n        case 1:\n          throw new Error(\"Fewer than two elements in split result. This must not happen here.\");\n\n        case 2:\n          if (!parts[1]) throw new Error(\"Fractional part missing\");\n          whole = parts[0];\n          fractional = parts[1].replace(/0+$/, \"\");\n          break;\n\n        default:\n          throw new Error(\"More than one separator found\");\n      }\n    }\n\n    if (fractional.length > fractionalDigits) {\n      throw new Error(\"Got more fractional digits than supported\");\n    }\n\n    const quantity = `${whole}${fractional.padEnd(fractionalDigits, \"0\")}`;\n    return new Decimal(quantity, fractionalDigits);\n  }\n\n  static fromAtomics(atomics, fractionalDigits) {\n    Decimal.verifyFractionalDigits(fractionalDigits);\n    return new Decimal(atomics, fractionalDigits);\n  }\n\n  static verifyFractionalDigits(fractionalDigits) {\n    if (!Number.isInteger(fractionalDigits)) throw new Error(\"Fractional digits is not an integer\");\n    if (fractionalDigits < 0) throw new Error(\"Fractional digits must not be negative\");\n\n    if (fractionalDigits > maxFractionalDigits) {\n      throw new Error(`Fractional digits must not exceed ${maxFractionalDigits}`);\n    }\n  }\n\n  static compare(a, b) {\n    if (a.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    return a.data.atomics.cmp(new bn_js_1.default(b.atomics));\n  }\n\n  get atomics() {\n    return this.data.atomics.toString();\n  }\n\n  get fractionalDigits() {\n    return this.data.fractionalDigits;\n  }\n\n  toString() {\n    const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n    const whole = this.data.atomics.div(factor);\n    const fractional = this.data.atomics.mod(factor);\n\n    if (fractional.isZero()) {\n      return whole.toString();\n    } else {\n      const fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, \"0\");\n      const trimmedFractionalPart = fullFractionalPart.replace(/0+$/, \"\");\n      return `${whole.toString()}.${trimmedFractionalPart}`;\n    }\n  }\n  /**\n   * Returns an approximation as a float type. Only use this if no\n   * exact calculation is required.\n   */\n\n\n  toFloatApproximation() {\n    const out = Number(this.toString());\n    if (Number.isNaN(out)) throw new Error(\"Conversion to number failed\");\n    return out;\n  }\n  /**\n   * a.plus(b) returns a+b.\n   *\n   * Both values need to have the same fractional digits.\n   */\n\n\n  plus(b) {\n    if (this.fractionalDigits !== b.fractionalDigits) throw new Error(\"Fractional digits do not match\");\n    const sum = this.data.atomics.add(new bn_js_1.default(b.atomics));\n    return new Decimal(sum.toString(), this.fractionalDigits);\n  }\n\n  equals(b) {\n    return Decimal.compare(this, b) === 0;\n  }\n\n  isLessThan(b) {\n    return Decimal.compare(this, b) < 0;\n  }\n\n  isLessThanOrEqual(b) {\n    return Decimal.compare(this, b) <= 0;\n  }\n\n  isGreaterThan(b) {\n    return Decimal.compare(this, b) > 0;\n  }\n\n  isGreaterThanOrEqual(b) {\n    return Decimal.compare(this, b) >= 0;\n  }\n\n}\n\nexports.Decimal = Decimal;","map":{"version":3,"sources":["../src/decimal.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Decimal = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n// Too large values lead to massive memory usage. Limit to something sensible.\n// The largest value we need is 18 (Ether).\nconst maxFractionalDigits = 100;\n/**\n * A type for arbitrary precision, non-negative decimals.\n *\n * Instances of this class are immutable.\n */\nclass Decimal {\n    constructor(atomics, fractionalDigits) {\n        this.data = {\n            atomics: new bn_js_1.default(atomics),\n            fractionalDigits: fractionalDigits,\n        };\n    }\n    static fromUserInput(input, fractionalDigits) {\n        Decimal.verifyFractionalDigits(fractionalDigits);\n        const badCharacter = input.match(/[^0-9.]/);\n        if (badCharacter) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            throw new Error(`Invalid character at position ${badCharacter.index + 1}`);\n        }\n        let whole;\n        let fractional;\n        if (input.search(/\\./) === -1) {\n            // integer format, no separator\n            whole = input;\n            fractional = \"\";\n        }\n        else {\n            const parts = input.split(\".\");\n            switch (parts.length) {\n                case 0:\n                case 1:\n                    throw new Error(\"Fewer than two elements in split result. This must not happen here.\");\n                case 2:\n                    if (!parts[1])\n                        throw new Error(\"Fractional part missing\");\n                    whole = parts[0];\n                    fractional = parts[1].replace(/0+$/, \"\");\n                    break;\n                default:\n                    throw new Error(\"More than one separator found\");\n            }\n        }\n        if (fractional.length > fractionalDigits) {\n            throw new Error(\"Got more fractional digits than supported\");\n        }\n        const quantity = `${whole}${fractional.padEnd(fractionalDigits, \"0\")}`;\n        return new Decimal(quantity, fractionalDigits);\n    }\n    static fromAtomics(atomics, fractionalDigits) {\n        Decimal.verifyFractionalDigits(fractionalDigits);\n        return new Decimal(atomics, fractionalDigits);\n    }\n    static verifyFractionalDigits(fractionalDigits) {\n        if (!Number.isInteger(fractionalDigits))\n            throw new Error(\"Fractional digits is not an integer\");\n        if (fractionalDigits < 0)\n            throw new Error(\"Fractional digits must not be negative\");\n        if (fractionalDigits > maxFractionalDigits) {\n            throw new Error(`Fractional digits must not exceed ${maxFractionalDigits}`);\n        }\n    }\n    static compare(a, b) {\n        if (a.fractionalDigits !== b.fractionalDigits)\n            throw new Error(\"Fractional digits do not match\");\n        return a.data.atomics.cmp(new bn_js_1.default(b.atomics));\n    }\n    get atomics() {\n        return this.data.atomics.toString();\n    }\n    get fractionalDigits() {\n        return this.data.fractionalDigits;\n    }\n    toString() {\n        const factor = new bn_js_1.default(10).pow(new bn_js_1.default(this.data.fractionalDigits));\n        const whole = this.data.atomics.div(factor);\n        const fractional = this.data.atomics.mod(factor);\n        if (fractional.isZero()) {\n            return whole.toString();\n        }\n        else {\n            const fullFractionalPart = fractional.toString().padStart(this.data.fractionalDigits, \"0\");\n            const trimmedFractionalPart = fullFractionalPart.replace(/0+$/, \"\");\n            return `${whole.toString()}.${trimmedFractionalPart}`;\n        }\n    }\n    /**\n     * Returns an approximation as a float type. Only use this if no\n     * exact calculation is required.\n     */\n    toFloatApproximation() {\n        const out = Number(this.toString());\n        if (Number.isNaN(out))\n            throw new Error(\"Conversion to number failed\");\n        return out;\n    }\n    /**\n     * a.plus(b) returns a+b.\n     *\n     * Both values need to have the same fractional digits.\n     */\n    plus(b) {\n        if (this.fractionalDigits !== b.fractionalDigits)\n            throw new Error(\"Fractional digits do not match\");\n        const sum = this.data.atomics.add(new bn_js_1.default(b.atomics));\n        return new Decimal(sum.toString(), this.fractionalDigits);\n    }\n    equals(b) {\n        return Decimal.compare(this, b) === 0;\n    }\n    isLessThan(b) {\n        return Decimal.compare(this, b) < 0;\n    }\n    isLessThanOrEqual(b) {\n        return Decimal.compare(this, b) <= 0;\n    }\n    isGreaterThan(b) {\n        return Decimal.compare(this, b) > 0;\n    }\n    isGreaterThanOrEqual(b) {\n        return Decimal.compare(this, b) >= 0;\n    }\n}\nexports.Decimal = Decimal;\n//# sourceMappingURL=decimal.js.map"]},"metadata":{},"sourceType":"script"}