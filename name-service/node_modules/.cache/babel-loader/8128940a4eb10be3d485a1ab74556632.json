{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizePubkey = exports.uint64ToString = exports.uint64ToNumber = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst pubkey_1 = require(\"../pubkey\");\n/**\n * Converts an integer expressed as number or string to a number.\n * Throws if input is not a valid uint64 or if the value exceeds MAX_SAFE_INTEGER.\n *\n * This is needed for supporting Comsos SDK 0.37/0.38/0.39 with one client.\n */\n\n\nfunction uint64ToNumber(input) {\n  const value = typeof input === \"number\" ? math_1.Uint64.fromNumber(input) : math_1.Uint64.fromString(input);\n  return value.toNumber();\n}\n\nexports.uint64ToNumber = uint64ToNumber;\n/**\n * Converts an integer expressed as number or string to a string.\n * Throws if input is not a valid uint64.\n *\n * This is needed for supporting Comsos SDK 0.37/0.38/0.39 with one client.\n */\n\nfunction uint64ToString(input) {\n  const value = typeof input === \"number\" ? math_1.Uint64.fromNumber(input) : math_1.Uint64.fromString(input);\n  return value.toString();\n}\n\nexports.uint64ToString = uint64ToString;\n/**\n * Normalizes a pubkey as in `BaseAccount.public_key` to allow supporting\n * Comsos SDK 0.37–0.39.\n *\n * Returns null when unset.\n */\n\nfunction normalizePubkey(input) {\n  if (!input) return null;\n  if (typeof input === \"string\") return pubkey_1.decodeBech32Pubkey(input);\n  return input;\n}\n\nexports.normalizePubkey = normalizePubkey;","map":{"version":3,"sources":["../../src/lcdapi/utils.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAGA;;;;;;;;AAMA,SAAgB,cAAhB,CAA+B,KAA/B,EAAqD;AACnD,QAAM,KAAK,GAAG,OAAO,KAAP,KAAiB,QAAjB,GAA4B,MAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,KAAlB,CAA5B,GAAuD,MAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,KAAlB,CAArE;AACA,SAAO,KAAK,CAAC,QAAN,EAAP;AACD;;AAHD,OAAA,CAAA,cAAA,GAAA,cAAA;AAKA;;;;;;;AAMA,SAAgB,cAAhB,CAA+B,KAA/B,EAAqD;AACnD,QAAM,KAAK,GAAG,OAAO,KAAP,KAAiB,QAAjB,GAA4B,MAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,KAAlB,CAA5B,GAAuD,MAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,KAAlB,CAArE;AACA,SAAO,KAAK,CAAC,QAAN,EAAP;AACD;;AAHD,OAAA,CAAA,cAAA,GAAA,cAAA;AAKA;;;;;;;AAMA,SAAgB,eAAhB,CAAgC,KAAhC,EAA6D;AAC3D,MAAI,CAAC,KAAL,EAAY,OAAO,IAAP;AACZ,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B,OAAO,QAAA,CAAA,kBAAA,CAAmB,KAAnB,CAAP;AAC/B,SAAO,KAAP;AACD;;AAJD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizePubkey = exports.uint64ToString = exports.uint64ToNumber = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst pubkey_1 = require(\"../pubkey\");\n/**\n * Converts an integer expressed as number or string to a number.\n * Throws if input is not a valid uint64 or if the value exceeds MAX_SAFE_INTEGER.\n *\n * This is needed for supporting Comsos SDK 0.37/0.38/0.39 with one client.\n */\nfunction uint64ToNumber(input) {\n    const value = typeof input === \"number\" ? math_1.Uint64.fromNumber(input) : math_1.Uint64.fromString(input);\n    return value.toNumber();\n}\nexports.uint64ToNumber = uint64ToNumber;\n/**\n * Converts an integer expressed as number or string to a string.\n * Throws if input is not a valid uint64.\n *\n * This is needed for supporting Comsos SDK 0.37/0.38/0.39 with one client.\n */\nfunction uint64ToString(input) {\n    const value = typeof input === \"number\" ? math_1.Uint64.fromNumber(input) : math_1.Uint64.fromString(input);\n    return value.toString();\n}\nexports.uint64ToString = uint64ToString;\n/**\n * Normalizes a pubkey as in `BaseAccount.public_key` to allow supporting\n * Comsos SDK 0.37–0.39.\n *\n * Returns null when unset.\n */\nfunction normalizePubkey(input) {\n    if (!input)\n        return null;\n    if (typeof input === \"string\")\n        return pubkey_1.decodeBech32Pubkey(input);\n    return input;\n}\nexports.normalizePubkey = normalizePubkey;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}