{"ast":null,"code":"var _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/wallet.tsx\";\nimport ky from \"ky\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { useError } from \"./error\";\nimport { createClient, loadOrCreateWallet } from \"./sdk\";\nconst defaultContext = {\n  loading: true,\n  address: \"\",\n  init: async () => {\n    return;\n  },\n  getClient: () => {\n    throw new Error(\"not yet initialized\");\n  }\n};\nexport const CosmWasmContext = React.createContext(defaultContext);\nexport const useSdk = () => React.useContext(CosmWasmContext);\nexport function BurnerWalletProvider(props) {\n  return /*#__PURE__*/React.createElement(SdkProvider, {\n    config: props.config,\n    loadWallet: loadOrCreateWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, props.children);\n}\nexport function SdkProvider(props) {\n  const defaultContext = {\n    loading: true,\n    address: \"\",\n    init: init,\n    getClient: () => {\n      throw new Error(\"not yet initialized\");\n    }\n  };\n  const [value, setValue] = useState(defaultContext);\n  const {\n    setError\n  } = useError();\n  const {\n    config,\n    loadWallet\n  } = props;\n\n  async function init() {\n    await loadWallet(config.addressPrefix).then(signer => createClient(config.httpUrl, signer)).then(async client => {\n      const address = client.senderAddress; // load from faucet if needed\n\n      if (config.faucetUrl) {\n        var _acct$balance;\n\n        const acct = await client.getAccount();\n\n        if (!(acct === null || acct === void 0 ? void 0 : (_acct$balance = acct.balance) === null || _acct$balance === void 0 ? void 0 : _acct$balance.length)) {\n          await ky.post(config.faucetUrl, {\n            json: {\n              ticker: \"COSM\",\n              address\n            }\n          });\n        }\n      }\n\n      setValue({\n        loading: false,\n        address: address,\n        init: async () => {\n          return;\n        },\n        getClient: () => client\n      });\n    }).catch(setError);\n  }\n\n  return /*#__PURE__*/React.createElement(CosmWasmContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 10\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/wallet.tsx"],"names":["ky","React","useState","useError","createClient","loadOrCreateWallet","defaultContext","loading","address","init","getClient","Error","CosmWasmContext","createContext","useSdk","useContext","BurnerWalletProvider","props","config","children","SdkProvider","value","setValue","setError","loadWallet","addressPrefix","then","signer","httpUrl","client","senderAddress","faucetUrl","acct","getAccount","balance","length","post","json","ticker","catch"],"mappings":"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","sourcesContent":["import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { OfflineSigner } from \"@cosmjs/launchpad\";\nimport ky from \"ky\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { useError } from \"./error\";\nimport { createClient, loadOrCreateWallet } from \"./sdk\";\n\nexport interface CosmWasmContextType {\n  readonly loading: boolean;\n  readonly address: string;\n  readonly init: () => Promise<void>;\n  readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  loading: true,\n  address: \"\",\n  init: async () => {\n    return;\n  },\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nexport const CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\nexport interface WalletProviderProps {\n  config: AppConfig;\n  children: any;\n}\n\nexport interface SdkProviderProps {\n  config: AppConfig;\n  loadWallet: (addressPrefix: string) => Promise<OfflineSigner>;\n  children: any;\n}\n\nexport function BurnerWalletProvider(props: WalletProviderProps): JSX.Element {\n  return (\n    <SdkProvider config={props.config} loadWallet={loadOrCreateWallet}>\n      {props.children}\n    </SdkProvider>\n  );\n}\n\nexport function SdkProvider(props: SdkProviderProps): JSX.Element {\n  const defaultContext: CosmWasmContextType = {\n    loading: true,\n    address: \"\",\n    init: init,\n    getClient: (): SigningCosmWasmClient => {\n      throw new Error(\"not yet initialized\");\n    },\n  };\n\n  const [value, setValue] = useState(defaultContext);\n  const { setError } = useError();\n\n  const { config, loadWallet } = props;\n\n  async function init() {\n    await loadWallet(config.addressPrefix)\n      .then((signer) => createClient(config.httpUrl, signer))\n      .then(async (client) => {\n        const address = client.senderAddress;\n        // load from faucet if needed\n        if (config.faucetUrl) {\n          const acct = await client.getAccount();\n          if (!acct?.balance?.length) {\n            await ky.post(config.faucetUrl, { json: { ticker: \"COSM\", address } });\n          }\n        }\n\n        setValue({\n          loading: false,\n          address: address,\n          init: async () => {\n            return;\n          },\n          getClient: () => client,\n        });\n      })\n      .catch(setError);\n  }\n\n  return <CosmWasmContext.Provider value={value}>{props.children}</CosmWasmContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}