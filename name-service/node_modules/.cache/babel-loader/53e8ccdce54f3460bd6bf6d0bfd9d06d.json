{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nvar _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/index.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../service\";\nimport { printableCoin } from \"../../../service/helpers\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport Loading from \"../../components/Loading\";\nimport OperationResult from \"../../components/OperationResult\";\nimport YourAccount from \"../../components/YourAccount\";\nimport \"./Transfer.less\";\nconst {\n  Title,\n  Text\n} = _Typography;\n\nfunction Transfer() {\n  const {\n    name,\n    contractAddress\n  } = useLocation().state;\n  const {\n    getClient\n  } = useSdk();\n  const accountProvider = useAccount();\n  const {\n    setError\n  } = useError();\n  const [loading, setLoading] = useState(false);\n  const [operationDone, setOperationDone] = useState(false);\n  const [operationResultProps, setOperationResultProps] = useState();\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [transferPrice, setTransferPrice] = useState();\n  useEffect(() => {\n    getClient().queryContractSmart(contractAddress, {\n      config: {}\n    }).then(response => {\n      setTransferPrice(response.transfer_price);\n    }).catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    setLoading(true);\n    const payment = transferPrice ? [transferPrice] : undefined;\n    getClient().execute(contractAddress, {\n      transfer: {\n        name: name,\n        to: newOwnerAddress\n      }\n    }, \"Transferring my name\", payment).then(() => {\n      accountProvider.refreshAccount();\n      setOperationResultProps({\n        success: true,\n        message: `Succesfully transferred ${name} to ${newOwnerAddress}`\n      });\n    }).catch(error => {\n      console.error(error);\n      setOperationResultProps({\n        success: false,\n        message: \"Name transfer failed\"\n      });\n    });\n    setOperationDone(true);\n    setLoading(false);\n  }\n\n  const showForm = !loading && !operationDone;\n  const showResult = !loading && operationDone;\n  return showForm && /*#__PURE__*/React.createElement(Center, {\n    tag: \"main\",\n    className: \"Transfer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Stack, {\n    className: \"TransferStack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"Transfer\"), /*#__PURE__*/React.createElement(_Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, \"Name: \"), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, name)), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"to\"), /*#__PURE__*/React.createElement(_Input, {\n    placeholder: \"Enter address\",\n    onChange: event => setNewOwnerAddress(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(_Button, {\n    type: \"primary\",\n    onClick: tryTransfer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"Transfer \", printableCoin(transferPrice))), /*#__PURE__*/React.createElement(YourAccount, {\n    tag: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }))) || loading && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }) || showResult && /*#__PURE__*/React.createElement(OperationResult, Object.assign({}, operationResultProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 20\n    }\n  }));\n}\n\nexport default Transfer;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/index.tsx"],"names":["React","useState","useEffect","useLocation","useAccount","useError","useSdk","printableCoin","Center","Stack","BackButton","Loading","OperationResult","YourAccount","Title","Text","Transfer","name","contractAddress","state","getClient","accountProvider","setError","loading","setLoading","operationDone","setOperationDone","operationResultProps","setOperationResultProps","newOwnerAddress","setNewOwnerAddress","transferPrice","setTransferPrice","queryContractSmart","config","then","response","transfer_price","catch","tryTransfer","payment","undefined","execute","transfer","to","refreshAccount","success","message","error","console","showForm","showResult","event","target","value"],"mappings":"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","sourcesContent":["import { Coin } from \"@cosmjs/launchpad\";\nimport { Button, Input, Typography } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../service\";\nimport { printableCoin } from \"../../../service/helpers\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport Loading from \"../../components/Loading\";\nimport OperationResult, { OperationResultProps } from \"../../components/OperationResult\";\nimport YourAccount from \"../../components/YourAccount\";\nimport \"./Transfer.less\";\n\nconst { Title, Text } = Typography;\n\ninterface TransferState {\n  readonly name: string;\n  readonly contractAddress: string;\n}\n\nfunction Transfer(): JSX.Element {\n  const { name, contractAddress } = useLocation().state as TransferState;\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n  const { setError } = useError();\n  const [loading, setLoading] = useState(false);\n  const [operationDone, setOperationDone] = useState(false);\n  const [operationResultProps, setOperationResultProps] = useState<OperationResultProps>();\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [transferPrice, setTransferPrice] = useState<Coin>();\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setTransferPrice(response.transfer_price);\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    setLoading(true);\n    const payment = transferPrice ? [transferPrice] : undefined;\n\n    getClient()\n      .execute(\n        contractAddress,\n        { transfer: { name: name, to: newOwnerAddress } },\n        \"Transferring my name\",\n        payment,\n      )\n      .then(() => {\n        accountProvider.refreshAccount();\n        setOperationResultProps({\n          success: true,\n          message: `Succesfully transferred ${name} to ${newOwnerAddress}`,\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        setOperationResultProps({ success: false, message: \"Name transfer failed\" });\n      });\n\n    setOperationDone(true);\n    setLoading(false);\n  }\n\n  const showForm = !loading && !operationDone;\n  const showResult = !loading && operationDone;\n\n  return (\n    (showForm && (\n      <Center tag=\"main\" className=\"Transfer\">\n        <Stack>\n          <BackButton />\n          <Stack className=\"TransferStack\">\n            <Title>Transfer</Title>\n            <Typography>\n              <Text>Name: </Text>\n              <Text>{name}</Text>\n            </Typography>\n            <Text>to</Text>\n            <Input placeholder=\"Enter address\" onChange={(event) => setNewOwnerAddress(event.target.value)} />\n            <Button type=\"primary\" onClick={tryTransfer}>\n              Transfer {printableCoin(transferPrice)}\n            </Button>\n          </Stack>\n          <YourAccount tag=\"footer\" />\n        </Stack>\n      </Center>\n    )) ||\n    (loading && <Loading />) ||\n    (showResult && <OperationResult {...operationResultProps} />)\n  );\n}\n\nexport default Transfer;\n"]},"metadata":{},"sourceType":"module"}