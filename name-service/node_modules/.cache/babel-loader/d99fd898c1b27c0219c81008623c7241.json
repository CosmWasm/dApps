{"ast":null,"code":"'use strict';\n\nvar zlib_inflate = require('./zlib/inflate');\n\nvar utils = require('./utils/common');\n\nvar strings = require('./utils/strings');\n\nvar c = require('./zlib/constants');\n\nvar msg = require('./zlib/messages');\n\nvar ZStream = require('./zlib/zstream');\n\nvar GZheader = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\n\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n  var opt = this.options; // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n\n  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {\n    opt.windowBits = -opt.windowBits;\n\n    if (opt.windowBits === 0) {\n      opt.windowBits = -15;\n    }\n  } // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n\n\n  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  } // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n\n\n  if (opt.windowBits > 15 && opt.windowBits < 48) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err = 0; // error code, if happens (0 = Z_OK)\n\n  this.msg = ''; // error message\n\n  this.ended = false; // used to avoid multiple onEnd() calls\n\n  this.chunks = []; // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n  var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n  zlib_inflate.inflateGetHeader(this.strm, this.header); // Setup dictionary\n\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n\n    if (opt.raw) {\n      //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\n\n\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n\n  var status, _mode;\n\n  var next_out_utf8, tail, utf8str; // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n\n  var allowBufError = false;\n\n  if (this.ended) {\n    return false;\n  }\n\n  _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH; // Convert data if needed\n\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);\n    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {\n        if (this.options.to === 'string') {\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8); // move tail\n\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n\n          if (tail) {\n            utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);\n          }\n\n          this.onData(utf8str);\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    } // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n\n\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  } // Finalize on the last chunk.\n\n\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  } // callback interim results if Z_SYNC_FLUSH.\n\n\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\n\n\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\n\n\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\n\n\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n  inflator.push(input, true); // That will never happens, if you don't cheat with options :)\n\n  if (inflator.err) {\n    throw inflator.msg || msg[inflator.err];\n  }\n\n  return inflator.result;\n}\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\n\n\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip = inflate;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/pako/lib/inflate.js"],"names":["zlib_inflate","require","utils","strings","c","msg","ZStream","GZheader","toString","Object","prototype","Inflate","options","assign","chunkSize","windowBits","to","opt","raw","err","ended","chunks","strm","avail_out","status","inflateInit2","Z_OK","Error","header","inflateGetHeader","dictionary","string2buf","call","Uint8Array","inflateSetDictionary","push","data","mode","_mode","next_out_utf8","tail","utf8str","allowBufError","Z_FINISH","Z_NO_FLUSH","input","binstring2buf","next_in","avail_in","length","output","Buf8","next_out","inflate","Z_NEED_DICT","Z_BUF_ERROR","Z_STREAM_END","onEnd","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","onData","shrinkBuf","inflateEnd","chunk","result","join","flattenChunks","inflator","inflateRaw","exports","ungzip"],"mappings":"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","sourcesContent":["'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n"]},"metadata":{},"sourceType":"script"}