{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToPath = exports.pathToString = exports.Slip10 = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\n\nconst hmac_1 = require(\"./hmac\");\n\nconst sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\n\n\nvar Slip10Curve;\n\n(function (Slip10Curve) {\n  Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n  Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\n\n\nfunction slip10CurveFromString(curveString) {\n  switch (curveString) {\n    case Slip10Curve.Ed25519:\n      return Slip10Curve.Ed25519;\n\n    case Slip10Curve.Secp256k1:\n      return Slip10Curve.Secp256k1;\n\n    default:\n      throw new Error(`Unknown curve string: '${curveString}'`);\n  }\n}\n\nexports.slip10CurveFromString = slip10CurveFromString;\n\nclass Slip10RawIndex extends math_1.Uint32 {\n  static hardened(hardenedIndex) {\n    return new Slip10RawIndex(hardenedIndex + 2 ** 31);\n  }\n\n  static normal(normalIndex) {\n    return new Slip10RawIndex(normalIndex);\n  }\n\n  isHardened() {\n    return this.data >= 2 ** 31;\n  }\n\n}\n\nexports.Slip10RawIndex = Slip10RawIndex;\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\"); // Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\n\nclass Slip10 {\n  static derivePath(curve, seed, path) {\n    let result = this.master(curve, seed);\n\n    for (const rawIndex of path) {\n      result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n    }\n\n    return result;\n  }\n\n  static master(curve, seed) {\n    const i = new hmac_1.Hmac(sha_1.Sha512, encoding_1.toAscii(curve)).update(seed).digest();\n    const il = i.slice(0, 32);\n    const ir = i.slice(32, 64);\n\n    if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n      return this.master(curve, i);\n    }\n\n    return {\n      chainCode: ir,\n      privkey: il\n    };\n  }\n\n  static child(curve, parentPrivkey, parentChainCode, rawIndex) {\n    let i;\n\n    if (rawIndex.isHardened()) {\n      const payload = new Uint8Array([0x00, ...parentPrivkey, ...rawIndex.toBytesBigEndian()]);\n      i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n    } else {\n      if (curve === Slip10Curve.Ed25519) {\n        throw new Error(\"Normal keys are not allowed with ed25519\");\n      } else {\n        // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n        // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n        // where the functions point() and ser_p() are defined in BIP-0032\n        const data = new Uint8Array([...Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey)), ...rawIndex.toBytesBigEndian()]);\n        i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n      }\n    }\n\n    return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n  }\n  /**\n   * Implementation of ser_P(point(k_par)) from BIP-0032\n   *\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n   */\n\n\n  static serializedPoint(curve, p) {\n    switch (curve) {\n      case Slip10Curve.Secp256k1:\n        return encoding_1.fromHex(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n\n      default:\n        throw new Error(\"curve not supported\");\n    }\n  }\n\n  static childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n    // step 2 (of the Private parent key â†’ private child key algorithm)\n    const il = i.slice(0, 32);\n    const ir = i.slice(32, 64); // step 3\n\n    const returnChainCode = ir; // step 4\n\n    if (curve === Slip10Curve.Ed25519) {\n      return {\n        chainCode: returnChainCode,\n        privkey: il\n      };\n    } // step 5\n\n\n    const n = this.n(curve);\n    const returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n    const returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32)); // step 6\n\n    if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n      const newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(new Uint8Array([0x01, ...ir, ...rawIndex.toBytesBigEndian()])).digest();\n      return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n    } // step 7\n\n\n    return {\n      chainCode: returnChainCode,\n      privkey: returnChildKey\n    };\n  }\n\n  static isZero(privkey) {\n    return privkey.every(byte => byte === 0);\n  }\n\n  static isGteN(curve, privkey) {\n    const keyAsNumber = new bn_js_1.default(privkey);\n    return keyAsNumber.gte(this.n(curve));\n  }\n\n  static n(curve) {\n    switch (curve) {\n      case Slip10Curve.Secp256k1:\n        return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n\n      default:\n        throw new Error(\"curve not supported\");\n    }\n  }\n\n}\n\nexports.Slip10 = Slip10;\n\nfunction pathToString(path) {\n  return path.reduce((current, component) => {\n    const componentString = component.isHardened() ? `${component.toNumber() - 2 ** 31}'` : component.toString();\n    return current + \"/\" + componentString;\n  }, \"m\");\n}\n\nexports.pathToString = pathToString;\n\nfunction stringToPath(input) {\n  if (!input.startsWith(\"m\")) throw new Error(\"Path string must start with 'm'\");\n  let rest = input.slice(1);\n  const out = new Array();\n\n  while (rest) {\n    const match = rest.match(/^\\/([0-9]+)('?)/);\n    if (!match) throw new Error(\"Syntax error while reading path component\");\n    const [fullMatch, numberString, apostrophe] = match;\n    const value = math_1.Uint53.fromString(numberString).toNumber();\n    if (value >= 2 ** 31) throw new Error(\"Component value too high. Must not exceed 2**31-1.\");\n    if (apostrophe) out.push(Slip10RawIndex.hardened(value));else out.push(Slip10RawIndex.normal(value));\n    rest = rest.slice(fullMatch.length);\n  }\n\n  return out;\n}\n\nexports.stringToPath = stringToPath;","map":{"version":3,"sources":["../src/slip10.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringToPath = exports.pathToString = exports.Slip10 = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst hmac_1 = require(\"./hmac\");\nconst sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\nvar Slip10Curve;\n(function (Slip10Curve) {\n    Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n    Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\nfunction slip10CurveFromString(curveString) {\n    switch (curveString) {\n        case Slip10Curve.Ed25519:\n            return Slip10Curve.Ed25519;\n        case Slip10Curve.Secp256k1:\n            return Slip10Curve.Secp256k1;\n        default:\n            throw new Error(`Unknown curve string: '${curveString}'`);\n    }\n}\nexports.slip10CurveFromString = slip10CurveFromString;\nclass Slip10RawIndex extends math_1.Uint32 {\n    static hardened(hardenedIndex) {\n        return new Slip10RawIndex(hardenedIndex + 2 ** 31);\n    }\n    static normal(normalIndex) {\n        return new Slip10RawIndex(normalIndex);\n    }\n    isHardened() {\n        return this.data >= 2 ** 31;\n    }\n}\nexports.Slip10RawIndex = Slip10RawIndex;\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\n// Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\nclass Slip10 {\n    static derivePath(curve, seed, path) {\n        let result = this.master(curve, seed);\n        for (const rawIndex of path) {\n            result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n        }\n        return result;\n    }\n    static master(curve, seed) {\n        const i = new hmac_1.Hmac(sha_1.Sha512, encoding_1.toAscii(curve)).update(seed).digest();\n        const il = i.slice(0, 32);\n        const ir = i.slice(32, 64);\n        if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n            return this.master(curve, i);\n        }\n        return {\n            chainCode: ir,\n            privkey: il,\n        };\n    }\n    static child(curve, parentPrivkey, parentChainCode, rawIndex) {\n        let i;\n        if (rawIndex.isHardened()) {\n            const payload = new Uint8Array([0x00, ...parentPrivkey, ...rawIndex.toBytesBigEndian()]);\n            i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n        }\n        else {\n            if (curve === Slip10Curve.Ed25519) {\n                throw new Error(\"Normal keys are not allowed with ed25519\");\n            }\n            else {\n                // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n                // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n                // where the functions point() and ser_p() are defined in BIP-0032\n                const data = new Uint8Array([\n                    ...Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey)),\n                    ...rawIndex.toBytesBigEndian(),\n                ]);\n                i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n            }\n        }\n        return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n    }\n    /**\n     * Implementation of ser_P(point(k_par)) from BIP-0032\n     *\n     * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n     */\n    static serializedPoint(curve, p) {\n        switch (curve) {\n            case Slip10Curve.Secp256k1:\n                return encoding_1.fromHex(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n            default:\n                throw new Error(\"curve not supported\");\n        }\n    }\n    static childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n        // step 2 (of the Private parent key â†’ private child key algorithm)\n        const il = i.slice(0, 32);\n        const ir = i.slice(32, 64);\n        // step 3\n        const returnChainCode = ir;\n        // step 4\n        if (curve === Slip10Curve.Ed25519) {\n            return {\n                chainCode: returnChainCode,\n                privkey: il,\n            };\n        }\n        // step 5\n        const n = this.n(curve);\n        const returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n        const returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32));\n        // step 6\n        if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n            const newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode)\n                .update(new Uint8Array([0x01, ...ir, ...rawIndex.toBytesBigEndian()]))\n                .digest();\n            return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n        }\n        // step 7\n        return {\n            chainCode: returnChainCode,\n            privkey: returnChildKey,\n        };\n    }\n    static isZero(privkey) {\n        return privkey.every((byte) => byte === 0);\n    }\n    static isGteN(curve, privkey) {\n        const keyAsNumber = new bn_js_1.default(privkey);\n        return keyAsNumber.gte(this.n(curve));\n    }\n    static n(curve) {\n        switch (curve) {\n            case Slip10Curve.Secp256k1:\n                return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n            default:\n                throw new Error(\"curve not supported\");\n        }\n    }\n}\nexports.Slip10 = Slip10;\nfunction pathToString(path) {\n    return path.reduce((current, component) => {\n        const componentString = component.isHardened()\n            ? `${component.toNumber() - 2 ** 31}'`\n            : component.toString();\n        return current + \"/\" + componentString;\n    }, \"m\");\n}\nexports.pathToString = pathToString;\nfunction stringToPath(input) {\n    if (!input.startsWith(\"m\"))\n        throw new Error(\"Path string must start with 'm'\");\n    let rest = input.slice(1);\n    const out = new Array();\n    while (rest) {\n        const match = rest.match(/^\\/([0-9]+)('?)/);\n        if (!match)\n            throw new Error(\"Syntax error while reading path component\");\n        const [fullMatch, numberString, apostrophe] = match;\n        const value = math_1.Uint53.fromString(numberString).toNumber();\n        if (value >= 2 ** 31)\n            throw new Error(\"Component value too high. Must not exceed 2**31-1.\");\n        if (apostrophe)\n            out.push(Slip10RawIndex.hardened(value));\n        else\n            out.push(Slip10RawIndex.normal(value));\n        rest = rest.slice(fullMatch.length);\n    }\n    return out;\n}\nexports.stringToPath = stringToPath;\n//# sourceMappingURL=slip10.js.map"]},"metadata":{},"sourceType":"script"}