{"ast":null,"code":"import*as React from\"react\";import{useError}from\"./error\";import{useSdk}from\"./wallet\";const defaultContext={refreshAccount:()=>{return;}};const AccountContext=React.createContext(defaultContext);export const useAccount=()=>React.useContext(AccountContext);export function AccountProvider({children}){const{setError}=useError();const sdk=useSdk();const[value,setValue]=React.useState({});function refreshAccount(){if(sdk.initialized){sdk.getClient().getAccount().then(account=>setValue({account})).catch(setError);}}// this should just be called once on startup\nReact.useEffect(refreshAccount,[sdk,setError]);const context={refreshAccount,account:value.account};return/*#__PURE__*/React.createElement(AccountContext.Provider,{value:context},children);}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/account.tsx"],"names":["React","useError","useSdk","defaultContext","refreshAccount","AccountContext","createContext","useAccount","useContext","AccountProvider","children","setError","sdk","value","setValue","useState","initialized","getClient","getAccount","then","account","catch","useEffect","context"],"mappings":"AACA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,KAAyB,SAAzB,CACA,OAASC,MAAT,KAAuB,UAAvB,CAUA,KAAMC,CAAAA,cAAkC,CAAG,CACzCC,cAAc,CAAE,IAAM,CACpB,OACD,CAHwC,CAA3C,CAMA,KAAMC,CAAAA,cAAc,CAAGL,KAAK,CAACM,aAAN,CAAwCH,cAAxC,CAAvB,CAEA,MAAO,MAAMI,CAAAA,UAAU,CAAG,IAA0BP,KAAK,CAACQ,UAAN,CAAiBH,cAAjB,CAA7C,CAEP,MAAO,SAASI,CAAAA,eAAT,CAAyB,CAAEC,QAAF,CAAzB,CAA4F,CACjG,KAAM,CAAEC,QAAF,EAAeV,QAAQ,EAA7B,CACA,KAAMW,CAAAA,GAAG,CAAGV,MAAM,EAAlB,CAEA,KAAM,CAACW,KAAD,CAAQC,QAAR,EAAoBd,KAAK,CAACe,QAAN,CAAsB,EAAtB,CAA1B,CAEA,QAASX,CAAAA,cAAT,EAA0B,CACxB,GAAIQ,GAAG,CAACI,WAAR,CAAqB,CACnBJ,GAAG,CACAK,SADH,GAEGC,UAFH,GAGGC,IAHH,CAGSC,OAAD,EAAaN,QAAQ,CAAC,CAAEM,OAAF,CAAD,CAH7B,EAIGC,KAJH,CAISV,QAJT,EAKD,CACF,CAED;AACAX,KAAK,CAACsB,SAAN,CAAgBlB,cAAhB,CAAgC,CAACQ,GAAD,CAAMD,QAAN,CAAhC,EAEA,KAAMY,CAAAA,OAA2B,CAAG,CAClCnB,cADkC,CAElCgB,OAAO,CAAEP,KAAK,CAACO,OAFmB,CAApC,CAKA,mBAAO,oBAAC,cAAD,CAAgB,QAAhB,EAAyB,KAAK,CAAEG,OAAhC,EAA0Cb,QAA1C,CAAP,CACD","sourcesContent":["import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}