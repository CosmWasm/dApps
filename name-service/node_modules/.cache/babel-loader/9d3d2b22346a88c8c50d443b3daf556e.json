{"ast":null,"code":"import*as React from\"react\";import{useState}from\"react\";import{createClient,loadOrCreateWallet}from\"./sdk\";const defaultContext={initialized:false,address:\"\",init:()=>{return;},getClient:()=>{throw new Error(\"not yet initialized\");}};const CosmWasmContext=React.createContext(defaultContext);export const useSdk=()=>React.useContext(CosmWasmContext);export function BurnerWalletProvider({config,children}){return/*#__PURE__*/React.createElement(SdkProvider,{config:config,loadWallet:loadOrCreateWallet},children);}export function SdkProvider({config,loadWallet,children}){const contextWithInit={...defaultContext,init:init};const[value,setValue]=useState(contextWithInit);function init(){loadWallet(config.addressPrefix).then(signer=>createClient(config.httpUrl,signer)).then(async client=>{const address=client.senderAddress;// load from faucet if needed\nif(config.faucetUrl){var _acct$balance;const acct=await client.getAccount();if(!(acct===null||acct===void 0?void 0:(_acct$balance=acct.balance)===null||_acct$balance===void 0?void 0:_acct$balance.length)){await fetch(config.faucetUrl,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({ticker:config.faucetToken,address})});}}setValue({initialized:true,address:address,init:()=>{return;},getClient:()=>client});});}return/*#__PURE__*/React.createElement(CosmWasmContext.Provider,{value:value},children);}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/wallet.tsx"],"names":["React","useState","createClient","loadOrCreateWallet","defaultContext","initialized","address","init","getClient","Error","CosmWasmContext","createContext","useSdk","useContext","BurnerWalletProvider","config","children","SdkProvider","loadWallet","contextWithInit","value","setValue","addressPrefix","then","signer","httpUrl","client","senderAddress","faucetUrl","acct","getAccount","balance","length","fetch","method","headers","body","JSON","stringify","ticker","faucetToken"],"mappings":"AAEA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,QAAT,KAAyB,OAAzB,CAEA,OAASC,YAAT,CAAuBC,kBAAvB,KAAiD,OAAjD,CASA,KAAMC,CAAAA,cAAmC,CAAG,CAC1CC,WAAW,CAAE,KAD6B,CAE1CC,OAAO,CAAE,EAFiC,CAG1CC,IAAI,CAAE,IAAM,CACV,OACD,CALyC,CAM1CC,SAAS,CAAE,IAA6B,CACtC,KAAM,IAAIC,CAAAA,KAAJ,CAAU,qBAAV,CAAN,CACD,CARyC,CAA5C,CAWA,KAAMC,CAAAA,eAAe,CAAGV,KAAK,CAACW,aAAN,CAAyCP,cAAzC,CAAxB,CAEA,MAAO,MAAMQ,CAAAA,MAAM,CAAG,IAA2BZ,KAAK,CAACa,UAAN,CAAiBH,eAAjB,CAA1C,CAQP,MAAO,SAASI,CAAAA,oBAAT,CAA8B,CAAEC,MAAF,CAAUC,QAAV,CAA9B,CAA4F,CACjG,mBACE,oBAAC,WAAD,EAAa,MAAM,CAAED,MAArB,CAA6B,UAAU,CAAEZ,kBAAzC,EACGa,QADH,CADF,CAKD,CAQD,MAAO,SAASC,CAAAA,WAAT,CAAqB,CAAEF,MAAF,CAAUG,UAAV,CAAsBF,QAAtB,CAArB,CAAsF,CAC3F,KAAMG,CAAAA,eAAe,CAAG,CAAE,GAAGf,cAAL,CAAqBG,IAAI,CAAEA,IAA3B,CAAxB,CACA,KAAM,CAACa,KAAD,CAAQC,QAAR,EAAoBpB,QAAQ,CAACkB,eAAD,CAAlC,CAEA,QAASZ,CAAAA,IAAT,EAAgB,CACdW,UAAU,CAACH,MAAM,CAACO,aAAR,CAAV,CACGC,IADH,CACSC,MAAD,EAAYtB,YAAY,CAACa,MAAM,CAACU,OAAR,CAAiBD,MAAjB,CADhC,EAEGD,IAFH,CAEQ,KAAOG,CAAAA,MAAP,EAAkB,CACtB,KAAMpB,CAAAA,OAAO,CAAGoB,MAAM,CAACC,aAAvB,CACA;AACA,GAAIZ,MAAM,CAACa,SAAX,CAAsB,mBACpB,KAAMC,CAAAA,IAAI,CAAG,KAAMH,CAAAA,MAAM,CAACI,UAAP,EAAnB,CACA,GAAI,EAACD,IAAD,SAACA,IAAD,gCAACA,IAAI,CAAEE,OAAP,wCAAC,cAAeC,MAAhB,CAAJ,CAA4B,CAC1B,KAAMC,CAAAA,KAAK,CAAClB,MAAM,CAACa,SAAR,CAAmB,CAC5BM,MAAM,CAAE,MADoB,CAE5BC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFmB,CAG5BC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEC,MAAM,CAAExB,MAAM,CAACyB,WAAjB,CAA8BlC,OAA9B,CAAf,CAHsB,CAAnB,CAAX,CAKD,CACF,CAEDe,QAAQ,CAAC,CACPhB,WAAW,CAAE,IADN,CAEPC,OAAO,CAAEA,OAFF,CAGPC,IAAI,CAAE,IAAM,CACV,OACD,CALM,CAMPC,SAAS,CAAE,IAAMkB,MANV,CAAD,CAAR,CAQD,CAxBH,EAyBD,CAED,mBAAO,oBAAC,eAAD,CAAiB,QAAjB,EAA0B,KAAK,CAAEN,KAAjC,EAAyCJ,QAAzC,CAAP,CACD","sourcesContent":["import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { OfflineSigner } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { createClient, loadOrCreateWallet } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly address: string;\n  readonly init: () => void;\n  readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  address: \"\",\n  init: () => {\n    return;\n  },\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface ConfigProp {\n  readonly config: AppConfig;\n}\n\ntype BurnerWalletProviderProps = ConfigProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function BurnerWalletProvider({ config, children }: BurnerWalletProviderProps): JSX.Element {\n  return (\n    <SdkProvider config={config} loadWallet={loadOrCreateWallet}>\n      {children}\n    </SdkProvider>\n  );\n}\n\ninterface ConfigWalletProps extends ConfigProp {\n  readonly loadWallet: (addressPrefix: string) => Promise<OfflineSigner>;\n}\n\ntype SdkProviderProps = ConfigWalletProps & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function SdkProvider({ config, loadWallet, children }: SdkProviderProps): JSX.Element {\n  const contextWithInit = { ...defaultContext, init: init };\n  const [value, setValue] = useState(contextWithInit);\n\n  function init() {\n    loadWallet(config.addressPrefix)\n      .then((signer) => createClient(config.httpUrl, signer))\n      .then(async (client) => {\n        const address = client.senderAddress;\n        // load from faucet if needed\n        if (config.faucetUrl) {\n          const acct = await client.getAccount();\n          if (!acct?.balance?.length) {\n            await fetch(config.faucetUrl, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ ticker: config.faucetToken, address }),\n            });\n          }\n        }\n\n        setValue({\n          initialized: true,\n          address: address,\n          init: () => {\n            return;\n          },\n          getClient: () => client,\n        });\n      });\n  }\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}