{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { flattenTreeData } from \"rc-tree/es/utils/treeUtil\";\nimport { fillLegacyProps } from './legacyUtil';\nexport function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\nexport function findValueOption(values, options) {\n  var optionMap = new Map();\n  options.forEach(function (flattenItem) {\n    var data = flattenItem.data;\n    optionMap.set(data.value, data);\n  });\n  return values.map(function (val) {\n    return fillLegacyProps(optionMap.get(val));\n  });\n}\nexport function isValueDisabled(value, options) {\n  var option = findValueOption([value], options)[0];\n\n  if (option) {\n    return option.disabled;\n  }\n\n  return false;\n}\nexport function isCheckDisabled(node) {\n  return node.disabled || node.disableCheckbox || node.checkable === false;\n}\n\nfunction getLevel(_ref) {\n  var parent = _ref.parent;\n  var level = 0;\n  var current = parent;\n\n  while (current) {\n    current = current.parent;\n    level += 1;\n  }\n\n  return level;\n}\n/**\n * Before reuse `rc-tree` logic, we need to add key since TreeSelect use `value` instead of `key`.\n */\n\n\nexport function flattenOptions(options) {\n  // Add missing key\n  function fillKey(list) {\n    return (list || []).map(function (node) {\n      var value = node.value,\n          key = node.key,\n          children = node.children;\n\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        key: 'key' in node ? key : value\n      });\n\n      if (children) {\n        clone.children = fillKey(children);\n      }\n\n      return clone;\n    });\n  }\n\n  var flattenList = flattenTreeData(fillKey(options), true);\n  return flattenList.map(function (node) {\n    return {\n      key: node.data.key,\n      data: node.data,\n      level: getLevel(node)\n    };\n  });\n}\n\nfunction getDefaultFilterOption(optionFilterProp) {\n  return function (searchValue, dataNode) {\n    var value = dataNode[optionFilterProp];\n    return String(value).toLowerCase().includes(String(searchValue).toLowerCase());\n  };\n}\n/** Filter options and return a new options by the search text */\n\n\nexport function filterOptions(searchValue, options, _ref2) {\n  var optionFilterProp = _ref2.optionFilterProp,\n      filterOption = _ref2.filterOption;\n\n  if (filterOption === false) {\n    return options;\n  }\n\n  var filterOptionFunc;\n\n  if (typeof filterOption === 'function') {\n    filterOptionFunc = filterOption;\n  } else {\n    filterOptionFunc = getDefaultFilterOption(optionFilterProp);\n  }\n\n  function dig(list) {\n    var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return list.map(function (dataNode) {\n      var children = dataNode.children;\n      var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n      var childList = dig(children || [], match);\n\n      if (match || childList.length) {\n        return _objectSpread(_objectSpread({}, dataNode), {}, {\n          children: childList\n        });\n      }\n\n      return null;\n    }).filter(function (node) {\n      return node;\n    });\n  }\n\n  return dig(options);\n}\nexport function getRawValueLabeled(values, prevValue, getEntityByValue, getLabelProp) {\n  var valueMap = new Map();\n  toArray(prevValue).forEach(function (item) {\n    if (item && _typeof(item) === 'object' && 'value' in item) {\n      valueMap.set(item.value, item);\n    }\n  });\n  return values.map(function (val) {\n    var item = {\n      value: val\n    };\n    var entity = getEntityByValue(val, 'select', true);\n    var label = entity ? getLabelProp(entity.data) : val;\n\n    if (valueMap.has(val)) {\n      var labeledValue = valueMap.get(val);\n      item.label = 'label' in labeledValue ? labeledValue.label : label;\n\n      if ('halfChecked' in labeledValue) {\n        item.halfChecked = labeledValue.halfChecked;\n      }\n    } else {\n      item.label = label;\n    }\n\n    return item;\n  });\n}\nexport function addValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.add(value);\n  return Array.from(values);\n}\nexport function removeValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.delete(value);\n  return Array.from(values);\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-tree-select/es/utils/valueUtil.js"],"names":["_typeof","_objectSpread","flattenTreeData","fillLegacyProps","toArray","value","Array","isArray","undefined","findValueOption","values","options","optionMap","Map","forEach","flattenItem","data","set","map","val","get","isValueDisabled","option","disabled","isCheckDisabled","node","disableCheckbox","checkable","getLevel","_ref","parent","level","current","flattenOptions","fillKey","list","key","children","clone","flattenList","getDefaultFilterOption","optionFilterProp","searchValue","dataNode","String","toLowerCase","includes","filterOptions","_ref2","filterOption","filterOptionFunc","dig","keepAll","arguments","length","match","childList","filter","getRawValueLabeled","prevValue","getEntityByValue","getLabelProp","valueMap","item","entity","label","has","labeledValue","halfChecked","addValue","rawValues","Set","add","from","removeValue","delete"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { flattenTreeData } from \"rc-tree/es/utils/treeUtil\";\nimport { fillLegacyProps } from './legacyUtil';\nexport function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\nexport function findValueOption(values, options) {\n  var optionMap = new Map();\n  options.forEach(function (flattenItem) {\n    var data = flattenItem.data;\n    optionMap.set(data.value, data);\n  });\n  return values.map(function (val) {\n    return fillLegacyProps(optionMap.get(val));\n  });\n}\nexport function isValueDisabled(value, options) {\n  var option = findValueOption([value], options)[0];\n\n  if (option) {\n    return option.disabled;\n  }\n\n  return false;\n}\nexport function isCheckDisabled(node) {\n  return node.disabled || node.disableCheckbox || node.checkable === false;\n}\n\nfunction getLevel(_ref) {\n  var parent = _ref.parent;\n  var level = 0;\n  var current = parent;\n\n  while (current) {\n    current = current.parent;\n    level += 1;\n  }\n\n  return level;\n}\n/**\n * Before reuse `rc-tree` logic, we need to add key since TreeSelect use `value` instead of `key`.\n */\n\n\nexport function flattenOptions(options) {\n  // Add missing key\n  function fillKey(list) {\n    return (list || []).map(function (node) {\n      var value = node.value,\n          key = node.key,\n          children = node.children;\n\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        key: 'key' in node ? key : value\n      });\n\n      if (children) {\n        clone.children = fillKey(children);\n      }\n\n      return clone;\n    });\n  }\n\n  var flattenList = flattenTreeData(fillKey(options), true);\n  return flattenList.map(function (node) {\n    return {\n      key: node.data.key,\n      data: node.data,\n      level: getLevel(node)\n    };\n  });\n}\n\nfunction getDefaultFilterOption(optionFilterProp) {\n  return function (searchValue, dataNode) {\n    var value = dataNode[optionFilterProp];\n    return String(value).toLowerCase().includes(String(searchValue).toLowerCase());\n  };\n}\n/** Filter options and return a new options by the search text */\n\n\nexport function filterOptions(searchValue, options, _ref2) {\n  var optionFilterProp = _ref2.optionFilterProp,\n      filterOption = _ref2.filterOption;\n\n  if (filterOption === false) {\n    return options;\n  }\n\n  var filterOptionFunc;\n\n  if (typeof filterOption === 'function') {\n    filterOptionFunc = filterOption;\n  } else {\n    filterOptionFunc = getDefaultFilterOption(optionFilterProp);\n  }\n\n  function dig(list) {\n    var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return list.map(function (dataNode) {\n      var children = dataNode.children;\n      var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n      var childList = dig(children || [], match);\n\n      if (match || childList.length) {\n        return _objectSpread(_objectSpread({}, dataNode), {}, {\n          children: childList\n        });\n      }\n\n      return null;\n    }).filter(function (node) {\n      return node;\n    });\n  }\n\n  return dig(options);\n}\nexport function getRawValueLabeled(values, prevValue, getEntityByValue, getLabelProp) {\n  var valueMap = new Map();\n  toArray(prevValue).forEach(function (item) {\n    if (item && _typeof(item) === 'object' && 'value' in item) {\n      valueMap.set(item.value, item);\n    }\n  });\n  return values.map(function (val) {\n    var item = {\n      value: val\n    };\n    var entity = getEntityByValue(val, 'select', true);\n    var label = entity ? getLabelProp(entity.data) : val;\n\n    if (valueMap.has(val)) {\n      var labeledValue = valueMap.get(val);\n      item.label = 'label' in labeledValue ? labeledValue.label : label;\n\n      if ('halfChecked' in labeledValue) {\n        item.halfChecked = labeledValue.halfChecked;\n      }\n    } else {\n      item.label = label;\n    }\n\n    return item;\n  });\n}\nexport function addValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.add(value);\n  return Array.from(values);\n}\nexport function removeValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.delete(value);\n  return Array.from(values);\n}"]},"metadata":{},"sourceType":"module"}