{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseCoins = exports.coins = exports.coin = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n/** Creates a coin */\n\n\nfunction coin(amount, denom) {\n  return {\n    amount: new math_1.Uint53(amount).toString(),\n    denom: denom\n  };\n}\n\nexports.coin = coin;\n/** Creates a list of coins with one element */\n\nfunction coins(amount, denom) {\n  return [coin(amount, denom)];\n}\n\nexports.coins = coins;\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it\n */\n\nfunction parseCoins(input) {\n  return input.replace(/\\s/g, \"\").split(\",\").filter(Boolean).map(part => {\n    const match = part.match(/^([0-9]+)([a-zA-Z]+)/);\n    if (!match) throw new Error(\"Got an invalid coin string\");\n    return {\n      amount: math_1.Uint64.fromString(match[1]).toString(),\n      denom: match[2]\n    };\n  });\n}\n\nexports.parseCoins = parseCoins;","map":{"version":3,"sources":["../src/coins.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAOA;;;AACA,SAAgB,IAAhB,CAAqB,MAArB,EAAqC,KAArC,EAAkD;AAChD,SAAO;AAAE,IAAA,MAAM,EAAE,IAAI,MAAA,CAAA,MAAJ,CAAW,MAAX,EAAmB,QAAnB,EAAV;AAAyC,IAAA,KAAK,EAAE;AAAhD,GAAP;AACD;;AAFD,OAAA,CAAA,IAAA,GAAA,IAAA;AAIA;;AACA,SAAgB,KAAhB,CAAsB,MAAtB,EAAsC,KAAtC,EAAmD;AACjD,SAAO,CAAC,IAAI,CAAC,MAAD,EAAS,KAAT,CAAL,CAAP;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA;AAIA;;;;AAGA,SAAgB,UAAhB,CAA2B,KAA3B,EAAwC;AACtC,SAAO,KAAK,CACT,OADI,CACI,KADJ,EACW,EADX,EAEJ,KAFI,CAEE,GAFF,EAGJ,MAHI,CAGG,OAHH,EAIJ,GAJI,CAIC,IAAD,IAAS;AACZ,UAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,sBAAX,CAAd;AACA,QAAI,CAAC,KAAL,EAAY,MAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACZ,WAAO;AACL,MAAA,MAAM,EAAE,MAAA,CAAA,MAAA,CAAO,UAAP,CAAkB,KAAK,CAAC,CAAD,CAAvB,EAA4B,QAA5B,EADH;AAEL,MAAA,KAAK,EAAE,KAAK,CAAC,CAAD;AAFP,KAAP;AAID,GAXI,CAAP;AAYD;;AAbD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseCoins = exports.coins = exports.coin = void 0;\nconst math_1 = require(\"@cosmjs/math\");\n/** Creates a coin */\nfunction coin(amount, denom) {\n    return { amount: new math_1.Uint53(amount).toString(), denom: denom };\n}\nexports.coin = coin;\n/** Creates a list of coins with one element */\nfunction coins(amount, denom) {\n    return [coin(amount, denom)];\n}\nexports.coins = coins;\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it\n */\nfunction parseCoins(input) {\n    return input\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .filter(Boolean)\n        .map((part) => {\n        const match = part.match(/^([0-9]+)([a-zA-Z]+)/);\n        if (!match)\n            throw new Error(\"Got an invalid coin string\");\n        return {\n            amount: math_1.Uint64.fromString(match[1]).toString(),\n            denom: match[2],\n        };\n    });\n}\nexports.parseCoins = parseCoins;\n//# sourceMappingURL=coins.js.map"]},"metadata":{},"sourceType":"script"}