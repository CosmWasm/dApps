{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect } from 'react';\nimport raf from 'raf';\nexport function useFrameState(defaultState) {\n  var stateRef = useRef(defaultState);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      forceUpdate = _useState2[1];\n\n  var timeoutRef = useRef(null);\n  var updateBatchRef = useRef([]);\n\n  function setFrameState(updater) {\n    if (timeoutRef.current === null) {\n      updateBatchRef.current = [];\n      timeoutRef.current = raf(function () {\n        updateBatchRef.current.forEach(function (batchUpdater) {\n          stateRef.current = batchUpdater(stateRef.current);\n        });\n        timeoutRef.current = null;\n        forceUpdate({});\n      });\n    }\n\n    updateBatchRef.current.push(updater);\n  }\n\n  useEffect(function () {\n    return function () {\n      raf.cancel(timeoutRef.current);\n    };\n  }, []);\n  return [stateRef.current, setFrameState];\n}\n/** Lock frame, when frame pass reset the lock. */\n\nexport function useTimeoutLock(defaultState) {\n  var frameRef = useRef(defaultState);\n  var timeoutRef = useRef(null);\n\n  function cleanUp() {\n    window.clearTimeout(timeoutRef.current);\n  }\n\n  function setState(newState) {\n    frameRef.current = newState;\n    cleanUp();\n    timeoutRef.current = window.setTimeout(function () {\n      frameRef.current = null;\n      timeoutRef.current = null;\n    }, 100);\n  }\n\n  function getState() {\n    return frameRef.current;\n  }\n\n  useEffect(function () {\n    return cleanUp;\n  }, []);\n  return [setState, getState];\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-table/es/hooks/useFrame.js"],"names":["_slicedToArray","useRef","useState","useEffect","raf","useFrameState","defaultState","stateRef","_useState","_useState2","forceUpdate","timeoutRef","updateBatchRef","setFrameState","updater","current","forEach","batchUpdater","push","cancel","useTimeoutLock","frameRef","cleanUp","window","clearTimeout","setState","newState","setTimeout","getState"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,OAAO,SAASC,aAAT,CAAuBC,YAAvB,EAAqC;AAC1C,MAAIC,QAAQ,GAAGN,MAAM,CAACK,YAAD,CAArB;;AAEA,MAAIE,SAAS,GAAGN,QAAQ,CAAC,EAAD,CAAxB;AAAA,MACIO,UAAU,GAAGT,cAAc,CAACQ,SAAD,EAAY,CAAZ,CAD/B;AAAA,MAEIE,WAAW,GAAGD,UAAU,CAAC,CAAD,CAF5B;;AAIA,MAAIE,UAAU,GAAGV,MAAM,CAAC,IAAD,CAAvB;AACA,MAAIW,cAAc,GAAGX,MAAM,CAAC,EAAD,CAA3B;;AAEA,WAASY,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,QAAIH,UAAU,CAACI,OAAX,KAAuB,IAA3B,EAAiC;AAC/BH,MAAAA,cAAc,CAACG,OAAf,GAAyB,EAAzB;AACAJ,MAAAA,UAAU,CAACI,OAAX,GAAqBX,GAAG,CAAC,YAAY;AACnCQ,QAAAA,cAAc,CAACG,OAAf,CAAuBC,OAAvB,CAA+B,UAAUC,YAAV,EAAwB;AACrDV,UAAAA,QAAQ,CAACQ,OAAT,GAAmBE,YAAY,CAACV,QAAQ,CAACQ,OAAV,CAA/B;AACD,SAFD;AAGAJ,QAAAA,UAAU,CAACI,OAAX,GAAqB,IAArB;AACAL,QAAAA,WAAW,CAAC,EAAD,CAAX;AACD,OANuB,CAAxB;AAOD;;AAEDE,IAAAA,cAAc,CAACG,OAAf,CAAuBG,IAAvB,CAA4BJ,OAA5B;AACD;;AAEDX,EAAAA,SAAS,CAAC,YAAY;AACpB,WAAO,YAAY;AACjBC,MAAAA,GAAG,CAACe,MAAJ,CAAWR,UAAU,CAACI,OAAtB;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAKA,SAAO,CAACR,QAAQ,CAACQ,OAAV,EAAmBF,aAAnB,CAAP;AACD;AACD;;AAEA,OAAO,SAASO,cAAT,CAAwBd,YAAxB,EAAsC;AAC3C,MAAIe,QAAQ,GAAGpB,MAAM,CAACK,YAAD,CAArB;AACA,MAAIK,UAAU,GAAGV,MAAM,CAAC,IAAD,CAAvB;;AAEA,WAASqB,OAAT,GAAmB;AACjBC,IAAAA,MAAM,CAACC,YAAP,CAAoBb,UAAU,CAACI,OAA/B;AACD;;AAED,WAASU,QAAT,CAAkBC,QAAlB,EAA4B;AAC1BL,IAAAA,QAAQ,CAACN,OAAT,GAAmBW,QAAnB;AACAJ,IAAAA,OAAO;AACPX,IAAAA,UAAU,CAACI,OAAX,GAAqBQ,MAAM,CAACI,UAAP,CAAkB,YAAY;AACjDN,MAAAA,QAAQ,CAACN,OAAT,GAAmB,IAAnB;AACAJ,MAAAA,UAAU,CAACI,OAAX,GAAqB,IAArB;AACD,KAHoB,EAGlB,GAHkB,CAArB;AAID;;AAED,WAASa,QAAT,GAAoB;AAClB,WAAOP,QAAQ,CAACN,OAAhB;AACD;;AAEDZ,EAAAA,SAAS,CAAC,YAAY;AACpB,WAAOmB,OAAP;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO,CAACG,QAAD,EAAWG,QAAX,CAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect } from 'react';\nimport raf from 'raf';\nexport function useFrameState(defaultState) {\n  var stateRef = useRef(defaultState);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      forceUpdate = _useState2[1];\n\n  var timeoutRef = useRef(null);\n  var updateBatchRef = useRef([]);\n\n  function setFrameState(updater) {\n    if (timeoutRef.current === null) {\n      updateBatchRef.current = [];\n      timeoutRef.current = raf(function () {\n        updateBatchRef.current.forEach(function (batchUpdater) {\n          stateRef.current = batchUpdater(stateRef.current);\n        });\n        timeoutRef.current = null;\n        forceUpdate({});\n      });\n    }\n\n    updateBatchRef.current.push(updater);\n  }\n\n  useEffect(function () {\n    return function () {\n      raf.cancel(timeoutRef.current);\n    };\n  }, []);\n  return [stateRef.current, setFrameState];\n}\n/** Lock frame, when frame pass reset the lock. */\n\nexport function useTimeoutLock(defaultState) {\n  var frameRef = useRef(defaultState);\n  var timeoutRef = useRef(null);\n\n  function cleanUp() {\n    window.clearTimeout(timeoutRef.current);\n  }\n\n  function setState(newState) {\n    frameRef.current = newState;\n    cleanUp();\n    timeoutRef.current = window.setTimeout(function () {\n      frameRef.current = null;\n      timeoutRef.current = null;\n    }, 100);\n  }\n\n  function getState() {\n    return frameRef.current;\n  }\n\n  useEffect(function () {\n    return cleanUp;\n  }, []);\n  return [setState, getState];\n}"]},"metadata":{},"sourceType":"module"}