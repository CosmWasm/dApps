{"ast":null,"code":"import inherits from './util/inherits';\nimport MixedSchema from './mixed';\nimport { number as locale } from './locale';\nimport isAbsent from './util/isAbsent';\n\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\n\nexport default function NumberSchema() {\n  var _this = this;\n\n  if (!(this instanceof NumberSchema)) return new NumberSchema();\n  MixedSchema.call(this, {\n    type: 'number'\n  });\n  this.withMutation(function () {\n    _this.transform(function (value) {\n      var parsed = value;\n\n      if (typeof parsed === 'string') {\n        parsed = parsed.replace(/\\s/g, '');\n        if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n        parsed = +parsed;\n      }\n\n      if (this.isType(parsed)) return parsed;\n      return parseFloat(parsed);\n    });\n  });\n}\ninherits(NumberSchema, MixedSchema, {\n  _typeCheck: function _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  },\n  min: function min(_min, message) {\n    if (message === void 0) {\n      message = locale.min;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min: _min\n      },\n      test: function test(value) {\n        return isAbsent(value) || value >= this.resolve(_min);\n      }\n    });\n  },\n  max: function max(_max, message) {\n    if (message === void 0) {\n      message = locale.max;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max: _max\n      },\n      test: function test(value) {\n        return isAbsent(value) || value <= this.resolve(_max);\n      }\n    });\n  },\n  lessThan: function lessThan(less, message) {\n    if (message === void 0) {\n      message = locale.lessThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less: less\n      },\n      test: function test(value) {\n        return isAbsent(value) || value < this.resolve(less);\n      }\n    });\n  },\n  moreThan: function moreThan(more, message) {\n    if (message === void 0) {\n      message = locale.moreThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more: more\n      },\n      test: function test(value) {\n        return isAbsent(value) || value > this.resolve(more);\n      }\n    });\n  },\n  positive: function positive(msg) {\n    if (msg === void 0) {\n      msg = locale.positive;\n    }\n\n    return this.moreThan(0, msg);\n  },\n  negative: function negative(msg) {\n    if (msg === void 0) {\n      msg = locale.negative;\n    }\n\n    return this.lessThan(0, msg);\n  },\n  integer: function integer(message) {\n    if (message === void 0) {\n      message = locale.integer;\n    }\n\n    return this.test({\n      name: 'integer',\n      message: message,\n      test: function test(val) {\n        return isAbsent(val) || Number.isInteger(val);\n      }\n    });\n  },\n  truncate: function truncate() {\n    return this.transform(function (value) {\n      return !isAbsent(value) ? value | 0 : value;\n    });\n  },\n  round: function round(method) {\n    var avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = method && method.toLowerCase() || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(function (value) {\n      return !isAbsent(value) ? Math[method](value) : value;\n    });\n  }\n});","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/yup/es/number.js"],"names":["inherits","MixedSchema","number","locale","isAbsent","isNaN","value","NumberSchema","_this","call","type","withMutation","transform","parsed","replace","NaN","isType","parseFloat","_typeCheck","Number","valueOf","min","_min","message","test","name","exclusive","params","resolve","max","_max","lessThan","less","moreThan","more","positive","msg","negative","integer","val","isInteger","truncate","round","method","avail","toLowerCase","indexOf","TypeError","join","Math"],"mappings":"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","sourcesContent":["import inherits from './util/inherits';\nimport MixedSchema from './mixed';\nimport { number as locale } from './locale';\nimport isAbsent from './util/isAbsent';\n\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\n\nexport default function NumberSchema() {\n  var _this = this;\n\n  if (!(this instanceof NumberSchema)) return new NumberSchema();\n  MixedSchema.call(this, {\n    type: 'number'\n  });\n  this.withMutation(function () {\n    _this.transform(function (value) {\n      var parsed = value;\n\n      if (typeof parsed === 'string') {\n        parsed = parsed.replace(/\\s/g, '');\n        if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n        parsed = +parsed;\n      }\n\n      if (this.isType(parsed)) return parsed;\n      return parseFloat(parsed);\n    });\n  });\n}\ninherits(NumberSchema, MixedSchema, {\n  _typeCheck: function _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  },\n  min: function min(_min, message) {\n    if (message === void 0) {\n      message = locale.min;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min: _min\n      },\n      test: function test(value) {\n        return isAbsent(value) || value >= this.resolve(_min);\n      }\n    });\n  },\n  max: function max(_max, message) {\n    if (message === void 0) {\n      message = locale.max;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max: _max\n      },\n      test: function test(value) {\n        return isAbsent(value) || value <= this.resolve(_max);\n      }\n    });\n  },\n  lessThan: function lessThan(less, message) {\n    if (message === void 0) {\n      message = locale.lessThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less: less\n      },\n      test: function test(value) {\n        return isAbsent(value) || value < this.resolve(less);\n      }\n    });\n  },\n  moreThan: function moreThan(more, message) {\n    if (message === void 0) {\n      message = locale.moreThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more: more\n      },\n      test: function test(value) {\n        return isAbsent(value) || value > this.resolve(more);\n      }\n    });\n  },\n  positive: function positive(msg) {\n    if (msg === void 0) {\n      msg = locale.positive;\n    }\n\n    return this.moreThan(0, msg);\n  },\n  negative: function negative(msg) {\n    if (msg === void 0) {\n      msg = locale.negative;\n    }\n\n    return this.lessThan(0, msg);\n  },\n  integer: function integer(message) {\n    if (message === void 0) {\n      message = locale.integer;\n    }\n\n    return this.test({\n      name: 'integer',\n      message: message,\n      test: function test(val) {\n        return isAbsent(val) || Number.isInteger(val);\n      }\n    });\n  },\n  truncate: function truncate() {\n    return this.transform(function (value) {\n      return !isAbsent(value) ? value | 0 : value;\n    });\n  },\n  round: function round(method) {\n    var avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = method && method.toLowerCase() || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(function (value) {\n      return !isAbsent(value) ? Math[method](value) : value;\n    });\n  }\n});"]},"metadata":{},"sourceType":"module"}