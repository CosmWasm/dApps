{"ast":null,"code":"import { Children, createContext, useContext, useRef, useEffect, useReducer, useCallback, useMemo, useImperativeHandle, createElement, useLayoutEffect, forwardRef, Component } from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash-es/isPlainObject';\nimport clone from 'lodash-es/clone';\nimport toPath from 'lodash-es/toPath';\nimport invariant from 'tiny-warning';\nimport { unstable_runWithPriority, unstable_LowPriority } from 'scheduler';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport cloneDeep from 'lodash-es/cloneDeep';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n/** @private is the value an empty array? */\n\n\nvar isEmptyArray = function isEmptyArray(value) {\n  return Array.isArray(value) && value.length === 0;\n};\n/** @private is the given object a Function? */\n\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === 'function';\n};\n/** @private is the given object an Object? */\n\n\nvar isObject = function isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n};\n/** @private is the given object an integer? */\n\n\nvar isInteger = function isInteger(obj) {\n  return String(Math.floor(Number(obj))) === obj;\n};\n/** @private is the given object a string? */\n\n\nvar isString = function isString(obj) {\n  return Object.prototype.toString.call(obj) === '[object String]';\n};\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\n\n\nvar isNaN$1 = function isNaN(obj) {\n  return obj !== obj;\n};\n/** @private Does a React component have exactly 0 children? */\n\n\nvar isEmptyChildren = function isEmptyChildren(children) {\n  return Children.count(children) === 0;\n};\n/** @private is the given object/value a promise? */\n\n\nvar isPromise = function isPromise(value) {\n  return isObject(value) && isFunction(value.then);\n};\n/** @private is the given object/value a type of synthetic event? */\n\n\nvar isInputEvent = function isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n};\n/**\r\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\r\n * not safe to call document.activeElement if there is nothing focused.\r\n *\r\n * The activeElement will be null only if the document or document body is not\r\n * yet defined.\r\n *\r\n * @param {?Document} doc Defaults to current document.\r\n * @return {Element | null}\r\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\r\n */\n\n\nfunction getActiveElement(doc) {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n/**\r\n * Deeply get a value from an object via its path.\r\n */\n\n\nfunction getIn(obj, key, def, p) {\n  if (p === void 0) {\n    p = 0;\n  }\n\n  var path = toPath(key);\n\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n\n  return obj === undefined ? def : obj;\n}\n/**\r\n * Deeply set a value from in object via it's path. If the value at `path`\r\n * has changed, return a shallow copy of obj with `value` set at `path`.\r\n * If `value` has not changed, return the original `obj`.\r\n *\r\n * Existing objects / arrays along `path` are also shallow copied. Sibling\r\n * objects along path retain the same internal js reference. Since new\r\n * objects / arrays are only created along `path`, we can test if anything\r\n * changed in a nested structure by comparing the object's reference in\r\n * the old and new object, similar to how russian doll cache invalidation\r\n * works.\r\n *\r\n * In earlier versions of this function, which used cloneDeep, there were\r\n * issues whereby settings a nested value would mutate the parent\r\n * instead of creating a new object. `clone` avoids that bug making a\r\n * shallow copy of the objects along the update path\r\n * so no object is mutated in place.\r\n *\r\n * Before changing this function, please read through the following\r\n * discussions.\r\n *\r\n * @see https://github.com/developit/linkstate\r\n * @see https://github.com/jaredpalmer/formik/pull/123\r\n */\n\n\nfunction setIn(obj, path, value) {\n  var res = clone(obj); // this keeps inheritance when obj is a class\n\n  var resVal = res;\n  var i = 0;\n  var pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    var currentPath = pathArray[i];\n    var currentObj = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      var nextPath = pathArray[i + 1];\n      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  } // Return original object if new value is the same as current\n\n\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  } // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n\n\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n/**\r\n * Recursively a set the same value for all keys and arrays nested object, cloning\r\n * @param object\r\n * @param value\r\n * @param visited\r\n * @param response\r\n */\n\n\nfunction setNestedObjectValues(object, value, visited, response) {\n  if (visited === void 0) {\n    visited = new WeakMap();\n  }\n\n  if (response === void 0) {\n    response = {};\n  }\n\n  for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {\n    var k = _Object$keys[_i];\n    var val = object[k];\n\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true); // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\nvar FormikContext = /*#__PURE__*/createContext(undefined);\nvar FormikProvider = FormikContext.Provider;\nvar FormikConsumer = FormikContext.Consumer;\n\nfunction useFormikContext() {\n  var formik = useContext(FormikContext);\n  !!!formik ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.\") : invariant(false) : void 0;\n  return formik;\n}\n\nfunction formikReducer(state, msg) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return _extends({}, state, {\n        values: msg.payload\n      });\n\n    case 'SET_TOUCHED':\n      return _extends({}, state, {\n        touched: msg.payload\n      });\n\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return _extends({}, state, {\n        errors: msg.payload\n      });\n\n    case 'SET_STATUS':\n      return _extends({}, state, {\n        status: msg.payload\n      });\n\n    case 'SET_ISSUBMITTING':\n      return _extends({}, state, {\n        isSubmitting: msg.payload\n      });\n\n    case 'SET_ISVALIDATING':\n      return _extends({}, state, {\n        isValidating: msg.payload\n      });\n\n    case 'SET_FIELD_VALUE':\n      return _extends({}, state, {\n        values: setIn(state.values, msg.payload.field, msg.payload.value)\n      });\n\n    case 'SET_FIELD_TOUCHED':\n      return _extends({}, state, {\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value)\n      });\n\n    case 'SET_FIELD_ERROR':\n      return _extends({}, state, {\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value)\n      });\n\n    case 'RESET_FORM':\n      return _extends({}, state, {}, msg.payload);\n\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n\n    case 'SUBMIT_ATTEMPT':\n      return _extends({}, state, {\n        touched: setNestedObjectValues(state.values, true),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1\n      });\n\n    case 'SUBMIT_FAILURE':\n      return _extends({}, state, {\n        isSubmitting: false\n      });\n\n    case 'SUBMIT_SUCCESS':\n      return _extends({}, state, {\n        isSubmitting: false\n      });\n\n    default:\n      return state;\n  }\n} // Initial empty states // objects\n\n\nvar emptyErrors = {};\nvar emptyTouched = {};\n\nfunction useFormik(_ref) {\n  var _ref$validateOnChange = _ref.validateOnChange,\n      validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange,\n      _ref$validateOnBlur = _ref.validateOnBlur,\n      validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur,\n      _ref$validateOnMount = _ref.validateOnMount,\n      validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount,\n      isInitialValid = _ref.isInitialValid,\n      _ref$enableReinitiali = _ref.enableReinitialize,\n      enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali,\n      onSubmit = _ref.onSubmit,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"validateOnChange\", \"validateOnBlur\", \"validateOnMount\", \"isInitialValid\", \"enableReinitialize\", \"onSubmit\"]);\n\n  var props = _extends({\n    validateOnChange: validateOnChange,\n    validateOnBlur: validateOnBlur,\n    validateOnMount: validateOnMount,\n    onSubmit: onSubmit\n  }, rest);\n\n  var initialValues = useRef(props.initialValues);\n  var initialErrors = useRef(props.initialErrors || emptyErrors);\n  var initialTouched = useRef(props.initialTouched || emptyTouched);\n  var initialStatus = useRef(props.initialStatus);\n  var isMounted = useRef(false);\n  var fieldRegistry = useRef({});\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(function () {\n      !(typeof isInitialValid === 'undefined') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.') : invariant(false) : void 0; // eslint-disable-next-line\n    }, []);\n  }\n\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n\n  var _React$useReducer = useReducer(formikReducer, {\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0\n  }),\n      state = _React$useReducer[0],\n      dispatch = _React$useReducer[1];\n\n  var runValidateHandler = useCallback(function (values, field) {\n    return new Promise(function (resolve, reject) {\n      var maybePromisedErrors = props.validate(values, field);\n\n      if (maybePromisedErrors == null) {\n        // use loose null check here on purpose\n        resolve(emptyErrors);\n      } else if (isPromise(maybePromisedErrors)) {\n        maybePromisedErrors.then(function (errors) {\n          resolve(errors || emptyErrors);\n        }, function (actualException) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\"Warning: An unhandled error was caught during validation in <Formik validate />\", actualException);\n          }\n\n          reject(actualException);\n        });\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  }, [props.validate]);\n  /**\r\n   * Run validation against a Yup schema and optionally run a function if successful\r\n   */\n\n  var runValidationSchema = useCallback(function (values, field) {\n    var validationSchema = props.validationSchema;\n    var schema = isFunction(validationSchema) ? validationSchema(field) : validationSchema;\n    var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);\n    return new Promise(function (resolve, reject) {\n      promise.then(function () {\n        resolve(emptyErrors);\n      }, function (err) {\n        // Yup will throw a validation error if validation fails. We catch those and\n        // resolve them into Formik errors. We can sniff if something is a Yup error\n        // by checking error.name.\n        // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n        if (err.name === 'ValidationError') {\n          resolve(yupToFormErrors(err));\n        } else {\n          // We throw any other errors\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\"Warning: An unhandled error was caught during validation in <Formik validationSchema />\", err);\n          }\n\n          reject(err);\n        }\n      });\n    });\n  }, [props.validationSchema]);\n  var runSingleFieldLevelValidation = useCallback(function (field, value) {\n    return new Promise(function (resolve) {\n      return resolve(fieldRegistry.current[field].validate(value));\n    });\n  }, []);\n  var runFieldLevelValidations = useCallback(function (values) {\n    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function (f) {\n      return isFunction(fieldRegistry.current[f].validate);\n    }); // Construct an array with all of the field validation functions\n\n    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function (f) {\n      return runSingleFieldLevelValidation(f, getIn(values, f));\n    }) : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n    return Promise.all(fieldValidations).then(function (fieldErrorsList) {\n      return fieldErrorsList.reduce(function (prev, curr, index) {\n        if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n          return prev;\n        }\n\n        if (curr) {\n          prev = setIn(prev, fieldKeysWithValidation[index], curr);\n        }\n\n        return prev;\n      }, {});\n    });\n  }, [runSingleFieldLevelValidation]); // Run all validations and return the result\n\n  var runAllValidations = useCallback(function (values) {\n    return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function (_ref2) {\n      var fieldErrors = _ref2[0],\n          schemaErrors = _ref2[1],\n          validateErrors = _ref2[2];\n      var combinedErrors = deepmerge.all([fieldErrors, schemaErrors, validateErrors], {\n        arrayMerge: arrayMerge\n      });\n      return combinedErrors;\n    });\n  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]); // Run validations and dispatching the result as low-priority via rAF.\n  //\n  // The thinking is that validation as a result of onChange and onBlur\n  // should never block user input. Note: This method should never be called\n  // during the submission phase because validation prior to submission\n  // is actaully high-priority since we absolutely need to guarantee the\n  // form is valid before executing props.onSubmit.\n\n  var validateFormWithLowPriority = useEventCallback(function (values) {\n    if (values === void 0) {\n      values = state.values;\n    }\n\n    return unstable_runWithPriority(unstable_LowPriority, function () {\n      return runAllValidations(values).then(function (combinedErrors) {\n        if (!!isMounted.current) {\n          dispatch({\n            type: 'SET_ERRORS',\n            payload: combinedErrors\n          });\n        }\n\n        return combinedErrors;\n      })[\"catch\"](function (actualException) {\n        if (process.env.NODE_ENV !== 'production') {\n          // Users can throw during validate, however they have no way of handling their error on touch / blur. In low priority, we need to handle it\n          console.warn(\"Warning: An unhandled error was caught during low priority validation in <Formik validate />\", actualException);\n        }\n      });\n    });\n  }); // Run all validations methods and update state accordingly\n\n  var validateFormWithHighPriority = useEventCallback(function (values) {\n    if (values === void 0) {\n      values = state.values;\n    }\n\n    dispatch({\n      type: 'SET_ISVALIDATING',\n      payload: true\n    });\n    return runAllValidations(values).then(function (combinedErrors) {\n      if (!!isMounted.current) {\n        dispatch({\n          type: 'SET_ISVALIDATING',\n          payload: false\n        });\n\n        if (!isEqual(state.errors, combinedErrors)) {\n          dispatch({\n            type: 'SET_ERRORS',\n            payload: combinedErrors\n          });\n        }\n      }\n\n      return combinedErrors;\n    });\n  });\n  var resetForm = useCallback(function (nextState) {\n    var values = nextState && nextState.values ? nextState.values : initialValues.current;\n    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};\n    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};\n    var status = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;\n    initialValues.current = values;\n    initialErrors.current = errors;\n    initialTouched.current = touched;\n    initialStatus.current = status;\n\n    var dispatchFn = function dispatchFn() {\n      dispatch({\n        type: 'RESET_FORM',\n        payload: {\n          isSubmitting: !!nextState && !!nextState.isSubmitting,\n          errors: errors,\n          touched: touched,\n          status: status,\n          values: values,\n          isValidating: !!nextState && !!nextState.isValidating,\n          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === 'number' ? nextState.submitCount : 0\n        }\n      });\n    };\n\n    if (props.onReset) {\n      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);\n\n      if (isPromise(maybePromisedOnReset)) {\n        maybePromisedOnReset.then(dispatchFn);\n      } else {\n        dispatchFn();\n      }\n    } else {\n      dispatchFn();\n    }\n  }, [props.initialErrors, props.initialStatus, props.initialTouched]);\n  useEffect(function () {\n    if (isMounted.current === true && !isEqual(initialValues.current, props.initialValues)) {\n      initialValues.current = props.initialValues;\n\n      if (enableReinitialize) {\n        resetForm();\n      }\n\n      if (validateOnMount) {\n        validateFormWithLowPriority(initialValues.current);\n      }\n    }\n  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithLowPriority]);\n  useEffect(function () {\n    if (enableReinitialize && isMounted.current === true && !isEqual(initialErrors.current, props.initialErrors)) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n  useEffect(function () {\n    if (enableReinitialize && isMounted.current === true && !isEqual(initialTouched.current, props.initialTouched)) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n  useEffect(function () {\n    if (enableReinitialize && isMounted.current === true && !isEqual(initialStatus.current, props.initialStatus)) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n  var validateField = useEventCallback(function (name) {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n    if (isFunction(fieldRegistry.current[name].validate)) {\n      var value = getIn(state.values, name);\n      var maybePromise = fieldRegistry.current[name].validate(value);\n\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({\n          type: 'SET_ISVALIDATING',\n          payload: true\n        });\n        return maybePromise.then(function (x) {\n          return x;\n        }).then(function (error) {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: {\n              field: name,\n              value: error\n            }\n          });\n          dispatch({\n            type: 'SET_ISVALIDATING',\n            payload: false\n          });\n        });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise\n          }\n        });\n        return Promise.resolve(maybePromise);\n      }\n    } else if (props.validationSchema) {\n      dispatch({\n        type: 'SET_ISVALIDATING',\n        payload: true\n      });\n      return runValidationSchema(state.values, name).then(function (x) {\n        return x;\n      }).then(function (error) {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: error[name]\n          }\n        });\n        dispatch({\n          type: 'SET_ISVALIDATING',\n          payload: false\n        });\n      });\n    }\n\n    return Promise.resolve();\n  });\n  var registerField = useCallback(function (name, _ref3) {\n    var validate = _ref3.validate;\n    fieldRegistry.current[name] = {\n      validate: validate\n    };\n  }, []);\n  var unregisterField = useCallback(function (name) {\n    delete fieldRegistry.current[name];\n  }, []);\n  var setTouched = useEventCallback(function (touched, shouldValidate) {\n    dispatch({\n      type: 'SET_TOUCHED',\n      payload: touched\n    });\n    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;\n    return willValidate ? validateFormWithLowPriority(state.values) : Promise.resolve();\n  });\n  var setErrors = useCallback(function (errors) {\n    dispatch({\n      type: 'SET_ERRORS',\n      payload: errors\n    });\n  }, []);\n  var setValues = useEventCallback(function (values, shouldValidate) {\n    dispatch({\n      type: 'SET_VALUES',\n      payload: values\n    });\n    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;\n    return willValidate ? validateFormWithLowPriority(values) : Promise.resolve();\n  });\n  var setFieldError = useCallback(function (field, value) {\n    dispatch({\n      type: 'SET_FIELD_ERROR',\n      payload: {\n        field: field,\n        value: value\n      }\n    });\n  }, []);\n  var setFieldValue = useEventCallback(function (field, value, shouldValidate) {\n    dispatch({\n      type: 'SET_FIELD_VALUE',\n      payload: {\n        field: field,\n        value: value\n      }\n    });\n    var willValidate = shouldValidate === undefined ? validateOnChange : shouldValidate;\n    return willValidate ? validateFormWithLowPriority(setIn(state.values, field, value)) : Promise.resolve();\n  });\n  var executeChange = useCallback(function (eventOrTextValue, maybePath) {\n    // By default, assume that the first argument is a string. This allows us to use\n    // handleChange with React Native and React Native Web's onChangeText prop which\n    // provides just the value of the input.\n    var field = maybePath;\n    var val = eventOrTextValue;\n    var parsed; // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n    // so we handle like we would a normal HTML change event.\n\n    if (!isString(eventOrTextValue)) {\n      // If we can, persist the event\n      // @see https://reactjs.org/docs/events.html#event-pooling\n      if (eventOrTextValue.persist) {\n        eventOrTextValue.persist();\n      }\n\n      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;\n      var type = target.type,\n          name = target.name,\n          id = target.id,\n          value = target.value,\n          checked = target.checked,\n          outerHTML = target.outerHTML,\n          options = target.options,\n          multiple = target.multiple;\n      field = maybePath ? maybePath : name ? name : id;\n\n      if (!field && process.env.NODE_ENV !== \"production\") {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n          handlerName: 'handleChange'\n        });\n      }\n\n      val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? '' : parsed) : /checkbox/.test(type) // checkboxes\n      ? getValueForCheckbox(getIn(state.values, field), checked, value) : !!multiple // <select multiple>\n      ? getSelectedValues(options) : value;\n    }\n\n    if (field) {\n      // Set form fields by name\n      setFieldValue(field, val);\n    }\n  }, [setFieldValue, state.values]);\n  var handleChange = useEventCallback(function (eventOrPath) {\n    if (isString(eventOrPath)) {\n      return function (event) {\n        return executeChange(event, eventOrPath);\n      };\n    } else {\n      executeChange(eventOrPath);\n    }\n  });\n  var setFieldTouched = useEventCallback(function (field, touched, shouldValidate) {\n    if (touched === void 0) {\n      touched = true;\n    }\n\n    dispatch({\n      type: 'SET_FIELD_TOUCHED',\n      payload: {\n        field: field,\n        value: touched\n      }\n    });\n    var willValidate = shouldValidate === undefined ? validateOnBlur : shouldValidate;\n    return willValidate ? validateFormWithLowPriority(state.values) : Promise.resolve();\n  });\n  var executeBlur = useCallback(function (e, path) {\n    if (e.persist) {\n      e.persist();\n    }\n\n    var _e$target = e.target,\n        name = _e$target.name,\n        id = _e$target.id,\n        outerHTML = _e$target.outerHTML;\n    var field = path ? path : name ? name : id;\n\n    if (!field && process.env.NODE_ENV !== \"production\") {\n      warnAboutMissingIdentifier({\n        htmlContent: outerHTML,\n        documentationAnchorLink: 'handleblur-e-any--void',\n        handlerName: 'handleBlur'\n      });\n    }\n\n    setFieldTouched(field, true);\n  }, [setFieldTouched]);\n  var handleBlur = useEventCallback(function (eventOrString) {\n    if (isString(eventOrString)) {\n      return function (event) {\n        return executeBlur(event, eventOrString);\n      };\n    } else {\n      executeBlur(eventOrString);\n    }\n  });\n  var setFormikState = useCallback(function (stateOrCb) {\n    if (isFunction(stateOrCb)) {\n      dispatch({\n        type: 'SET_FORMIK_STATE',\n        payload: stateOrCb\n      });\n    } else {\n      dispatch({\n        type: 'SET_FORMIK_STATE',\n        payload: function payload() {\n          return stateOrCb;\n        }\n      });\n    }\n  }, []);\n  var setStatus = useCallback(function (status) {\n    dispatch({\n      type: 'SET_STATUS',\n      payload: status\n    });\n  }, []);\n  var setSubmitting = useCallback(function (isSubmitting) {\n    dispatch({\n      type: 'SET_ISSUBMITTING',\n      payload: isSubmitting\n    });\n  }, []);\n  var submitForm = useEventCallback(function () {\n    dispatch({\n      type: 'SUBMIT_ATTEMPT'\n    });\n    return validateFormWithHighPriority().then(function (combinedErrors) {\n      // In case an error was thrown and passed to the resolved Promise,\n      // `combinedErrors` can be an instance of an Error. We need to check\n      // that and abort the submit.\n      // If we don't do that, calling `Object.keys(new Error())` yields an\n      // empty array, which causes the validation to pass and the form\n      // to be submitted.\n      var isInstanceOfError = combinedErrors instanceof Error;\n      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n\n      if (isActuallyValid) {\n        // Proceed with submit...\n        //\n        // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n        // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n        // This would be fine in simple cases, but make it impossible to disable submit\n        // buttons where people use callbacks or promises as side effects (which is basically\n        // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n        //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n        // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n        // cleanup of isSubmitting on behalf of the consumer.\n        var promiseOrUndefined;\n\n        try {\n          promiseOrUndefined = executeSubmit(); // Bail if it's sync, consumer is responsible for cleaning up\n          // via setSubmitting(false)\n\n          if (promiseOrUndefined === undefined) {\n            return;\n          }\n        } catch (error) {\n          throw error;\n        }\n\n        return Promise.resolve(promiseOrUndefined).then(function (result) {\n          if (!!isMounted.current) {\n            dispatch({\n              type: 'SUBMIT_SUCCESS'\n            });\n          }\n\n          return result;\n        })[\"catch\"](function (_errors) {\n          if (!!isMounted.current) {\n            dispatch({\n              type: 'SUBMIT_FAILURE'\n            }); // This is a legit error rejected by the onSubmit fn\n            // so we don't want to break the promise chain\n\n            throw _errors;\n          }\n        });\n      } else if (!!isMounted.current) {\n        // ^^^ Make sure Formik is still mounted before updating state\n        dispatch({\n          type: 'SUBMIT_FAILURE'\n        }); // throw combinedErrors;\n\n        if (isInstanceOfError) {\n          throw combinedErrors;\n        }\n      }\n\n      return;\n    });\n  });\n  var handleSubmit = useEventCallback(function (e) {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    } // Warn if form submission is triggered by a <button> without a\n    // specified `type` attribute during development. This mitigates\n    // a common gotcha in forms with both reset and submit buttons,\n    // where the dev forgets to add type=\"button\" to the reset button.\n\n\n    if (process.env.NODE_ENV !== \"production\" && typeof document !== 'undefined') {\n      // Safely get the active element (works with IE)\n      var activeElement = getActiveElement();\n\n      if (activeElement !== null && activeElement instanceof HTMLButtonElement) {\n        !(activeElement.attributes && activeElement.attributes.getNamedItem('type')) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.') : invariant(false) : void 0;\n      }\n    }\n\n    submitForm()[\"catch\"](function (reason) {\n      console.warn(\"Warning: An unhandled error was caught from submitForm()\", reason);\n    });\n  });\n  var imperativeMethods = {\n    resetForm: resetForm,\n    validateForm: validateFormWithHighPriority,\n    validateField: validateField,\n    setErrors: setErrors,\n    setFieldError: setFieldError,\n    setFieldTouched: setFieldTouched,\n    setFieldValue: setFieldValue,\n    setStatus: setStatus,\n    setSubmitting: setSubmitting,\n    setTouched: setTouched,\n    setValues: setValues,\n    setFormikState: setFormikState,\n    submitForm: submitForm\n  };\n  var executeSubmit = useEventCallback(function () {\n    return onSubmit(state.values, imperativeMethods);\n  });\n  var handleReset = useEventCallback(function (e) {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n  var getFieldMeta = useCallback(function (name) {\n    return {\n      value: getIn(state.values, name),\n      error: getIn(state.errors, name),\n      touched: !!getIn(state.touched, name),\n      initialValue: getIn(initialValues.current, name),\n      initialTouched: !!getIn(initialTouched.current, name),\n      initialError: getIn(initialErrors.current, name)\n    };\n  }, [state.errors, state.touched, state.values]);\n  var getFieldHelpers = useCallback(function (name) {\n    return {\n      setValue: function setValue(value, shouldValidate) {\n        return setFieldValue(name, value, shouldValidate);\n      },\n      setTouched: function setTouched(value, shouldValidate) {\n        return setFieldTouched(name, value, shouldValidate);\n      },\n      setError: function setError(value) {\n        return setFieldError(name, value);\n      }\n    };\n  }, [setFieldValue, setFieldTouched, setFieldError]);\n  var getFieldProps = useCallback(function (nameOrOptions) {\n    var isAnObject = isObject(nameOrOptions);\n    var name = isAnObject ? nameOrOptions.name : nameOrOptions;\n    var valueState = getIn(state.values, name);\n    var field = {\n      name: name,\n      value: valueState,\n      onChange: handleChange,\n      onBlur: handleBlur\n    };\n\n    if (isAnObject) {\n      var type = nameOrOptions.type,\n          valueProp = nameOrOptions.value,\n          is = nameOrOptions.as,\n          multiple = nameOrOptions.multiple;\n\n      if (type === 'checkbox') {\n        if (valueProp === undefined) {\n          field.checked = !!valueState;\n        } else {\n          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));\n          field.value = valueProp;\n        }\n      } else if (type === 'radio') {\n        field.checked = valueState === valueProp;\n        field.value = valueProp;\n      } else if (is === 'select' && multiple) {\n        field.value = field.value || [];\n        field.multiple = true;\n      }\n    }\n\n    return field;\n  }, [handleBlur, handleChange, state.values]);\n  var dirty = useMemo(function () {\n    return !isEqual(initialValues.current, state.values);\n  }, [initialValues.current, state.values]);\n  var isValid = useMemo(function () {\n    return typeof isInitialValid !== 'undefined' ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;\n  }, [isInitialValid, dirty, state.errors, props]);\n\n  var ctx = _extends({}, state, {\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur: handleBlur,\n    handleChange: handleChange,\n    handleReset: handleReset,\n    handleSubmit: handleSubmit,\n    resetForm: resetForm,\n    setErrors: setErrors,\n    setFormikState: setFormikState,\n    setFieldTouched: setFieldTouched,\n    setFieldValue: setFieldValue,\n    setFieldError: setFieldError,\n    setStatus: setStatus,\n    setSubmitting: setSubmitting,\n    setTouched: setTouched,\n    setValues: setValues,\n    submitForm: submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField: validateField,\n    isValid: isValid,\n    dirty: dirty,\n    unregisterField: unregisterField,\n    registerField: registerField,\n    getFieldProps: getFieldProps,\n    getFieldMeta: getFieldMeta,\n    getFieldHelpers: getFieldHelpers,\n    validateOnBlur: validateOnBlur,\n    validateOnChange: validateOnChange,\n    validateOnMount: validateOnMount\n  });\n\n  return ctx;\n}\n\nfunction Formik(props) {\n  var formikbag = useFormik(props);\n  var component = props.component,\n      children = props.children,\n      render = props.render,\n      innerRef = props.innerRef; // This allows folks to pass a ref to <Formik />\n\n  useImperativeHandle(innerRef, function () {\n    return formikbag;\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(function () {\n      !!props.render ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>\") : invariant(false) : void 0; // eslint-disable-next-line\n    }, []);\n  }\n\n  return createElement(FormikProvider, {\n    value: formikbag\n  }, component ? createElement(component, formikbag) : render ? render(formikbag) : children // children come last, always called\n  ? isFunction(children) ? children(formikbag) : !isEmptyChildren(children) ? Children.only(children) : null : null);\n}\n\nfunction warnAboutMissingIdentifier(_ref4) {\n  var htmlContent = _ref4.htmlContent,\n      documentationAnchorLink = _ref4.documentationAnchorLink,\n      handlerName = _ref4.handlerName;\n  console.warn(\"Warning: Formik called `\" + handlerName + \"`, but you forgot to pass an `id` or `name` attribute to your input:\\n    \" + htmlContent + \"\\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#\" + documentationAnchorLink + \"\\n  \");\n}\n/**\r\n * Transform Yup ValidationError to a more usable object\r\n */\n\n\nfunction yupToFormErrors(yupError) {\n  var errors = {};\n\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n\n    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref5;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref5 = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref5 = _i.value;\n      }\n\n      var err = _ref5;\n\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n\n  return errors;\n}\n/**\r\n * Validate a yup schema.\r\n */\n\n\nfunction validateYupSchema(values, schema, sync, context) {\n  if (sync === void 0) {\n    sync = false;\n  }\n\n  if (context === void 0) {\n    context = {};\n  }\n\n  var validateData = prepareDataForValidation(values);\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context\n  });\n}\n/**\r\n * Recursively prepare values.\r\n */\n\n\nfunction prepareDataForValidation(values) {\n  var data = Array.isArray(values) ? [] : {};\n\n  for (var k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      var key = String(k);\n\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map(function (value) {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n\n  return data;\n}\n/**\r\n * deepmerge array merging algorithm\r\n * https://github.com/KyleAMathews/deepmerge#combine-array\r\n */\n\n\nfunction arrayMerge(target, source, options) {\n  var destination = target.slice();\n  source.forEach(function (e, i) {\n    if (typeof destination[i] === 'undefined') {\n      var cloneRequested = options.clone !== false;\n      var shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone ? deepmerge(Array.isArray(e) ? [] : {}, e, options) : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n/** Return multi select values based on an array of options */\n\n\nfunction getSelectedValues(options) {\n  return Array.from(options).filter(function (el) {\n    return el.selected;\n  }).map(function (el) {\n    return el.value;\n  });\n}\n/** Return the next value for a checkbox */\n\n\nfunction getValueForCheckbox(currentValue, checked, valueProp) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  } // If the currentValue was not a boolean we want to return an array\n\n\n  var currentArrayOfValues = [];\n  var isValueInArray = false;\n  var index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  } // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n\n\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  } // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n\n\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  } // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n\n\n  return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));\n} // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;\n\nfunction useEventCallback(fn) {\n  var ref = useRef(fn); // we copy a ref to the callback scoped to the current state/props on each render\n\n  useIsomorphicLayoutEffect(function () {\n    ref.current = fn;\n  });\n  return useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return ref.current.apply(void 0, args);\n  }, []);\n}\n\nfunction useField(propsOrFieldName) {\n  var formik = useFormikContext();\n  var getFieldProps = formik.getFieldProps,\n      getFieldMeta = formik.getFieldMeta,\n      getFieldHelpers = formik.getFieldHelpers,\n      registerField = formik.registerField,\n      unregisterField = formik.unregisterField;\n  var isAnObject = isObject(propsOrFieldName); // Normalize propsOrFieldName to FieldHookConfig<Val>\n\n  var props = isAnObject ? propsOrFieldName : {\n    name: propsOrFieldName\n  };\n  var fieldName = props.name,\n      validateFn = props.validate;\n  useEffect(function () {\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn\n      });\n    }\n\n    return function () {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    !formik ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component') : invariant(false) : void 0;\n  }\n\n  !fieldName ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Invalid field name. Either pass `useField` a string or an object containing a `name` key.') : invariant(false) : void 0;\n  return [getFieldProps(props), getFieldMeta(fieldName), getFieldHelpers(fieldName)];\n}\n\nfunction Field(_ref) {\n  var validate = _ref.validate,\n      name = _ref.name,\n      render = _ref.render,\n      children = _ref.children,\n      is = _ref.as,\n      component = _ref.component,\n      props = _objectWithoutPropertiesLoose(_ref, [\"validate\", \"name\", \"render\", \"children\", \"as\", \"component\"]);\n\n  var _useFormikContext = useFormikContext(),\n      formik = _objectWithoutPropertiesLoose(_useFormikContext, [\"validate\", \"validationSchema\"]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useEffect(function () {\n      !!render ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\\\"\" + name + \"\\\" render={({field, form}) => ...} /> with <Field name=\\\"\" + name + \"\\\">{({field, form, meta}) => ...}</Field>\") : invariant(false) : void 0;\n      !!(is && children && isFunction(children)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.') : invariant(false) : void 0;\n      !!(component && children && isFunction(children)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.') : invariant(false) : void 0;\n      !!(render && children && !isEmptyChildren(children)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored') : invariant(false) : void 0; // eslint-disable-next-line\n    }, []);\n  } // Register field and field-level validation with parent <Formik>\n\n\n  var registerField = formik.registerField,\n      unregisterField = formik.unregisterField;\n  useEffect(function () {\n    registerField(name, {\n      validate: validate\n    });\n    return function () {\n      unregisterField(name);\n    };\n  }, [registerField, unregisterField, name, validate]);\n  var field = formik.getFieldProps(_extends({\n    name: name\n  }, props));\n  var meta = formik.getFieldMeta(name);\n  var legacyBag = {\n    field: field,\n    form: formik\n  };\n\n  if (render) {\n    return render(_extends({}, legacyBag, {\n      meta: meta\n    }));\n  }\n\n  if (isFunction(children)) {\n    return children(_extends({}, legacyBag, {\n      meta: meta\n    }));\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      var innerRef = props.innerRef,\n          rest = _objectWithoutPropertiesLoose(props, [\"innerRef\"]);\n\n      return createElement(component, _extends({\n        ref: innerRef\n      }, field, {}, rest), children);\n    } // We don't pass `meta` for backwards compat\n\n\n    return createElement(component, _extends({\n      field: field,\n      form: formik\n    }, props), children);\n  } // default to input here so we can check for both `as` and `children` above\n\n\n  var asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    var _innerRef = props.innerRef,\n        _rest = _objectWithoutPropertiesLoose(props, [\"innerRef\"]);\n\n    return createElement(asElement, _extends({\n      ref: _innerRef\n    }, field, {}, _rest), children);\n  }\n\n  return createElement(asElement, _extends({}, field, {}, props), children);\n}\n\nvar Form = /*#__PURE__*/forwardRef(function (props, ref) {\n  // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n  // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n  var action = props.action,\n      rest = _objectWithoutPropertiesLoose(props, [\"action\"]);\n\n  var _action = action || '#';\n\n  var _useFormikContext = useFormikContext(),\n      handleReset = _useFormikContext.handleReset,\n      handleSubmit = _useFormikContext.handleSubmit;\n\n  return createElement(\"form\", Object.assign({\n    onSubmit: handleSubmit,\n    ref: ref,\n    onReset: handleReset,\n    action: _action\n  }, rest));\n});\nForm.displayName = 'Form';\n/**\r\n * A public higher-order component to access the imperative API\r\n */\n\nfunction withFormik(_ref) {\n  var _ref$mapPropsToValues = _ref.mapPropsToValues,\n      mapPropsToValues = _ref$mapPropsToValues === void 0 ? function (vanillaProps) {\n    var val = {};\n\n    for (var k in vanillaProps) {\n      if (vanillaProps.hasOwnProperty(k) && typeof vanillaProps[k] !== 'function') {\n        // @todo TypeScript fix\n        val[k] = vanillaProps[k];\n      }\n    }\n\n    return val;\n  } : _ref$mapPropsToValues,\n      config = _objectWithoutPropertiesLoose(_ref, [\"mapPropsToValues\"]);\n\n  return function createFormik(Component$1) {\n    var componentDisplayName = Component$1.displayName || Component$1.name || Component$1.constructor && Component$1.constructor.name || 'Component';\n    /**\r\n     * We need to use closures here for to provide the wrapped component's props to\r\n     * the respective withFormik config methods.\r\n     */\n\n    var C = /*#__PURE__*/function (_React$Component) {\n      _inheritsLoose(C, _React$Component);\n\n      function C() {\n        var _this;\n\n        _this = _React$Component.apply(this, arguments) || this;\n\n        _this.validate = function (values) {\n          return config.validate(values, _this.props);\n        };\n\n        _this.validationSchema = function () {\n          return isFunction(config.validationSchema) ? config.validationSchema(_this.props) : config.validationSchema;\n        };\n\n        _this.handleSubmit = function (values, actions) {\n          return config.handleSubmit(values, _extends({}, actions, {\n            props: _this.props\n          }));\n        };\n        /**\r\n         * Just avoiding a render callback for perf here\r\n         */\n\n\n        _this.renderFormComponent = function (formikProps) {\n          return createElement(Component$1, Object.assign({}, _this.props, formikProps));\n        };\n\n        return _this;\n      }\n\n      var _proto = C.prototype;\n\n      _proto.render = function render() {\n        var _this$props = this.props,\n            props = _objectWithoutPropertiesLoose(_this$props, [\"children\"]);\n\n        return createElement(Formik, Object.assign({}, props, config, {\n          validate: config.validate && this.validate,\n          validationSchema: config.validationSchema && this.validationSchema,\n          initialValues: mapPropsToValues(this.props),\n          initialStatus: config.mapPropsToStatus && config.mapPropsToStatus(this.props),\n          initialErrors: config.mapPropsToErrors && config.mapPropsToErrors(this.props),\n          initialTouched: config.mapPropsToTouched && config.mapPropsToTouched(this.props),\n          onSubmit: this.handleSubmit,\n          children: this.renderFormComponent\n        }));\n      };\n\n      return C;\n    }(Component);\n\n    C.displayName = \"WithFormik(\" + componentDisplayName + \")\";\n    return hoistNonReactStatics(C, Component$1 // cast type to ComponentClass (even if SFC)\n    );\n  };\n}\n/**\r\n * Connect any component to Formik context, and inject as a prop called `formik`;\r\n * @param Comp React Component\r\n */\n\n\nfunction connect(Comp) {\n  var C = function C(props) {\n    return createElement(FormikConsumer, null, function (formik) {\n      !!!formik ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: \" + Comp.name) : invariant(false) : void 0;\n      return createElement(Comp, Object.assign({}, props, {\n        formik: formik\n      }));\n    });\n  };\n\n  var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || 'Component'; // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n\n  C.WrappedComponent = Comp;\n  C.displayName = \"FormikConnect(\" + componentDisplayName + \")\";\n  return hoistNonReactStatics(C, Comp // cast type to ComponentClass (even if SFC)\n  );\n}\n/**\r\n * Some array helpers!\r\n */\n\n\nvar move = function move(array, from, to) {\n  var copy = copyArrayLike(array);\n  var value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nvar swap = function swap(arrayLike, indexA, indexB) {\n  var copy = copyArrayLike(arrayLike);\n  var a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nvar insert = function insert(arrayLike, index, value) {\n  var copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nvar replace = function replace(arrayLike, index, value) {\n  var copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nvar copyArrayLike = function copyArrayLike(arrayLike) {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [].concat(arrayLike);\n  } else {\n    var maxIndex = Object.keys(arrayLike).map(function (key) {\n      return parseInt(key);\n    }).reduce(function (max, el) {\n      return el > max ? el : max;\n    }, 0);\n    return Array.from(_extends({}, arrayLike, {\n      length: maxIndex + 1\n    }));\n  }\n};\n\nvar FieldArrayInner = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(FieldArrayInner, _React$Component);\n\n  function FieldArrayInner(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _this.updateArrayField = function (fn, alterTouched, alterErrors) {\n      var _this$props = _this.props,\n          name = _this$props.name,\n          setFormikState = _this$props.formik.setFormikState;\n      setFormikState(function (prevState) {\n        var updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        var updateTouched = typeof alterTouched === 'function' ? alterTouched : fn; // values fn should be executed before updateErrors and updateTouched,\n        // otherwise it causes an error with unshift.\n\n        var values = setIn(prevState.values, name, fn(getIn(prevState.values, name)));\n        var fieldError = alterErrors ? updateErrors(getIn(prevState.errors, name)) : undefined;\n        var fieldTouched = alterTouched ? updateTouched(getIn(prevState.touched, name)) : undefined;\n\n        if (isEmptyArray(fieldError)) {\n          fieldError = undefined;\n        }\n\n        if (isEmptyArray(fieldTouched)) {\n          fieldTouched = undefined;\n        }\n\n        return _extends({}, prevState, {\n          values: values,\n          errors: alterErrors ? setIn(prevState.errors, name, fieldError) : prevState.errors,\n          touched: alterTouched ? setIn(prevState.touched, name, fieldTouched) : prevState.touched\n        });\n      });\n    };\n\n    _this.push = function (value) {\n      return _this.updateArrayField(function (arrayLike) {\n        return [].concat(copyArrayLike(arrayLike), [cloneDeep(value)]);\n      }, false, false);\n    };\n\n    _this.handlePush = function (value) {\n      return function () {\n        return _this.push(value);\n      };\n    };\n\n    _this.swap = function (indexA, indexB) {\n      return _this.updateArrayField(function (array) {\n        return swap(array, indexA, indexB);\n      }, true, true);\n    };\n\n    _this.handleSwap = function (indexA, indexB) {\n      return function () {\n        return _this.swap(indexA, indexB);\n      };\n    };\n\n    _this.move = function (from, to) {\n      return _this.updateArrayField(function (array) {\n        return move(array, from, to);\n      }, true, true);\n    };\n\n    _this.handleMove = function (from, to) {\n      return function () {\n        return _this.move(from, to);\n      };\n    };\n\n    _this.insert = function (index, value) {\n      return _this.updateArrayField(function (array) {\n        return insert(array, index, value);\n      }, function (array) {\n        return insert(array, index, null);\n      }, function (array) {\n        return insert(array, index, null);\n      });\n    };\n\n    _this.handleInsert = function (index, value) {\n      return function () {\n        return _this.insert(index, value);\n      };\n    };\n\n    _this.replace = function (index, value) {\n      return _this.updateArrayField(function (array) {\n        return replace(array, index, value);\n      }, false, false);\n    };\n\n    _this.handleReplace = function (index, value) {\n      return function () {\n        return _this.replace(index, value);\n      };\n    };\n\n    _this.unshift = function (value) {\n      var length = -1;\n\n      _this.updateArrayField(function (array) {\n        var arr = array ? [value].concat(array) : [value];\n\n        if (length < 0) {\n          length = arr.length;\n        }\n\n        return arr;\n      }, function (array) {\n        var arr = array ? [null].concat(array) : [null];\n\n        if (length < 0) {\n          length = arr.length;\n        }\n\n        return arr;\n      }, function (array) {\n        var arr = array ? [null].concat(array) : [null];\n\n        if (length < 0) {\n          length = arr.length;\n        }\n\n        return arr;\n      });\n\n      return length;\n    };\n\n    _this.handleUnshift = function (value) {\n      return function () {\n        return _this.unshift(value);\n      };\n    };\n\n    _this.handleRemove = function (index) {\n      return function () {\n        return _this.remove(index);\n      };\n    };\n\n    _this.handlePop = function () {\n      return function () {\n        return _this.pop();\n      };\n    }; // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n\n\n    _this.remove = _this.remove.bind(_assertThisInitialized(_this));\n    _this.pop = _this.pop.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = FieldArrayInner.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (!isEqual(getIn(prevProps.formik.values, prevProps.name), getIn(this.props.formik.values, this.props.name)) && this.props.formik.validateOnChange) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  };\n\n  _proto.remove = function remove(index) {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    var result;\n    this.updateArrayField( // so this gets call 3 times\n    function (array) {\n      var copy = array ? copyArrayLike(array) : [];\n\n      if (!result) {\n        result = copy[index];\n      }\n\n      if (isFunction(copy.splice)) {\n        copy.splice(index, 1);\n      }\n\n      return copy;\n    }, true, true);\n    return result;\n  };\n\n  _proto.pop = function pop() {\n    // Remove relevant pieces of `touched` and `errors` too!\n    var result;\n    this.updateArrayField( // so this gets call 3 times\n    function (array) {\n      var tmp = array;\n\n      if (!result) {\n        result = tmp && tmp.pop && tmp.pop();\n      }\n\n      return tmp;\n    }, true, true);\n    return result;\n  };\n\n  _proto.render = function render() {\n    var arrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove\n    };\n\n    var _this$props2 = this.props,\n        component = _this$props2.component,\n        render = _this$props2.render,\n        children = _this$props2.children,\n        name = _this$props2.name,\n        _this$props2$formik = _this$props2.formik,\n        restOfFormik = _objectWithoutPropertiesLoose(_this$props2$formik, [\"validate\", \"validationSchema\"]);\n\n    var props = _extends({}, arrayHelpers, {\n      form: restOfFormik,\n      name: name\n    });\n\n    return component ? createElement(component, props) : render ? render(props) : children // children come last, always called\n    ? typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? Children.only(children) : null : null;\n  };\n\n  return FieldArrayInner;\n}(Component);\n\nFieldArrayInner.defaultProps = {\n  validateOnChange: true\n};\nvar FieldArray = /*#__PURE__*/connect(FieldArrayInner);\n\nvar ErrorMessageImpl = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ErrorMessageImpl, _React$Component);\n\n  function ErrorMessageImpl() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = ErrorMessageImpl.prototype;\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {\n    if (getIn(this.props.formik.errors, this.props.name) !== getIn(props.formik.errors, this.props.name) || getIn(this.props.formik.touched, this.props.name) !== getIn(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        component = _this$props.component,\n        formik = _this$props.formik,\n        render = _this$props.render,\n        children = _this$props.children,\n        name = _this$props.name,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"formik\", \"render\", \"children\", \"name\"]);\n\n    var touch = getIn(formik.touched, name);\n    var error = getIn(formik.errors, name);\n    return !!touch && !!error ? render ? isFunction(render) ? render(error) : null : children ? isFunction(children) ? children(error) : null : component ? createElement(component, rest, error) : error : null;\n  };\n\n  return ErrorMessageImpl;\n}(Component);\n\nvar ErrorMessage = /*#__PURE__*/connect(ErrorMessageImpl);\n/**\r\n * Custom Field component for quickly hooking into Formik\r\n * context and wiring up forms.\r\n */\n\nvar FastFieldInner = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(FastFieldInner, _React$Component);\n\n  function FastFieldInner(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    var render = props.render,\n        children = props.children,\n        component = props.component,\n        is = props.as,\n        name = props.name;\n    !!render ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={\" + name + \"}>{props => ...}</FastField> instead.\") : invariant(false) : void 0;\n    !!(component && render) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored') : invariant(false) : void 0;\n    !!(is && children && isFunction(children)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.') : invariant(false) : void 0;\n    !!(component && children && isFunction(children)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.') : invariant(false) : void 0;\n    !!(render && children && !isEmptyChildren(children)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored') : invariant(false) : void 0;\n    return _this;\n  }\n\n  var _proto = FastFieldInner.prototype;\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (props.name !== this.props.name || getIn(props.formik.values, this.props.name) !== getIn(this.props.formik.values, this.props.name) || getIn(props.formik.errors, this.props.name) !== getIn(this.props.formik.errors, this.props.name) || getIn(props.formik.touched, this.props.name) !== getIn(this.props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || props.formik.isSubmitting !== this.props.formik.isSubmitting) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate\n    });\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        name = _this$props.name,\n        render = _this$props.render,\n        is = _this$props.as,\n        children = _this$props.children,\n        component = _this$props.component,\n        formik = _this$props.formik,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"validate\", \"name\", \"render\", \"as\", \"children\", \"component\", \"shouldUpdate\", \"formik\"]);\n\n    var restOfFormik = _objectWithoutPropertiesLoose(formik, [\"validate\", \"validationSchema\"]);\n\n    var field = {\n      value: props.type === 'radio' || props.type === 'checkbox' ? props.value // React uses checked={} for these inputs\n      : getIn(formik.values, name),\n      name: name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur\n    };\n    var meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name)\n    };\n    var bag = {\n      field: field,\n      meta: meta,\n      form: restOfFormik\n    };\n\n    if (render) {\n      return render(bag);\n    }\n\n    if (isFunction(children)) {\n      return children(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        var innerRef = props.innerRef,\n            rest = _objectWithoutPropertiesLoose(props, [\"innerRef\"]);\n\n        return createElement(component, _extends({\n          ref: innerRef\n        }, field, {}, rest), children);\n      } // We don't pass `meta` for backwards compat\n\n\n      return createElement(component, _extends({\n        field: field,\n        form: formik\n      }, props), children);\n    } // default to input here so we can check for both `as` and `children` above\n\n\n    var asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      var _innerRef = props.innerRef,\n          _rest = _objectWithoutPropertiesLoose(props, [\"innerRef\"]);\n\n      return createElement(asElement, _extends({\n        ref: _innerRef\n      }, field, {}, _rest), children);\n    }\n\n    return createElement(asElement, _extends({}, field, {}, props), children);\n  };\n\n  return FastFieldInner;\n}(Component);\n\nvar FastField = /*#__PURE__*/connect(FastFieldInner);\nexport { ErrorMessage, FastField, Field, FieldArray, Form, Formik, FormikConsumer, FormikContext, FormikProvider, connect, getActiveElement, getIn, insert, isEmptyArray, isEmptyChildren, isFunction, isInputEvent, isInteger, isNaN$1 as isNaN, isObject, isPromise, isString, move, prepareDataForValidation, replace, setIn, setNestedObjectValues, swap, useField, useFormik, useFormikContext, validateYupSchema, withFormik, yupToFormErrors };","map":{"version":3,"sources":["../src/utils.ts","../src/FormikContext.tsx","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/withFormik.tsx","../src/connect.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx","../src/FastField.tsx"],"names":["isEmptyArray","Array","value","isFunction","isObject","obj","isInteger","String","Math","Number","isString","Object","isNaN","isEmptyChildren","React","isPromise","isInputEvent","getActiveElement","doc","getIn","key","def","p","path","toPath","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","nextPath","setNestedObjectValues","object","visited","response","k","val","FormikContext","FormikProvider","FormikConsumer","useFormikContext","formik","msg","values","payload","touched","isEqual","state","errors","status","isSubmitting","isValidating","submitCount","emptyErrors","emptyTouched","useFormik","validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit","rest","props","initialValues","initialErrors","initialTouched","initialStatus","isMounted","fieldRegistry","dispatch","runValidateHandler","maybePromisedErrors","resolve","process","console","reject","runValidationSchema","validationSchema","schema","promise","field","validateYupSchema","err","yupToFormErrors","runSingleFieldLevelValidation","runFieldLevelValidations","fieldKeysWithValidation","fieldValidations","Promise","curr","prev","runAllValidations","fieldErrors","schemaErrors","validateErrors","combinedErrors","arrayMerge","validateFormWithLowPriority","useEventCallback","unstable_runWithPriority","type","validateFormWithHighPriority","resetForm","nextState","dispatchFn","maybePromisedOnReset","validateField","maybePromise","error","registerField","validate","unregisterField","setTouched","willValidate","shouldValidate","setErrors","setValues","setFieldError","setFieldValue","executeChange","eventOrTextValue","target","name","id","checked","outerHTML","options","multiple","maybePath","warnAboutMissingIdentifier","htmlContent","documentationAnchorLink","handlerName","parsed","parseFloat","getValueForCheckbox","getSelectedValues","handleChange","setFieldTouched","executeBlur","e","handleBlur","setFormikState","stateOrCb","setStatus","setSubmitting","submitForm","isInstanceOfError","isActuallyValid","promiseOrUndefined","executeSubmit","handleSubmit","activeElement","imperativeMethods","validateForm","handleReset","getFieldMeta","initialValue","initialError","getFieldHelpers","setValue","setError","getFieldProps","isAnObject","nameOrOptions","valueState","onChange","onBlur","valueProp","is","dirty","isValid","ctx","Formik","formikbag","component","children","render","innerRef","yupError","sync","context","validateData","prepareDataForValidation","abortEarly","data","isPlainObject","destination","source","cloneRequested","shouldClone","deepmerge","el","Boolean","currentArrayOfValues","isValueInArray","index","currentValue","useIsomorphicLayoutEffect","window","ref","args","useField","propsOrFieldName","fieldName","validateFn","Field","as","meta","legacyBag","form","asElement","Form","action","_action","onReset","withFormik","mapPropsToValues","vanillaProps","config","componentDisplayName","Component","C","renderFormComponent","hoistNonReactStatics","connect","Comp","move","copy","copyArrayLike","swap","a","insert","replace","maxIndex","parseInt","length","FieldArrayInner","componentDidUpdate","prevProps","updateErrors","updateTouched","prevState","fn","fieldError","alterErrors","fieldTouched","alterTouched","cloneDeep","arr","array","remove","result","pop","tmp","arrayHelpers","push","unshift","handlePush","handlePop","handleSwap","handleMove","handleInsert","handleReplace","handleUnshift","handleRemove","restOfFormik","FieldArray","ErrorMessageImpl","shouldComponentUpdate","touch","ErrorMessage","FastFieldInner","componentDidMount","componentWillUnmount","bag","FastField"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;IACaA,YAAY,GAAG,SAAfA,YAAe,CAAA,KAAA,EAAA;AAAA,SAC1BC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,KAAwBC,KAAK,CAALA,MAAAA,KADE,CAAA;AAAA,C;AAG5B;;;IACaC,UAAU,GAAG,SAAbA,UAAa,CAAA,GAAA,EAAA;AAAA,SACxB,OAAA,GAAA,KADwB,UAAA;AAAA,C;AAG1B;;;IACaC,QAAQ,GAAG,SAAXA,QAAW,CAAA,GAAA,EAAA;AAAA,SACtBC,GAAG,KAAHA,IAAAA,IAAgB,OAAA,GAAA,KADM,QAAA;AAAA,C;AAGxB;;;IACaC,SAAS,GAAG,SAAZA,SAAY,CAAA,GAAA,EAAA;AAAA,SACvBC,MAAM,CAACC,IAAI,CAAJA,KAAAA,CAAWC,MAAM,CAAxBF,GAAwB,CAAjBC,CAAD,CAAND,KADuB,GAAA;AAAA,C;AAGzB;;;IACaG,QAAQ,GAAG,SAAXA,QAAW,CAAA,GAAA,EAAA;AAAA,SACtBC,MAAM,CAANA,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAAA,GAAAA,MADsB,iBAAA;AAAA,C;AAGxB;AACA;;;IACaC,OAAK,GAAG,SAARA,KAAQ,CAAA,GAAA,EAAA;AAAA,SAAuBP,GAAG,KAA1B,GAAA;AAAA,C;AAErB;;;IACaQ,eAAe,GAAG,SAAlBA,eAAkB,CAAA,QAAA,EAAA;AAAA,SAC7BC,QAAAA,CAAAA,KAAAA,CAAAA,QAAAA,MAD6B,CAAA;AAAA,C;AAG/B;;;IACaC,SAAS,GAAG,SAAZA,SAAY,CAAA,KAAA,EAAA;AAAA,SACvBX,QAAQ,CAARA,KAAQ,CAARA,IAAmBD,UAAU,CAACD,KAAK,CADZ,IACM,CADN;AAAA,C;AAGzB;;;IACac,YAAY,GAAG,SAAfA,YAAe,CAAA,KAAA,EAAA;AAAA,SAC1Bd,KAAK,IAAIE,QAAQ,CAAjBF,KAAiB,CAAjBA,IAA4BE,QAAQ,CAACF,KAAK,CADhB,MACU,CADV;AAAA,C;AAG5B;;;;;;;;;;;;;SAWgBe,gB,CAAiBC,G,EAAAA;AAC/BA,EAAAA,GAAG,GAAGA,GAAG,KAAK,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAdA,SAAS,CAATA;;AACA,MAAI,OAAA,GAAA,KAAJ,WAAA,EAAgC;AAC9B,WAAA,IAAA;AACD;;AACD,MAAI;AACF,WAAOA,GAAG,CAAHA,aAAAA,IAAqBA,GAAG,CAA/B,IAAA;AADF,GAAA,CAEE,OAAA,CAAA,EAAU;AACV,WAAOA,GAAG,CAAV,IAAA;AACD;AACF;AAED;;;;;SAGgBC,K,CACdd,G,EACAe,G,EACAC,G,EACAC,C,EAAAA;MAAAA,CAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,CAAAA,GAAY,CAAZA;;;AAEA,MAAMC,IAAI,GAAGC,MAAM,CAAnB,GAAmB,CAAnB;;AACA,SAAOnB,GAAG,IAAIiB,CAAC,GAAGC,IAAI,CAAtB,MAAA,EAA+B;AAC7BlB,IAAAA,GAAG,GAAGA,GAAG,CAACkB,IAAI,CAACD,CAAfjB,EAAc,CAAL,CAATA;AACD;;AACD,SAAOA,GAAG,KAAHA,SAAAA,GAAAA,GAAAA,GAAP,GAAA;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;SAwBgBoB,K,CAAMpB,G,EAAUkB,I,EAAcrB,K,EAAAA;AAC5C,MAAIwB,GAAG,GAAQC,KAAK,CAApB,GAAoB,CAApB,CAD4CzB,CAC5C;;AACA,MAAI0B,MAAM,GAAV,GAAA;AACA,MAAIC,CAAC,GAAL,CAAA;AACA,MAAIC,SAAS,GAAGN,MAAM,CAAtB,IAAsB,CAAtB;;AAEA,SAAOK,CAAC,GAAGC,SAAS,CAATA,MAAAA,GAAX,CAAA,EAAiCD,CAAjC,EAAA,EAAsC;AACpC,QAAME,WAAW,GAAWD,SAAS,CAArC,CAAqC,CAArC;AACA,QAAIE,UAAU,GAAQb,KAAK,CAAA,GAAA,EAAMW,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAmBD,CAAC,GAArD,CAAiCC,CAAN,CAA3B;;AAEA,QAAIE,UAAU,KAAK5B,QAAQ,CAARA,UAAQ,CAARA,IAAwBH,KAAK,CAALA,OAAAA,CAA3C,UAA2CA,CAA7B,CAAd,EAAuE;AACrE2B,MAAAA,MAAM,GAAGA,MAAM,CAANA,WAAM,CAANA,GAAsBD,KAAK,CAApCC,UAAoC,CAApCA;AADF,KAAA,MAEO;AACL,UAAMK,QAAQ,GAAWH,SAAS,CAACD,CAAC,GAApC,CAAkC,CAAlC;AACAD,MAAAA,MAAM,GAAGA,MAAM,CAANA,WAAM,CAANA,GACPtB,SAAS,CAATA,QAAS,CAATA,IAAuBG,MAAM,CAANA,QAAM,CAANA,IAAvBH,CAAAA,GAAAA,EAAAA,GADFsB,EAAAA;AAED;AACF,GAjB2C1B,CAiB3C;;;AAGD,MAAI,CAAC2B,CAAC,KAADA,CAAAA,GAAAA,GAAAA,GAAD,MAAA,EAAyBC,SAAS,CAAlC,CAAkC,CAAlC,MAAJ,KAAA,EAAsD;AACpD,WAAA,GAAA;AACD;;AAED,MAAI5B,KAAK,KAAT,SAAA,EAAyB;AACvB,WAAO0B,MAAM,CAACE,SAAS,CAAvB,CAAuB,CAAV,CAAb;AADF,GAAA,MAEO;AACLF,IAAAA,MAAM,CAACE,SAAS,CAAhBF,CAAgB,CAAV,CAANA,GAAAA,KAAAA;AACD,GA5B2C1B,CA4B3C;AAGD;;;AACA,MAAI2B,CAAC,KAADA,CAAAA,IAAW3B,KAAK,KAApB,SAAA,EAAoC;AAClC,WAAOwB,GAAG,CAACI,SAAS,CAApB,CAAoB,CAAV,CAAV;AACD;;AAED,SAAA,GAAA;AACD;AAED;;;;;;;;;SAOgBI,qB,CACdC,M,EACAjC,K,EACAkC,O,EACAC,Q,EAAAA;MADAD,OAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,OAAAA,GAAe,IAAA,OAAA,EAAfA;;;MACAC,QAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,QAAAA,GAAgB,EAAhBA;;;AAEA,OAAA,IAAA,EAAA,GAAA,CAAA,EAAA,YAAA,GAAc1B,MAAM,CAANA,IAAAA,CAAd,MAAcA,CAAd,EAAA,EAAA,GAAA,YAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAmC;AAA9B,QAAI2B,CAAC,GAAA,YAAA,CAAL,EAAK,CAAL;AACH,QAAMC,GAAG,GAAGJ,MAAM,CAAlB,CAAkB,CAAlB;;AACA,QAAI/B,QAAQ,CAAZ,GAAY,CAAZ,EAAmB;AACjB,UAAI,CAACgC,OAAO,CAAPA,GAAAA,CAAL,GAAKA,CAAL,EAAuB;AACrBA,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,EADqB,IACrBA,EADqB,CAAA;AAGrB;AACA;;AACAC,QAAAA,QAAQ,CAARA,CAAQ,CAARA,GAAcpC,KAAK,CAALA,OAAAA,CAAAA,GAAAA,IAAAA,EAAAA,GAAdoC,EAAAA;AACAH,QAAAA,qBAAqB,CAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAsBG,QAAQ,CAAnDH,CAAmD,CAA9B,CAArBA;AACD;AARH,KAAA,MASO;AACLG,MAAAA,QAAQ,CAARA,CAAQ,CAARA,GAAAA,KAAAA;AACD;AACF;;AAED,SAAA,QAAA;AACD;;IC1KYG,aAAa,GAAA,aAAG1B,aAAAA,CAAtB,SAAsBA,C;AAG7B,IAAa2B,cAAc,GAAGD,aAAa,CAApC,QAAP;AACA,IAAaE,cAAc,GAAGF,aAAa,CAApC,QAAP;;AAEA,SAAgBG,gBAAhB,GAAgBA;AACd,MAAMC,MAAM,GAAG9B,UAAAA,CAAf,aAAeA,CAAf;AAEA,GACE,CAAC,CADH,MAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,iHAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,SAAA,MAAA;AACD;;ACmCD,SAAA,aAAA,CAAA,KAAA,EAAA,GAAA,EAAA;AAIE,UAAQ+B,GAAG,CAAX,IAAA;AACE,SAAA,YAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBC,QAAAA,MAAM,EAAED,GAAG,CAACE;AAA/B,OAAA,CAAA;;AACF,SAAA,aAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBC,QAAAA,OAAO,EAAEH,GAAG,CAACE;AAAhC,OAAA,CAAA;;AACF,SAAA,YAAA;AACE,UAAIE,OAAO,CAACC,KAAK,CAAN,MAAA,EAAeL,GAAG,CAA7B,OAAW,CAAX,EAAwC;AACtC,eAAA,KAAA;AACD;;AAED,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBM,QAAAA,MAAM,EAAEN,GAAG,CAACE;AAA/B,OAAA,CAAA;;AACF,SAAA,YAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBK,QAAAA,MAAM,EAAEP,GAAG,CAACE;AAA/B,OAAA,CAAA;;AACF,SAAA,kBAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBM,QAAAA,YAAY,EAAER,GAAG,CAACE;AAArC,OAAA,CAAA;;AACF,SAAA,kBAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAmBO,QAAAA,YAAY,EAAET,GAAG,CAACE;AAArC,OAAA,CAAA;;AACF,SAAA,iBAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEED,QAAAA,MAAM,EAAErB,KAAK,CAACyB,KAAK,CAAN,MAAA,EAAeL,GAAG,CAAHA,OAAAA,CAAf,KAAA,EAAkCA,GAAG,CAAHA,OAAAA,CAAlC,KAAA;AAFf,OAAA,CAAA;;AAIF,SAAA,mBAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEG,QAAAA,OAAO,EAAEvB,KAAK,CAACyB,KAAK,CAAN,OAAA,EAAgBL,GAAG,CAAHA,OAAAA,CAAhB,KAAA,EAAmCA,GAAG,CAAHA,OAAAA,CAAnC,KAAA;AAFhB,OAAA,CAAA;;AAIF,SAAA,iBAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEM,QAAAA,MAAM,EAAE1B,KAAK,CAACyB,KAAK,CAAN,MAAA,EAAeL,GAAG,CAAHA,OAAAA,CAAf,KAAA,EAAkCA,GAAG,CAAHA,OAAAA,CAAlC,KAAA;AAFf,OAAA,CAAA;;AAIF,SAAA,YAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAsBA,GAAG,CAAzB,OAAA,CAAA;;AACF,SAAA,kBAAA;AACE,aAAOA,GAAG,CAAHA,OAAAA,CAAP,KAAOA,CAAP;;AACF,SAAA,gBAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEG,QAAAA,OAAO,EAAEd,qBAAqB,CAC5BgB,KAAK,CADuB,MAAA,EAFhC,IAEgC,CAFhC;AAMEG,QAAAA,YAAY,EANd,IAAA;AAOEE,QAAAA,WAAW,EAAEL,KAAK,CAALA,WAAAA,GAAoB;AAPnC,OAAA,CAAA;;AASF,SAAA,gBAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEG,QAAAA,YAAY,EAAE;AAFhB,OAAA,CAAA;;AAIF,SAAA,gBAAA;AACE,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEA,QAAAA,YAAY,EAAE;AAFhB,OAAA,CAAA;;AAIF;AACE,aAAA,KAAA;AAzDJ;AA2DD,C,CAAA;;;AAGD,IAAMG,WAAW,GAAjB,EAAA;AACA,IAAMC,YAAY,GAAlB,EAAA;;AAUA,SAAgBC,SAAhB,CAAgBA,IAAhB,EAAgBA;mCACdC,gB;MAAAA,gBAAAA,GAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAmB,IAAnBA,GAAmB,qB;iCACnBC,c;MAAAA,cAAAA,GAAAA,mBAAAA,KAAAA,KAAAA,CAAAA,GAAiB,IAAjBA,GAAiB,mB;kCACjBC,e;MAAAA,eAAAA,GAAAA,oBAAAA,KAAAA,KAAAA,CAAAA,GAAkB,KAAlBA,GAAkB,oB;MAClBC,cAAAA,GAAAA,IAAAA,CAAAA,c;mCACAC,kB;MAAAA,kBAAAA,GAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAqB,KAArBA,GAAqB,qB;MACrBC,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACGC,IAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,kBAAAA,EAAAA,gBAAAA,EAAAA,iBAAAA,EAAAA,gBAAAA,EAAAA,oBAAAA,EAAAA,UAAAA,CAAAA,C;;AAEH,MAAMC,KAAK,GAAA,QAAA,CAAA;AACTP,IAAAA,gBAAgB,EADP,gBAAA;AAETC,IAAAA,cAAc,EAFL,cAAA;AAGTC,IAAAA,eAAe,EAHN,eAAA;AAITG,IAAAA,QAAQ,EAARA;AAJS,GAAA,EAAX,IAAW,CAAX;;AAOA,MAAMG,aAAa,GAAGrD,MAAAA,CAAaoD,KAAK,CAAxC,aAAsBpD,CAAtB;AACA,MAAMsD,aAAa,GAAGtD,MAAAA,CAAaoD,KAAK,CAALA,aAAAA,IAAnC,WAAsBpD,CAAtB;AACA,MAAMuD,cAAc,GAAGvD,MAAAA,CAAaoD,KAAK,CAALA,cAAAA,IAApC,YAAuBpD,CAAvB;AACA,MAAMwD,aAAa,GAAGxD,MAAAA,CAAaoD,KAAK,CAAxC,aAAsBpD,CAAtB;AACA,MAAMyD,SAAS,GAAGzD,MAAAA,CAAlB,KAAkBA,CAAlB;AACA,MAAM0D,aAAa,GAAG1D,MAAAA,CAAtB,EAAsBA,CAAtB;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;AACX;AACAA,IAAAA,SAAAA,CAAgB,YAAA;AACd,QACE,OAAA,cAAA,KADF,WAAA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,2IAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA,CADc,CACd;AADFA,KAAAA,EAAAA,EAAAA,CAAAA;AAOD;;AAEDA,EAAAA,SAAAA,CAAgB,YAAA;AACdyD,IAAAA,SAAS,CAATA,OAAAA,GAAAA,IAAAA;AAEA,WAAO,YAAA;AACLA,MAAAA,SAAS,CAATA,OAAAA,GAAAA,KAAAA;AADF,KAAA;AAHFzD,GAAAA,EAAAA,EAAAA,CAAAA;;0BAQ0B,UAAA,CAAA,aAAA,EAET;AACfgC,IAAAA,MAAM,EAAEoB,KAAK,CADE,aAAA;AAEff,IAAAA,MAAM,EAAEe,KAAK,CAALA,aAAAA,IAFO,WAAA;AAGflB,IAAAA,OAAO,EAAEkB,KAAK,CAALA,cAAAA,IAHM,YAAA;AAIfd,IAAAA,MAAM,EAAEc,KAAK,CAJE,aAAA;AAKfb,IAAAA,YAAY,EALG,KAAA;AAMfC,IAAAA,YAAY,EANG,KAAA;AAOfC,IAAAA,WAAW,EAAE;AAPE,GAFS,C;MAAnBL,KAAAA,GAAAA,iBAAAA,CAAAA,CAAAA,C;MAAOuB,QAAAA,GAAAA,iBAAAA,CAAAA,CAAAA,C;;AAYd,MAAMC,kBAAkB,GAAG,WAAA,CACzB,UAAA,MAAA,EAAA,KAAA,EAAA;AACE,WAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAA;AACjB,UAAMC,mBAAmB,GAAIT,KAAK,CAALA,QAAAA,CAAAA,MAAAA,EAA7B,KAA6BA,CAA7B;;AACA,UAAIS,mBAAmB,IAAvB,IAAA,EAAiC;AAC/B;AACAC,QAAAA,OAAO,CAAPA,WAAO,CAAPA;AAFF,OAAA,MAGO,IAAI7D,SAAS,CAAb,mBAAa,CAAb,EAAoC;AACxC4D,QAAAA,mBAAoC,CAApCA,IAAAA,CACC,UAAA,MAAA,EAAM;AACJC,UAAAA,OAAO,CAACzB,MAAM,IAAdyB,WAAO,CAAPA;AAFHD,SAAAA,EAIC,UAAA,eAAA,EAAe;AACb,cAAIE,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzCC,YAAAA,OAAO,CAAPA,IAAAA,CAAAA,iFAAAA,EAAAA,eAAAA;AAID;;AAEDC,UAAAA,MAAM,CAANA,eAAM,CAANA;AAZHJ,SAAAA;AADI,OAAA,MAgBA;AACLC,QAAAA,OAAO,CAAPA,mBAAO,CAAPA;AACD;AAvBH,KAAO,CAAP;AAFuB,GAAA,EA4BzB,CAACV,KAAK,CA5BR,QA4BE,CA5ByB,CAA3B;AA+BA;;;;AAGA,MAAMc,mBAAmB,GAAG,WAAA,CAC1B,UAAA,MAAA,EAAA,KAAA,EAAA;AACE,QAAMC,gBAAgB,GAAGf,KAAK,CAA9B,gBAAA;AACA,QAAMgB,MAAM,GAAG/E,UAAU,CAAVA,gBAAU,CAAVA,GACX8E,gBAAgB,CADL9E,KACK,CADLA,GAAf,gBAAA;AAGA,QAAMgF,OAAO,GACXC,KAAK,IAAIF,MAAM,CAAfE,UAAAA,GACIF,MAAM,CAANA,UAAAA,CAAAA,KAAAA,EADJE,MACIF,CADJE,GAEIC,iBAAiB,CAAA,MAAA,EAHvB,MAGuB,CAHvB;AAIA,WAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAA;AACjBF,MAAAA,OAAO,CAAPA,IAAAA,CACE,YAAA;AACEP,QAAAA,OAAO,CAAPA,WAAO,CAAPA;AAFJO,OAAAA,EAIE,UAAA,GAAA,EAAA;AACE;AACA;AACA;AACA;AACA,YAAIG,GAAG,CAAHA,IAAAA,KAAJ,iBAAA,EAAoC;AAClCV,UAAAA,OAAO,CAACW,eAAe,CAAvBX,GAAuB,CAAhB,CAAPA;AADF,SAAA,MAEO;AACL;AACA,cAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzCC,YAAAA,OAAO,CAAPA,IAAAA,CAAAA,yFAAAA,EAAAA,GAAAA;AAID;;AAEDC,UAAAA,MAAM,CAANA,GAAM,CAANA;AACD;AArBLI,OAAAA;AADF,KAAO,CAAP;AAVwB,GAAA,EAqC1B,CAACjB,KAAK,CArCR,gBAqCE,CArC0B,CAA5B;AAwCA,MAAMsB,6BAA6B,GAAG,WAAA,CACpC,UAAA,KAAA,EAAA,KAAA,EAAA;AACE,WAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAO;AAAA,aACxBZ,OAAO,CAACJ,aAAa,CAAbA,OAAAA,CAAAA,KAAAA,EAAAA,QAAAA,CADgB,KAChBA,CAAD,CADiB;AAA1B,KAAO,CAAP;AAFkC,GAAA,EAAtC,EAAsC,CAAtC;AASA,MAAMiB,wBAAwB,GAAG,WAAA,CAC/B,UAAA,MAAA,EAAA;AACE,QAAMC,uBAAuB,GAAa,MAAM,CAAN,IAAA,CACxClB,aAAa,CAD2B,OAAA,EAAA,MAAA,CAEjC,UAAA,CAAA,EAAC;AAAA,aAAIrE,UAAU,CAACqE,aAAa,CAAbA,OAAAA,CAAAA,CAAAA,EAAf,QAAc,CAAd;AAFV,KAA0C,CAA1C,CADF,CACE;;AAKA,QAAMmB,gBAAgB,GACpB,uBAAuB,CAAvB,MAAA,GAAA,CAAA,GACI,uBAAuB,CAAvB,GAAA,CAA4B,UAAA,CAAA,EAAC;AAAA,aAC3BH,6BAA6B,CAAA,CAAA,EAAIrE,KAAK,CAAA,MAAA,EADX,CACW,CAAT,CADF;AADjC,KACI,CADJ,GAII,CAACyE,OAAO,CAAPA,OAAAA,CALP,iCAKOA,CAAD,CALN,CANF,CAME;;AAOA,WAAO,OAAO,CAAP,GAAA,CAAA,gBAAA,EAAA,IAAA,CAAmC,UAAA,eAAA,EAAA;AAAA,aACxC,eAAe,CAAf,MAAA,CAAuB,UAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA;AACrB,YAAIC,IAAI,KAAR,iCAAA,EAAgD;AAC9C,iBAAA,IAAA;AACD;;AACD,YAAA,IAAA,EAAU;AACRC,UAAAA,IAAI,GAAGrE,KAAK,CAAA,IAAA,EAAOiE,uBAAuB,CAA9B,KAA8B,CAA9B,EAAZI,IAAY,CAAZA;AACD;;AACD,eAAA,IAAA;AAPF,OAAA,EADwC,EACxC,CADwC;AAA1C,KAAO,CAAP;AAd6B,GAAA,EA0B/B,CA1BF,6BA0BE,CA1B+B,CAAjC,CAxIcpC,CAwId;;AA8BA,MAAMqC,iBAAiB,GAAG,WAAA,CACxB,UAAA,MAAA,EAAA;AACE,WAAO,OAAO,CAAP,GAAA,CAAY,CACjBN,wBAAwB,CADP,MACO,CADP,EAEjBvB,KAAK,CAALA,gBAAAA,GAAyBc,mBAAmB,CAA5Cd,MAA4C,CAA5CA,GAFiB,EAAA,EAGjBA,KAAK,CAALA,QAAAA,GAAiBQ,kBAAkB,CAAnCR,MAAmC,CAAnCA,GAHK,EAAY,CAAZ,EAAA,IAAA,CAIC,UAAA,KAAA,EAAA;UAAE8B,WAAAA,GAAAA,KAAAA,CAAAA,CAAAA,C;UAAaC,YAAAA,GAAAA,KAAAA,CAAAA,CAAAA,C;UAAcC,cAAAA,GAAAA,KAAAA,CAAAA,CAAAA,C;AACnC,UAAMC,cAAc,GAAG,SAAS,CAAT,GAAA,CACrB,CAAA,WAAA,EAAA,YAAA,EADqB,cACrB,CADqB,EAErB;AAAEC,QAAAA,UAAU,EAAVA;AAAF,OAFqB,CAAvB;AAIA,aAAA,cAAA;AATF,KAAO,CAAP;AAFsB,GAAA,EAcxB,CACElC,KAAK,CADP,QAAA,EAEEA,KAAK,CAFP,gBAAA,EAAA,wBAAA,EAAA,kBAAA,EAdF,mBAcE,CAdwB,CAA1B,CAtKcR,CAsKd;AAwBA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM2C,2BAA2B,GAAGC,gBAAgB,CAClD,UAAA,MAAA,EAAA;QAACxD,MAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,MAAAA,MAAAA,GAAiBI,KAAK,CAACJ,MAAvBA;;;AACC,WAAOyD,wBAAwB,CAAA,oBAAA,EAAuB,YAAA;AACpD,aAAO,iBAAiB,CAAjB,MAAiB,CAAjB,CAAA,IAAA,CACC,UAAA,cAAA,EAAc;AAClB,YAAI,CAAC,CAAChC,SAAS,CAAf,OAAA,EAAyB;AACvBE,UAAAA,QAAQ,CAAC;AAAE+B,YAAAA,IAAI,EAAN,YAAA;AAAsBzD,YAAAA,OAAO,EAAEoD;AAA/B,WAAD,CAAR1B;AACD;;AACD,eAAA,cAAA;AALG,OAAA,EAAA,OAAA,EAOE,UAAA,eAAA,EAAe;AACpB,YAAII,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzC;AACAC,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,8FAAAA,EAAAA,eAAAA;AAID;AAdL,OAAO,CAAP;AADF,KAA+B,CAA/B;AAFJ,GAAoD,CAApD,CApMcpB,CAoMd;;AAwBA,MAAM+C,4BAA4B,GAAGH,gBAAgB,CACnD,UAAA,MAAA,EAAA;QAACxD,MAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,MAAAA,MAAAA,GAAiBI,KAAK,CAACJ,MAAvBA;;;AACC2B,IAAAA,QAAQ,CAAC;AAAE+B,MAAAA,IAAI,EAAN,kBAAA;AAA4BzD,MAAAA,OAAO,EAAE;AAArC,KAAD,CAAR0B;AACA,WAAO,iBAAiB,CAAjB,MAAiB,CAAjB,CAAA,IAAA,CAA+B,UAAA,cAAA,EAAc;AAClD,UAAI,CAAC,CAACF,SAAS,CAAf,OAAA,EAAyB;AACvBE,QAAAA,QAAQ,CAAC;AAAE+B,UAAAA,IAAI,EAAN,kBAAA;AAA4BzD,UAAAA,OAAO,EAAE;AAArC,SAAD,CAAR0B;;AACA,YAAI,CAACxB,OAAO,CAACC,KAAK,CAAN,MAAA,EAAZ,cAAY,CAAZ,EAA4C;AAC1CuB,UAAAA,QAAQ,CAAC;AAAE+B,YAAAA,IAAI,EAAN,YAAA;AAAsBzD,YAAAA,OAAO,EAAEoD;AAA/B,WAAD,CAAR1B;AACD;AACF;;AACD,aAAA,cAAA;AAPF,KAAO,CAAP;AAHJ,GAAqD,CAArD;AAeA,MAAMiC,SAAS,GAAG,WAAA,CAChB,UAAA,SAAA,EAAA;AACE,QAAM5D,MAAM,GACV6D,SAAS,IAAIA,SAAS,CAAtBA,MAAAA,GACIA,SAAS,CADbA,MAAAA,GAEIxC,aAAa,CAHnB,OAAA;AAIA,QAAMhB,MAAM,GACVwD,SAAS,IAAIA,SAAS,CAAtBA,MAAAA,GACIA,SAAS,CADbA,MAAAA,GAEIvC,aAAa,CAAbA,OAAAA,GACAA,aAAa,CADbA,OAAAA,GAEAF,KAAK,CAALA,aAAAA,IALN,EAAA;AAMA,QAAMlB,OAAO,GACX2D,SAAS,IAAIA,SAAS,CAAtBA,OAAAA,GACIA,SAAS,CADbA,OAAAA,GAEItC,cAAc,CAAdA,OAAAA,GACAA,cAAc,CADdA,OAAAA,GAEAH,KAAK,CAALA,cAAAA,IALN,EAAA;AAMA,QAAMd,MAAM,GACVuD,SAAS,IAAIA,SAAS,CAAtBA,MAAAA,GACIA,SAAS,CADbA,MAAAA,GAEIrC,aAAa,CAAbA,OAAAA,GACAA,aAAa,CADbA,OAAAA,GAEAJ,KAAK,CALX,aAAA;AAMAC,IAAAA,aAAa,CAAbA,OAAAA,GAAAA,MAAAA;AACAC,IAAAA,aAAa,CAAbA,OAAAA,GAAAA,MAAAA;AACAC,IAAAA,cAAc,CAAdA,OAAAA,GAAAA,OAAAA;AACAC,IAAAA,aAAa,CAAbA,OAAAA,GAAAA,MAAAA;;AAEA,QAAMsC,UAAU,GAAG,SAAbA,UAAa,GAAA;AACjBnC,MAAAA,QAAQ,CAAC;AACP+B,QAAAA,IAAI,EADG,YAAA;AAEPzD,QAAAA,OAAO,EAAE;AACPM,UAAAA,YAAY,EAAE,CAAC,CAAD,SAAA,IAAe,CAAC,CAACsD,SAAS,CADjC,YAAA;AAEPxD,UAAAA,MAAM,EAFC,MAAA;AAGPH,UAAAA,OAAO,EAHA,OAAA;AAIPI,UAAAA,MAAM,EAJC,MAAA;AAKPN,UAAAA,MAAM,EALC,MAAA;AAMPQ,UAAAA,YAAY,EAAE,CAAC,CAAD,SAAA,IAAe,CAAC,CAACqD,SAAS,CANjC,YAAA;AAOPpD,UAAAA,WAAW,EACT,CAAC,CAAD,SAAA,IACA,CAAC,CAACoD,SAAS,CADX,WAAA,IAEA,OAAOA,SAAS,CAAhB,WAAA,KAFA,QAAA,GAGIA,SAAS,CAHb,WAAA,GAII;AAZC;AAFF,OAAD,CAARlC;AADF,KAAA;;AAoBA,QAAIP,KAAK,CAAT,OAAA,EAAmB;AACjB,UAAM2C,oBAAoB,GAAI3C,KAAK,CAALA,OAAAA,CAC5BhB,KAAK,CADuBgB,MAAAA,EAA9B,iBAA8BA,CAA9B;;AAKA,UAAInD,SAAS,CAAb,oBAAa,CAAb,EAAqC;AAClC8F,QAAAA,oBAAqC,CAArCA,IAAAA,CAAAA,UAAAA;AADH,OAAA,MAEO;AACLD,QAAAA,UAAU;AACX;AAVH,KAAA,MAWO;AACLA,MAAAA,UAAU;AACX;AA9Da,GAAA,EAgEhB,CAAC1C,KAAK,CAAN,aAAA,EAAsBA,KAAK,CAA3B,aAAA,EAA2CA,KAAK,CAhElD,cAgEE,CAhEgB,CAAlB;AAmEApD,EAAAA,SAAAA,CAAgB,YAAA;AACd,QACEyD,SAAS,CAATA,OAAAA,KAAAA,IAAAA,IACA,CAACtB,OAAO,CAACkB,aAAa,CAAd,OAAA,EAAwBD,KAAK,CAFvC,aAEU,CAFV,EAGE;AACAC,MAAAA,aAAa,CAAbA,OAAAA,GAAwBD,KAAK,CAA7BC,aAAAA;;AAEA,UAAA,kBAAA,EAAwB;AACtBuC,QAAAA,SAAS;AACV;;AAED,UAAA,eAAA,EAAqB;AACnBL,QAAAA,2BAA2B,CAAClC,aAAa,CAAzCkC,OAA2B,CAA3BA;AACD;AACF;AAdHvF,GAAAA,EAeG,CAAA,kBAAA,EAAqBoD,KAAK,CAA1B,aAAA,EAAA,SAAA,EAAA,eAAA,EAfHpD,2BAeG,CAfHA,CAAAA;AAiBAA,EAAAA,SAAAA,CAAgB,YAAA;AACd,QACEiD,kBAAkB,IAClBQ,SAAS,CAATA,OAAAA,KADAR,IAAAA,IAEA,CAACd,OAAO,CAACmB,aAAa,CAAd,OAAA,EAAwBF,KAAK,CAHvC,aAGU,CAHV,EAIE;AACAE,MAAAA,aAAa,CAAbA,OAAAA,GAAwBF,KAAK,CAALA,aAAAA,IAAxBE,WAAAA;AACAK,MAAAA,QAAQ,CAAC;AACP+B,QAAAA,IAAI,EADG,YAAA;AAEPzD,QAAAA,OAAO,EAAEmB,KAAK,CAALA,aAAAA,IAAuBV;AAFzB,OAAD,CAARiB;AAID;AAXH3D,GAAAA,EAYG,CAAA,kBAAA,EAAqBoD,KAAK,CAZ7BpD,aAYG,CAZHA,CAAAA;AAcAA,EAAAA,SAAAA,CAAgB,YAAA;AACd,QACEiD,kBAAkB,IAClBQ,SAAS,CAATA,OAAAA,KADAR,IAAAA,IAEA,CAACd,OAAO,CAACoB,cAAc,CAAf,OAAA,EAAyBH,KAAK,CAHxC,cAGU,CAHV,EAIE;AACAG,MAAAA,cAAc,CAAdA,OAAAA,GAAyBH,KAAK,CAALA,cAAAA,IAAzBG,YAAAA;AACAI,MAAAA,QAAQ,CAAC;AACP+B,QAAAA,IAAI,EADG,aAAA;AAEPzD,QAAAA,OAAO,EAAEmB,KAAK,CAALA,cAAAA,IAAwBT;AAF1B,OAAD,CAARgB;AAID;AAXH3D,GAAAA,EAYG,CAAA,kBAAA,EAAqBoD,KAAK,CAZ7BpD,cAYG,CAZHA,CAAAA;AAcAA,EAAAA,SAAAA,CAAgB,YAAA;AACd,QACEiD,kBAAkB,IAClBQ,SAAS,CAATA,OAAAA,KADAR,IAAAA,IAEA,CAACd,OAAO,CAACqB,aAAa,CAAd,OAAA,EAAwBJ,KAAK,CAHvC,aAGU,CAHV,EAIE;AACAI,MAAAA,aAAa,CAAbA,OAAAA,GAAwBJ,KAAK,CAA7BI,aAAAA;AACAG,MAAAA,QAAQ,CAAC;AACP+B,QAAAA,IAAI,EADG,YAAA;AAEPzD,QAAAA,OAAO,EAAEmB,KAAK,CAACI;AAFR,OAAD,CAARG;AAID;AAXH3D,GAAAA,EAYG,CAAA,kBAAA,EAAqBoD,KAAK,CAA1B,aAAA,EAA0CA,KAAK,CAZlDpD,cAYG,CAZHA,CAAAA;AAcA,MAAMgG,aAAa,GAAGR,gBAAgB,CAAC,UAAA,IAAA,EAAA;AACrC;AACA;AACA;AAEA,QAAInG,UAAU,CAACqE,aAAa,CAAbA,OAAAA,CAAAA,IAAAA,EAAf,QAAc,CAAd,EAAsD;AACpD,UAAMtE,KAAK,GAAGiB,KAAK,CAAC+B,KAAK,CAAN,MAAA,EAAnB,IAAmB,CAAnB;AACA,UAAM6D,YAAY,GAAGvC,aAAa,CAAbA,OAAAA,CAAAA,IAAAA,EAAAA,QAAAA,CAArB,KAAqBA,CAArB;;AACA,UAAIzD,SAAS,CAAb,YAAa,CAAb,EAA6B;AAC3B;AACA0D,QAAAA,QAAQ,CAAC;AAAE+B,UAAAA,IAAI,EAAN,kBAAA;AAA4BzD,UAAAA,OAAO,EAAE;AAArC,SAAD,CAAR0B;AACA,eAAO,YAAY,CAAZ,IAAA,CACC,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA;AADD,SAAA,EAAA,IAAA,CAEC,UAAA,KAAA,EAAA;AACJA,UAAAA,QAAQ,CAAC;AACP+B,YAAAA,IAAI,EADG,iBAAA;AAEPzD,YAAAA,OAAO,EAAE;AAAEqC,cAAAA,KAAK,EAAP,IAAA;AAAelF,cAAAA,KAAK,EAAE8G;AAAtB;AAFF,WAAD,CAARvC;AAIAA,UAAAA,QAAQ,CAAC;AAAE+B,YAAAA,IAAI,EAAN,kBAAA;AAA4BzD,YAAAA,OAAO,EAAE;AAArC,WAAD,CAAR0B;AAPJ,SAAO,CAAP;AAHF,OAAA,MAYO;AACLA,QAAAA,QAAQ,CAAC;AACP+B,UAAAA,IAAI,EADG,iBAAA;AAEPzD,UAAAA,OAAO,EAAE;AACPqC,YAAAA,KAAK,EADE,IAAA;AAEPlF,YAAAA,KAAK,EAAE6G;AAFA;AAFF,SAAD,CAARtC;AAOA,eAAOmB,OAAO,CAAPA,OAAAA,CAAP,YAAOA,CAAP;AACD;AAxBH,KAAA,MAyBO,IAAI1B,KAAK,CAAT,gBAAA,EAA4B;AACjCO,MAAAA,QAAQ,CAAC;AAAE+B,QAAAA,IAAI,EAAN,kBAAA;AAA4BzD,QAAAA,OAAO,EAAE;AAArC,OAAD,CAAR0B;AACA,aAAO,mBAAmB,CAACvB,KAAK,CAAN,MAAA,EAAnB,IAAmB,CAAnB,CAAA,IAAA,CACC,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA;AADD,OAAA,EAAA,IAAA,CAEC,UAAA,KAAA,EAAA;AACJuB,QAAAA,QAAQ,CAAC;AACP+B,UAAAA,IAAI,EADG,iBAAA;AAEPzD,UAAAA,OAAO,EAAE;AAAEqC,YAAAA,KAAK,EAAP,IAAA;AAAelF,YAAAA,KAAK,EAAE8G,KAAK,CAAA,IAAA;AAA3B;AAFF,SAAD,CAARvC;AAIAA,QAAAA,QAAQ,CAAC;AAAE+B,UAAAA,IAAI,EAAN,kBAAA;AAA4BzD,UAAAA,OAAO,EAAE;AAArC,SAAD,CAAR0B;AAPJ,OAAO,CAAP;AASD;;AAED,WAAOmB,OAAO,CAAd,OAAOA,EAAP;AA3CF,GAAsC,CAAtC;AA8CA,MAAMqB,aAAa,GAAG,WAAA,CAAkB,UAAA,IAAA,EAAA,KAAA,EAAA;QAAiBC,QAAAA,GAAAA,KAAAA,CAAAA,Q;AACvD1C,IAAAA,aAAa,CAAbA,OAAAA,CAAAA,IAAAA,IAA8B;AAC5B0C,MAAAA,QAAQ,EAARA;AAD4B,KAA9B1C;AADoB,GAAA,EAAtB,EAAsB,CAAtB;AAMA,MAAM2C,eAAe,GAAG,WAAA,CAAkB,UAAA,IAAA,EAAA;AACxC,WAAO3C,aAAa,CAAbA,OAAAA,CAAP,IAAOA,CAAP;AADsB,GAAA,EAAxB,EAAwB,CAAxB;AAIA,MAAM4C,UAAU,GAAGd,gBAAgB,CACjC,UAAA,OAAA,EAAA,cAAA,EAAA;AACE7B,IAAAA,QAAQ,CAAC;AAAE+B,MAAAA,IAAI,EAAN,aAAA;AAAuBzD,MAAAA,OAAO,EAAEC;AAAhC,KAAD,CAARyB;AACA,QAAM4C,YAAY,GAChBC,cAAc,KAAdA,SAAAA,GAAAA,cAAAA,GADF,cAAA;AAEA,WAAOD,YAAY,GACfhB,2BAA2B,CAACnD,KAAK,CADlB,MACY,CADZ,GAEf0C,OAAO,CAFX,OAEIA,EAFJ;AALJ,GAAmC,CAAnC;AAWA,MAAM2B,SAAS,GAAG,WAAA,CAAkB,UAAA,MAAA,EAAA;AAClC9C,IAAAA,QAAQ,CAAC;AAAE+B,MAAAA,IAAI,EAAN,YAAA;AAAsBzD,MAAAA,OAAO,EAAEI;AAA/B,KAAD,CAARsB;AADgB,GAAA,EAAlB,EAAkB,CAAlB;AAIA,MAAM+C,SAAS,GAAGlB,gBAAgB,CAChC,UAAA,MAAA,EAAA,cAAA,EAAA;AACE7B,IAAAA,QAAQ,CAAC;AAAE+B,MAAAA,IAAI,EAAN,YAAA;AAAsBzD,MAAAA,OAAO,EAAED;AAA/B,KAAD,CAAR2B;AACA,QAAM4C,YAAY,GAChBC,cAAc,KAAdA,SAAAA,GAAAA,gBAAAA,GADF,cAAA;AAEA,WAAOD,YAAY,GACfhB,2BAA2B,CADZ,MACY,CADZ,GAEfT,OAAO,CAFX,OAEIA,EAFJ;AALJ,GAAkC,CAAlC;AAWA,MAAM6B,aAAa,GAAG,WAAA,CACpB,UAAA,KAAA,EAAA,KAAA,EAAA;AACEhD,IAAAA,QAAQ,CAAC;AACP+B,MAAAA,IAAI,EADG,iBAAA;AAEPzD,MAAAA,OAAO,EAAE;AAAEqC,QAAAA,KAAK,EAAP,KAAA;AAASlF,QAAAA,KAAK,EAALA;AAAT;AAFF,KAAD,CAARuE;AAFkB,GAAA,EAAtB,EAAsB,CAAtB;AAUA,MAAMiD,aAAa,GAAGpB,gBAAgB,CACpC,UAAA,KAAA,EAAA,KAAA,EAAA,cAAA,EAAA;AACE7B,IAAAA,QAAQ,CAAC;AACP+B,MAAAA,IAAI,EADG,iBAAA;AAEPzD,MAAAA,OAAO,EAAE;AACPqC,QAAAA,KAAK,EADE,KAAA;AAEPlF,QAAAA,KAAK,EAALA;AAFO;AAFF,KAAD,CAARuE;AAOA,QAAM4C,YAAY,GAChBC,cAAc,KAAdA,SAAAA,GAAAA,gBAAAA,GADF,cAAA;AAEA,WAAOD,YAAY,GACfhB,2BAA2B,CAAC5E,KAAK,CAACyB,KAAK,CAAN,MAAA,EAAA,KAAA,EADlB,KACkB,CAAN,CADZ,GAEf0C,OAAO,CAFX,OAEIA,EAFJ;AAXJ,GAAsC,CAAtC;AAiBA,MAAM+B,aAAa,GAAG,WAAA,CACpB,UAAA,gBAAA,EAAA,SAAA,EAAA;AACE;AACA;AACA;AACA,QAAIvC,KAAK,GAAT,SAAA;AACA,QAAI7C,GAAG,GAAP,gBAAA;AACA,QAAA,MAAA,CANF,CAME;AAEA;;AACA,QAAI,CAAC7B,QAAQ,CAAb,gBAAa,CAAb,EAAiC;AAC/B;AACA;AACA,UAAKkH,gBAA2C,CAAhD,OAAA,EAA0D;AACvDA,QAAAA,gBAA2C,CAA3CA,OAAAA;AACF;;AACD,UAAMC,MAAM,GAAGD,gBAAgB,CAAhBA,MAAAA,GACVA,gBAA2C,CADjCA,MAAAA,GAEVA,gBAA2C,CAFhD,aAAA;AAN+B,UAW7BpB,IAX6B,GAmB3BqB,MAnB2B,CAAA,IAAA;AAAA,UAY7BC,IAZ6B,GAmB3BD,MAnB2B,CAAA,IAAA;AAAA,UAa7BE,EAb6B,GAmB3BF,MAnB2B,CAAA,EAAA;AAAA,UAc7B3H,KAd6B,GAmB3B2H,MAnB2B,CAAA,KAAA;AAAA,UAe7BG,OAf6B,GAmB3BH,MAnB2B,CAAA,OAAA;AAAA,UAgB7BI,SAhB6B,GAmB3BJ,MAnB2B,CAAA,SAAA;AAAA,UAiB7BK,OAjB6B,GAmB3BL,MAnB2B,CAAA,OAAA;AAAA,UAkB7BM,QAlB6B,GAmB3BN,MAnB2B,CAAA,QAAA;AAqB/BzC,MAAAA,KAAK,GAAGgD,SAAS,GAAA,SAAA,GAAeN,IAAI,GAAA,IAAA,GAApC1C,EAAAA;;AACA,UAAI,CAAA,KAAA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAJ,YAAA,EAAuB;AACrBiD,QAAAA,0BAA0B,CAAC;AACzBC,UAAAA,WAAW,EADc,SAAA;AAEzBC,UAAAA,uBAAuB,EAFE,0CAAA;AAGzBC,UAAAA,WAAW,EAAE;AAHY,SAAD,CAA1BH;AAKD;;AACD9F,MAAAA,GAAG,GAAG,eAAA,IAAA,CAAA,IAAA,KACAkG,MAAM,GAAGC,UAAU,CAApB,KAAoB,CAAnBD,EAA6B7H,KAAK,CAALA,MAAK,CAALA,GAAAA,EAAAA,GAD7B,MAAA,IAEF,WAAA,IAAA,CAAA,IAAA,EAAA;AAAA,QACA+H,mBAAmB,CAACxH,KAAK,CAAC+B,KAAK,CAAN,MAAA,EAAN,KAAM,CAAN,EAAA,OAAA,EADnB,KACmB,CADnB,GAEA,CAAC,CAAD,QAAA,CAAA;AAAA,QACA0F,iBAAiB,CADjB,OACiB,CADjB,GAJJrG,KAAAA;AAOD;;AAED,QAAA,KAAA,EAAW;AACT;AACAmF,MAAAA,aAAa,CAAA,KAAA,EAAbA,GAAa,CAAbA;AACD;AAnDiB,GAAA,EAqDpB,CAAA,aAAA,EAAgBxE,KAAK,CArDvB,MAqDE,CArDoB,CAAtB;AAwDA,MAAM2F,YAAY,GAAGvC,gBAAgB,CACnC,UAAA,WAAA,EAAA;AAGE,QAAI5F,QAAQ,CAAZ,WAAY,CAAZ,EAA2B;AACzB,aAAO,UAAA,KAAA,EAAK;AAAA,eAAIiH,aAAa,CAAA,KAAA,EAAjB,WAAiB,CAAjB;AAAZ,OAAA;AADF,KAAA,MAEO;AACLA,MAAAA,aAAa,CAAbA,WAAa,CAAbA;AACD;AARL,GAAqC,CAArC;AAYA,MAAMmB,eAAe,GAAGxC,gBAAgB,CACtC,UAAA,KAAA,EAAA,OAAA,EAAA,cAAA,EAAA;QAAgBtD,OAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,MAAAA,OAAAA,GAAmB,IAAnBA;;;AACdyB,IAAAA,QAAQ,CAAC;AACP+B,MAAAA,IAAI,EADG,mBAAA;AAEPzD,MAAAA,OAAO,EAAE;AACPqC,QAAAA,KAAK,EADE,KAAA;AAEPlF,QAAAA,KAAK,EAAE8C;AAFA;AAFF,KAAD,CAARyB;AAOA,QAAM4C,YAAY,GAChBC,cAAc,KAAdA,SAAAA,GAAAA,cAAAA,GADF,cAAA;AAEA,WAAOD,YAAY,GACfhB,2BAA2B,CAACnD,KAAK,CADlB,MACY,CADZ,GAEf0C,OAAO,CAFX,OAEIA,EAFJ;AAXJ,GAAwC,CAAxC;AAiBA,MAAMmD,WAAW,GAAG,WAAA,CAClB,UAAA,CAAA,EAAA,IAAA,EAAA;AACE,QAAIC,CAAC,CAAL,OAAA,EAAe;AACbA,MAAAA,CAAC,CAADA,OAAAA;AACD;;oBAC+BA,CAAC,CAACnB,M;QAA1BC,IAAAA,GAAAA,SAAAA,CAAAA,I;QAAMC,EAAAA,GAAAA,SAAAA,CAAAA,E;QAAIE,SAAAA,GAAAA,SAAAA,CAAAA,S;AAClB,QAAM7C,KAAK,GAAG7D,IAAI,GAAA,IAAA,GAAUuG,IAAI,GAAA,IAAA,GAAhC,EAAA;;AAEA,QAAI,CAAA,KAAA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAJ,YAAA,EAAuB;AACrBO,MAAAA,0BAA0B,CAAC;AACzBC,QAAAA,WAAW,EADc,SAAA;AAEzBC,QAAAA,uBAAuB,EAFE,wBAAA;AAGzBC,QAAAA,WAAW,EAAE;AAHY,OAAD,CAA1BH;AAKD;;AAEDS,IAAAA,eAAe,CAAA,KAAA,EAAfA,IAAe,CAAfA;AAhBgB,GAAA,EAkBlB,CAlBF,eAkBE,CAlBkB,CAApB;AAqBA,MAAMG,UAAU,GAAG3C,gBAAgB,CACjC,UAAA,aAAA,EAAA;AACE,QAAI5F,QAAQ,CAAZ,aAAY,CAAZ,EAA6B;AAC3B,aAAO,UAAA,KAAA,EAAK;AAAA,eAAIqI,WAAW,CAAA,KAAA,EAAf,aAAe,CAAf;AAAZ,OAAA;AADF,KAAA,MAEO;AACLA,MAAAA,WAAW,CAAXA,aAAW,CAAXA;AACD;AANL,GAAmC,CAAnC;AAUA,MAAMG,cAAc,GAAG,WAAA,CACrB,UAAA,SAAA,EAAA;AAKE,QAAI/I,UAAU,CAAd,SAAc,CAAd,EAA2B;AACzBsE,MAAAA,QAAQ,CAAC;AAAE+B,QAAAA,IAAI,EAAN,kBAAA;AAA4BzD,QAAAA,OAAO,EAAEoG;AAArC,OAAD,CAAR1E;AADF,KAAA,MAEO;AACLA,MAAAA,QAAQ,CAAC;AAAE+B,QAAAA,IAAI,EAAN,kBAAA;AAA4BzD,QAAAA,OAAO,EAAE,SAAA,OAAA,GAAA;AAAA,iBAAA,SAAA;AAAA;AAArC,OAAD,CAAR0B;AACD;AAVkB,GAAA,EAAvB,EAAuB,CAAvB;AAeA,MAAM2E,SAAS,GAAG,WAAA,CAAkB,UAAA,MAAA,EAAA;AAClC3E,IAAAA,QAAQ,CAAC;AAAE+B,MAAAA,IAAI,EAAN,YAAA;AAAsBzD,MAAAA,OAAO,EAAEK;AAA/B,KAAD,CAARqB;AADgB,GAAA,EAAlB,EAAkB,CAAlB;AAIA,MAAM4E,aAAa,GAAG,WAAA,CAAkB,UAAA,YAAA,EAAA;AACtC5E,IAAAA,QAAQ,CAAC;AAAE+B,MAAAA,IAAI,EAAN,kBAAA;AAA4BzD,MAAAA,OAAO,EAAEM;AAArC,KAAD,CAARoB;AADoB,GAAA,EAAtB,EAAsB,CAAtB;AAIA,MAAM6E,UAAU,GAAGhD,gBAAgB,CAAC,YAAA;AAClC7B,IAAAA,QAAQ,CAAC;AAAE+B,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR/B;AACA,WAAO,4BAA4B,GAA5B,IAAA,CACL,UAAA,cAAA,EAAA;AACE;AACA;AACA;AACA;AACA;AACA;AAEA,UAAM8E,iBAAiB,GAAGpD,cAAc,YAAxC,KAAA;AACA,UAAMqD,eAAe,GACnB,CAAA,iBAAA,IAAsB7I,MAAM,CAANA,IAAAA,CAAAA,cAAAA,EAAAA,MAAAA,KADxB,CAAA;;AAEA,UAAA,eAAA,EAAqB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAA,kBAAA;;AACA,YAAI;AACF8I,UAAAA,kBAAkB,GAAGC,aADnB,EACFD,CADE,CAAA;AAGF;;AACA,cAAIA,kBAAkB,KAAtB,SAAA,EAAsC;AACpC;AACD;AANH,SAAA,CAOE,OAAA,KAAA,EAAc;AACd,gBAAA,KAAA;AACD;;AAED,eAAO,OAAO,CAAP,OAAA,CAAA,kBAAA,EAAA,IAAA,CACC,UAAA,MAAA,EAAM;AACV,cAAI,CAAC,CAAClF,SAAS,CAAf,OAAA,EAAyB;AACvBE,YAAAA,QAAQ,CAAC;AAAE+B,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR/B;AACD;;AACD,iBAAA,MAAA;AALG,SAAA,EAAA,OAAA,EAOE,UAAA,OAAA,EAAO;AACZ,cAAI,CAAC,CAACF,SAAS,CAAf,OAAA,EAAyB;AACvBE,YAAAA,QAAQ,CAAC;AAAE+B,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR/B,CADuB,CAAA;AAGvB;;AACA,kBAAA,OAAA;AACD;AAbL,SAAO,CAAP;AAvBF,OAAA,MAsCO,IAAI,CAAC,CAACF,SAAS,CAAf,OAAA,EAAyB;AAC9B;AACAE,QAAAA,QAAQ,CAAC;AAAE+B,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR/B,CAF8B,CAAA;;AAI9B,YAAA,iBAAA,EAAuB;AACrB,gBAAA,cAAA;AACD;AACF;;AACD;AA1DJ,KAAO,CAAP;AAFF,GAAmC,CAAnC;AAiEA,MAAMkF,YAAY,GAAGrD,gBAAgB,CACnC,UAAA,CAAA,EAAA;AACE,QAAI0C,CAAC,IAAIA,CAAC,CAANA,cAAAA,IAAyB7I,UAAU,CAAC6I,CAAC,CAAzC,cAAuC,CAAvC,EAA2D;AACzDA,MAAAA,CAAC,CAADA,cAAAA;AACD;;AAED,QAAIA,CAAC,IAAIA,CAAC,CAANA,eAAAA,IAA0B7I,UAAU,CAAC6I,CAAC,CAA1C,eAAwC,CAAxC,EAA6D;AAC3DA,MAAAA,CAAC,CAADA,eAAAA;AACD,KAPH,CAOG;AAGD;AACA;AACA;;;AACA,QAAI,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,IAAW,OAAA,QAAA,KAAf,WAAA,EAAgD;AAC9C;AACA,UAAMY,aAAa,GAAG3I,gBAAtB,EAAA;;AACA,UACE2I,aAAa,KAAbA,IAAAA,IACAA,aAAa,YAFf,iBAAA,EAGE;AACA,UACEA,aAAa,CAAbA,UAAAA,IACEA,aAAa,CAAbA,UAAAA,CAAAA,YAAAA,CAFJ,MAEIA,CAFJ,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,yMAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKD;AACF;;AAEDN,IAAAA,UAAU,GAAVA,OAAU,CAAVA,CAAmB,UAAA,MAAA,EAAM;AACvBxE,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,0DAAAA,EAAAA,MAAAA;AADFwE,KAAAA;AA7BJ,GAAqC,CAArC;AAsCA,MAAMO,iBAAiB,GAA0B;AAC/CnD,IAAAA,SAAS,EADsC,SAAA;AAG/CoD,IAAAA,YAAY,EAHmC,4BAAA;AAI/ChD,IAAAA,aAAa,EAJkC,aAAA;AAK/CS,IAAAA,SAAS,EALsC,SAAA;AAM/CE,IAAAA,aAAa,EANkC,aAAA;AAO/CqB,IAAAA,eAAe,EAPgC,eAAA;AAQ/CpB,IAAAA,aAAa,EARkC,aAAA;AAS/C0B,IAAAA,SAAS,EATsC,SAAA;AAU/CC,IAAAA,aAAa,EAVkC,aAAA;AAW/CjC,IAAAA,UAAU,EAXqC,UAAA;AAY/CI,IAAAA,SAAS,EAZsC,SAAA;AAa/C0B,IAAAA,cAAc,EAbiC,cAAA;AAc/CI,IAAAA,UAAU,EAAVA;AAd+C,GAAjD;AAiBA,MAAMI,aAAa,GAAGpD,gBAAgB,CAAC,YAAA;AACrC,WAAOtC,QAAQ,CAACd,KAAK,CAAN,MAAA,EAAf,iBAAe,CAAf;AADF,GAAsC,CAAtC;AAIA,MAAM6G,WAAW,GAAGzD,gBAAgB,CAAC,UAAA,CAAA,EAAC;AACpC,QAAI0C,CAAC,IAAIA,CAAC,CAANA,cAAAA,IAAyB7I,UAAU,CAAC6I,CAAC,CAAzC,cAAuC,CAAvC,EAA2D;AACzDA,MAAAA,CAAC,CAADA,cAAAA;AACD;;AAED,QAAIA,CAAC,IAAIA,CAAC,CAANA,eAAAA,IAA0B7I,UAAU,CAAC6I,CAAC,CAA1C,eAAwC,CAAxC,EAA6D;AAC3DA,MAAAA,CAAC,CAADA,eAAAA;AACD;;AAEDtC,IAAAA,SAAS;AATX,GAAoC,CAApC;AAYA,MAAMsD,YAAY,GAAG,WAAA,CACnB,UAAA,IAAA,EAAA;AACE,WAAO;AACL9J,MAAAA,KAAK,EAAEiB,KAAK,CAAC+B,KAAK,CAAN,MAAA,EADP,IACO,CADP;AAEL8D,MAAAA,KAAK,EAAE7F,KAAK,CAAC+B,KAAK,CAAN,MAAA,EAFP,IAEO,CAFP;AAGLF,MAAAA,OAAO,EAAE,CAAC,CAAC7B,KAAK,CAAC+B,KAAK,CAAN,OAAA,EAHX,IAGW,CAHX;AAIL+G,MAAAA,YAAY,EAAE9I,KAAK,CAACgD,aAAa,CAAd,OAAA,EAJd,IAIc,CAJd;AAKLE,MAAAA,cAAc,EAAE,CAAC,CAAClD,KAAK,CAACkD,cAAc,CAAf,OAAA,EALlB,IAKkB,CALlB;AAML6F,MAAAA,YAAY,EAAE/I,KAAK,CAACiD,aAAa,CAAd,OAAA,EAAA,IAAA;AANd,KAAP;AAFiB,GAAA,EAWnB,CAAClB,KAAK,CAAN,MAAA,EAAeA,KAAK,CAApB,OAAA,EAA8BA,KAAK,CAXrC,MAWE,CAXmB,CAArB;AAcA,MAAMiH,eAAe,GAAG,WAAA,CACtB,UAAA,IAAA,EAAA;AACE,WAAO;AACLC,MAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAA,EAAA,cAAA,EAAA;AAAA,eACR1C,aAAa,CAAA,IAAA,EAAA,KAAA,EADL,cACK,CADL;AADL,OAAA;AAGLN,MAAAA,UAAU,EAAE,SAAA,UAAA,CAAA,KAAA,EAAA,cAAA,EAAA;AAAA,eACV0B,eAAe,CAAA,IAAA,EAAA,KAAA,EADL,cACK,CADL;AAHP,OAAA;AAKLuB,MAAAA,QAAQ,EAAE,SAAA,QAAA,CAAA,KAAA,EAAA;AAAA,eAAgB5C,aAAa,CAAA,IAAA,EAA7B,KAA6B,CAA7B;AAAA;AALL,KAAP;AAFoB,GAAA,EAUtB,CAAA,aAAA,EAAA,eAAA,EAVF,aAUE,CAVsB,CAAxB;AAaA,MAAM6C,aAAa,GAAG,WAAA,CACpB,UAAA,aAAA,EAAA;AACE,QAAMC,UAAU,GAAGnK,QAAQ,CAA3B,aAA2B,CAA3B;AACA,QAAM0H,IAAI,GAAGyC,UAAU,GAAGC,aAAa,CAAhB,IAAA,GAAvB,aAAA;AACA,QAAMC,UAAU,GAAGtJ,KAAK,CAAC+B,KAAK,CAAN,MAAA,EAAxB,IAAwB,CAAxB;AAEA,QAAMkC,KAAK,GAAyB;AAClC0C,MAAAA,IAAI,EAD8B,IAAA;AAElC5H,MAAAA,KAAK,EAF6B,UAAA;AAGlCwK,MAAAA,QAAQ,EAH0B,YAAA;AAIlCC,MAAAA,MAAM,EAAE1B;AAJ0B,KAApC;;AAMA,QAAA,UAAA,EAAgB;AAAA,UAEZzC,IAFY,GAMVgE,aANU,CAAA,IAAA;AAAA,UAGLI,SAHK,GAMVJ,aANU,CAAA,KAAA;AAAA,UAIRK,EAJQ,GAMVL,aANU,CAAA,EAAA;AAAA,UAKZrC,QALY,GAMVqC,aANU,CAAA,QAAA;;AAQd,UAAIhE,IAAI,KAAR,UAAA,EAAyB;AACvB,YAAIoE,SAAS,KAAb,SAAA,EAA6B;AAC3BxF,UAAAA,KAAK,CAALA,OAAAA,GAAgB,CAAC,CAAjBA,UAAAA;AADF,SAAA,MAEO;AACLA,UAAAA,KAAK,CAALA,OAAAA,GAAgB,CAAC,EACfnF,KAAK,CAALA,OAAAA,CAAAA,UAAAA,KAA6B,CAACwK,UAAU,CAAVA,OAAAA,CADhCrF,SACgCqF,CADf,CAAjBrF;AAGAA,UAAAA,KAAK,CAALA,KAAAA,GAAAA,SAAAA;AACD;AARH,OAAA,MASO,IAAIoB,IAAI,KAAR,OAAA,EAAsB;AAC3BpB,QAAAA,KAAK,CAALA,OAAAA,GAAgBqF,UAAU,KAA1BrF,SAAAA;AACAA,QAAAA,KAAK,CAALA,KAAAA,GAAAA,SAAAA;AAFK,OAAA,MAGA,IAAIyF,EAAE,KAAFA,QAAAA,IAAJ,QAAA,EAAiC;AACtCzF,QAAAA,KAAK,CAALA,KAAAA,GAAcA,KAAK,CAALA,KAAAA,IAAdA,EAAAA;AACAA,QAAAA,KAAK,CAALA,QAAAA,GAAAA,IAAAA;AACD;AACF;;AACD,WAAA,KAAA;AArCkB,GAAA,EAuCpB,CAAA,UAAA,EAAA,YAAA,EAA2BlC,KAAK,CAvClC,MAuCE,CAvCoB,CAAtB;AA0CA,MAAM4H,KAAK,GAAG,OAAA,CACZ,YAAA;AAAA,WAAM,CAAC7H,OAAO,CAACkB,aAAa,CAAd,OAAA,EAAwBjB,KAAK,CAA3C,MAAc,CAAd;AADY,GAAA,EAEZ,CAACiB,aAAa,CAAd,OAAA,EAAwBjB,KAAK,CAF/B,MAEE,CAFY,CAAd;AAKA,MAAM6H,OAAO,GAAG,OAAA,CACd,YAAA;AAAA,WACE,OAAA,cAAA,KAAA,WAAA,GACID,KAAK,GACH5H,KAAK,CAALA,MAAAA,IAAgBvC,MAAM,CAANA,IAAAA,CAAYuC,KAAK,CAAjBvC,MAAAA,EAAAA,MAAAA,KADb,CAAA,GAEHmD,cAAc,KAAdA,KAAAA,IAA4B3D,UAAU,CAAtC2D,cAAsC,CAAtCA,GACCA,cAA2D,CAD5DA,KAC4D,CAD5DA,GAHN,cAAA,GAMIZ,KAAK,CAALA,MAAAA,IAAgBvC,MAAM,CAANA,IAAAA,CAAYuC,KAAK,CAAjBvC,MAAAA,EAAAA,MAAAA,KAPtB,CAAA;AADc,GAAA,EASd,CAAA,cAAA,EAAA,KAAA,EAAwBuC,KAAK,CAA7B,MAAA,EATF,KASE,CATc,CAAhB;;AAYA,MAAM8H,GAAG,GAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEP7G,IAAAA,aAAa,EAAEA,aAAa,CAFrB,OAAA;AAGPC,IAAAA,aAAa,EAAEA,aAAa,CAHrB,OAAA;AAIPC,IAAAA,cAAc,EAAEA,cAAc,CAJvB,OAAA;AAKPC,IAAAA,aAAa,EAAEA,aAAa,CALrB,OAAA;AAMP2E,IAAAA,UAAU,EANH,UAAA;AAOPJ,IAAAA,YAAY,EAPL,YAAA;AAQPkB,IAAAA,WAAW,EARJ,WAAA;AASPJ,IAAAA,YAAY,EATL,YAAA;AAUPjD,IAAAA,SAAS,EAVF,SAAA;AAWPa,IAAAA,SAAS,EAXF,SAAA;AAYP2B,IAAAA,cAAc,EAZP,cAAA;AAaPJ,IAAAA,eAAe,EAbR,eAAA;AAcPpB,IAAAA,aAAa,EAdN,aAAA;AAePD,IAAAA,aAAa,EAfN,aAAA;AAgBP2B,IAAAA,SAAS,EAhBF,SAAA;AAiBPC,IAAAA,aAAa,EAjBN,aAAA;AAkBPjC,IAAAA,UAAU,EAlBH,UAAA;AAmBPI,IAAAA,SAAS,EAnBF,SAAA;AAoBP8B,IAAAA,UAAU,EApBH,UAAA;AAqBPQ,IAAAA,YAAY,EArBL,4BAAA;AAsBPhD,IAAAA,aAAa,EAtBN,aAAA;AAuBPiE,IAAAA,OAAO,EAvBA,OAAA;AAwBPD,IAAAA,KAAK,EAxBE,KAAA;AAyBP3D,IAAAA,eAAe,EAzBR,eAAA;AA0BPF,IAAAA,aAAa,EA1BN,aAAA;AA2BPqD,IAAAA,aAAa,EA3BN,aAAA;AA4BPN,IAAAA,YAAY,EA5BL,YAAA;AA6BPG,IAAAA,eAAe,EA7BR,eAAA;AA8BPvG,IAAAA,cAAc,EA9BP,cAAA;AA+BPD,IAAAA,gBAAgB,EA/BT,gBAAA;AAgCPE,IAAAA,eAAe,EAAfA;AAhCO,GAAA,CAAT;;AAmCA,SAAA,GAAA;AACD;;AAED,SAAgBoH,MAAhB,CAGE/G,KAHF,EAGEA;AACA,MAAMgH,SAAS,GAAGxH,SAAS,CAA3B,KAA2B,CAA3B;MACQyH,SAAAA,GAA0CjH,KAAAA,CAA1CiH,S;MAAWC,QAAAA,GAA+BlH,KAAAA,CAA/BkH,Q;MAAUC,MAAAA,GAAqBnH,KAAAA,CAArBmH,M;MAAQC,QAAAA,GAAapH,KAAAA,CAAboH,Q,CAFrCpH,CAEqCoH;;AAGrCxK,EAAAA,mBAAAA,CAAAA,QAAAA,EAAoC,YAAA;AAAA,WAAA,SAAA;AAApCA,GAAAA,CAAAA;;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;AACX;AACAA,IAAAA,SAAAA,CAAgB,YAAA;AACd,OACE,CAACoD,KAAK,CADR,MAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,mPAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA,CADc,CACd;AADFpD,KAAAA,EAAAA,EAAAA,CAAAA;AAOD;;AACD,SACE,aAAA,CAAA,cAAA,EAAA;AAAgBZ,IAAAA,KAAK,EAAEgL;AAAvB,GAAA,EACGC,SAAS,GACNrK,aAAAA,CAAAA,SAAAA,EADM,SACNA,CADM,GAENuK,MAAM,GACNA,MAAM,CADA,SACA,CADA,GAEND,QAAQ,CAAA;AAAA,IACRjL,UAAU,CAAVA,QAAU,CAAVA,GACGiL,QAA0D,CAD7DjL,SAC6D,CAD7DA,GAIE,CAACU,eAAe,CAAhB,QAAgB,CAAhB,GACAC,QAAAA,CAAAA,IAAAA,CADA,QACAA,CADA,GALM,IAAA,GANhB,IACE,CADF;AAiBD;;AAED,SAAA,0BAAA,CAAA,KAAA,EAAA;MACEwH,WAAAA,GAAAA,KAAAA,CAAAA,W;MACAC,uBAAAA,GAAAA,KAAAA,CAAAA,uB;MACAC,WAAAA,GAAAA,KAAAA,CAAAA,W;AAMA1D,EAAAA,OAAO,CAAPA,IAAAA,CAAAA,6BAAAA,WAAAA,GAAAA,4EAAAA,GAAAA,WAAAA,GAAAA,+GAAAA,GAAAA,uBAAAA,GAAAA,MAAAA;AAMD;AAED;;;;;AAGA,SAAgBS,eAAhB,CAAwCgG,QAAxC,EAAwCA;AACtC,MAAIpI,MAAM,GAAV,EAAA;;AACA,MAAIoI,QAAQ,CAAZ,KAAA,EAAoB;AAClB,QAAIA,QAAQ,CAARA,KAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAAiC;AAC/B,aAAO9J,KAAK,CAAA,MAAA,EAAS8J,QAAQ,CAAjB,IAAA,EAAwBA,QAAQ,CAA5C,OAAY,CAAZ;AACD;;AACD,SAAA,IAAA,SAAA,GAAgBA,QAAQ,CAAxB,KAAA,EAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,EAAA,IAAgC;AAAA,UAAA,KAAA;;AAAA,UAAA,QAAA,EAAA;AAAA,YAAA,EAAA,IAAA,SAAA,CAAA,MAAA,EAAA;AAAA,QAAA,KAAA,GAAA,SAAA,CAAA,EAAA,EAAA,CAAA;AAAA,OAAA,MAAA;AAAA,QAAA,EAAA,GAAA,SAAA,CAAA,IAAA,EAAA;AAAA,YAAA,EAAA,CAAA,IAAA,EAAA;AAAA,QAAA,KAAA,GAAA,EAAA,CAAA,KAAA;AAAA;;AAAA,UAAvBjG,GAAuB,GAAA,KAAA;;AAC9B,UAAI,CAACnE,KAAK,CAAA,MAAA,EAASmE,GAAG,CAAtB,IAAU,CAAV,EAA8B;AAC5BnC,QAAAA,MAAM,GAAG1B,KAAK,CAAA,MAAA,EAAS6D,GAAG,CAAZ,IAAA,EAAmBA,GAAG,CAApCnC,OAAc,CAAdA;AACD;AACF;AACF;;AACD,SAAA,MAAA;AACD;AAED;;;;;AAGA,SAAgBkC,iBAAhB,CACEvC,MADF,EAEEoC,MAFF,EAGEsG,IAHF,EAIEC,OAJF,EAIEA;MADAD,IAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,IAAAA,GAAgB,KAAhBA;;;MACAC,OAAAA,KAAAA,KAAAA,C,EAAAA;AAAAA,IAAAA,OAAAA,GAAe,EAAfA;;;AAEA,MAAMC,YAAY,GAAiBC,wBAAwB,CAA3D,MAA2D,CAA3D;AACA,SAAO,MAAM,CAACH,IAAI,GAAA,cAAA,GAAX,UAAM,CAAN,CAAA,YAAA,EAAyD;AAC9DI,IAAAA,UAAU,EADoD,KAAA;AAE9DH,IAAAA,OAAO,EAAEA;AAFqD,GAAzD,CAAP;AAID;AAED;;;;;AAGA,SAAgBE,wBAAhB,CACE7I,MADF,EACEA;AAEA,MAAI+I,IAAI,GAAiB5L,KAAK,CAALA,OAAAA,CAAAA,MAAAA,IAAAA,EAAAA,GAAzB,EAAA;;AACA,OAAK,IAAL,CAAA,IAAA,MAAA,EAAsB;AACpB,QAAIU,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAJ,CAAIA,CAAJ,EAAqD;AACnD,UAAMS,GAAG,GAAGb,MAAM,CAAlB,CAAkB,CAAlB;;AACA,UAAIN,KAAK,CAALA,OAAAA,CAAc6C,MAAM,CAApB7C,GAAoB,CAApBA,MAAJ,IAAA,EAAyC;AACvC4L,QAAAA,IAAI,CAAJA,GAAI,CAAJA,GAAY,MAAM,CAAN,GAAM,CAAN,CAAA,GAAA,CAAgB,UAAA,KAAA,EAAA;AAC1B,cAAI5L,KAAK,CAALA,OAAAA,CAAAA,KAAAA,MAAAA,IAAAA,IAAiC6L,aAAa,CAAlD,KAAkD,CAAlD,EAA2D;AACzD,mBAAOH,wBAAwB,CAA/B,KAA+B,CAA/B;AADF,WAAA,MAEO;AACL,mBAAOzL,KAAK,KAALA,EAAAA,GAAAA,KAAAA,GAAP,SAAA;AACD;AALH2L,SAAY,CAAZA;AADF,OAAA,MAQO,IAAIC,aAAa,CAAChJ,MAAM,CAAxB,GAAwB,CAAP,CAAjB,EAAgC;AACrC+I,QAAAA,IAAI,CAAJA,GAAI,CAAJA,GAAYF,wBAAwB,CAAC7I,MAAM,CAA3C+I,GAA2C,CAAP,CAApCA;AADK,OAAA,MAEA;AACLA,QAAAA,IAAI,CAAJA,GAAI,CAAJA,GAAY/I,MAAM,CAANA,GAAM,CAANA,KAAAA,EAAAA,GAAqBA,MAAM,CAA3BA,GAA2B,CAA3BA,GAAZ+I,SAAAA;AACD;AACF;AACF;;AACD,SAAA,IAAA;AACD;AAED;;;;;;AAIA,SAAA,UAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA;AACE,MAAME,WAAW,GAAGlE,MAAM,CAA1B,KAAoBA,EAApB;AAEAmE,EAAAA,MAAM,CAANA,OAAAA,CAAe,UAAA,CAAA,EAAA,CAAA,EAAA;AACb,QAAI,OAAOD,WAAW,CAAlB,CAAkB,CAAlB,KAAJ,WAAA,EAA2C;AACzC,UAAME,cAAc,GAAG/D,OAAO,CAAPA,KAAAA,KAAvB,KAAA;AACA,UAAMgE,WAAW,GAAGD,cAAc,IAAI/D,OAAO,CAAPA,iBAAAA,CAAtC,CAAsCA,CAAtC;AACA6D,MAAAA,WAAW,CAAXA,CAAW,CAAXA,GAAiBG,WAAW,GACxBC,SAAS,CAAClM,KAAK,CAALA,OAAAA,CAAAA,CAAAA,IAAAA,EAAAA,GAAD,EAAA,EAAA,CAAA,EADe,OACf,CADe,GAA5B8L,CAAAA;AAHF,KAAA,MAMO,IAAI7D,OAAO,CAAPA,iBAAAA,CAAJ,CAAIA,CAAJ,EAAkC;AACvC6D,MAAAA,WAAW,CAAXA,CAAW,CAAXA,GAAiBI,SAAS,CAACtE,MAAM,CAAP,CAAO,CAAP,EAAA,CAAA,EAA1BkE,OAA0B,CAA1BA;AADK,KAAA,MAEA,IAAIlE,MAAM,CAANA,OAAAA,CAAAA,CAAAA,MAAsB,CAA1B,CAAA,EAA8B;AACnCkE,MAAAA,WAAW,CAAXA,IAAAA,CAAAA,CAAAA;AACD;AAXHC,GAAAA;AAaA,SAAA,WAAA;AACD;AAED;;;AACA,SAAA,iBAAA,CAAA,OAAA,EAAA;AACE,SAAO,KAAK,CAAL,IAAA,CAAA,OAAA,EAAA,MAAA,CACG,UAAA,EAAA,EAAE;AAAA,WAAII,EAAE,CAAN,QAAA;AADL,GAAA,EAAA,GAAA,CAEA,UAAA,EAAA,EAAE;AAAA,WAAIA,EAAE,CAAN,KAAA;AAFT,GAAO,CAAP;AAGD;AAED;;;AACA,SAAA,mBAAA,CAAA,YAAA,EAAA,OAAA,EAAA,SAAA,EAAA;AAKE;AACA,MAAI,OAAA,YAAA,KAAJ,SAAA,EAAuC;AACrC,WAAOC,OAAO,CAAd,OAAc,CAAd;AACD,GARH,CAQG;;;AAGD,MAAIC,oBAAoB,GAAxB,EAAA;AACA,MAAIC,cAAc,GAAlB,KAAA;AACA,MAAIC,KAAK,GAAG,CAAZ,CAAA;;AAEA,MAAI,CAACvM,KAAK,CAALA,OAAAA,CAAL,YAAKA,CAAL,EAAkC;AAChC;AACA,QAAI,CAAA,SAAA,IAAc2K,SAAS,IAAvB,MAAA,IAAqCA,SAAS,IAAlD,OAAA,EAA+D;AAC7D,aAAOyB,OAAO,CAAd,OAAc,CAAd;AACD;AAJH,GAAA,MAKO;AACL;AACAC,IAAAA,oBAAoB,GAApBA,YAAAA;AACAE,IAAAA,KAAK,GAAGC,YAAY,CAAZA,OAAAA,CAARD,SAAQC,CAARD;AACAD,IAAAA,cAAc,GAAGC,KAAK,IAAtBD,CAAAA;AACD,GAzBH,CAyBG;;;AAGD,MAAIvE,OAAO,IAAPA,SAAAA,IAAwB,CAA5B,cAAA,EAA6C;AAC3C,WAAOsE,oBAAoB,CAApBA,MAAAA,CAAP,SAAOA,CAAP;AACD,GA9BH,CA8BG;;;AAGD,MAAI,CAAJ,cAAA,EAAqB;AACnB,WAAA,oBAAA;AACD,GAnCH,CAmCG;;;AAGD,SAAOA,oBAAoB,CAApBA,KAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,CAEGA,oBAAoB,CAApBA,KAAAA,CAA2BE,KAAK,GAF1C,CAEUF,CAFHA,CAAP;AAGD,C,CAAA;AAGD;AACA;AACA;;;AACA,IAAMI,yBAAyB,GAC7B,OAAA,MAAA,KAAA,WAAA,IACA,OAAOC,MAAM,CAAb,QAAA,KADA,WAAA,IAEA,OAAOA,MAAM,CAANA,QAAAA,CAAP,aAAA,KAFA,WAAA,GAAA,eAAA,GADF,SAAA;;AAOA,SAAA,gBAAA,CAAA,EAAA,EAAA;AACE,MAAMC,GAAG,GAAQ9L,MAAAA,CAAjB,EAAiBA,CAAjB,CADF,CACE;;AAGA4L,EAAAA,yBAAyB,CAAC,YAAA;AACxBE,IAAAA,GAAG,CAAHA,OAAAA,GAAAA,EAAAA;AADFF,GAAyB,CAAzBA;AAIA,SAAO,WAAA,CACL,YAAA;AAAA,SAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAIG,IAAJ,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAIA,MAAAA,IAAJ,CAAA,IAAA,CAAIA,GAAJ,SAAA,CAAA,IAAA,CAAIA;AAAJ;;AAAA,WAAoBD,GAAG,CAAHA,OAAAA,CAAAA,KAAAA,CAAkB,KAAlBA,CAAAA,EAApB,IAAoBA,CAApB;AADK,GAAA,EAAP,EAAO,CAAP;AAID;;SCpnCeE,Q,CACdC,gB,EAAAA;AAEA,MAAMnK,MAAM,GAAGD,gBAAf,EAAA;MAEE2H,aAAAA,GAKE1H,MAAAA,CALF0H,a;MACAN,YAAAA,GAIEpH,MAAAA,CAJFoH,Y;MACAG,eAAAA,GAGEvH,MAAAA,CAHFuH,e;MACAlD,aAAAA,GAEErE,MAAAA,CAFFqE,a;MACAE,eAAAA,GACEvE,MAAAA,CADFuE,e;AAGF,MAAMoD,UAAU,GAAGnK,QAAQ,CAA3B,gBAA2B,CAA3B,CAXA2M,CAWA;;AAGA,MAAM7I,KAAK,GAAyBqG,UAAU,GAAA,gBAAA,GAE1C;AAAEzC,IAAAA,IAAI,EAAEiF;AAAR,GAFJ;MAIcC,SAAAA,GAAoC9I,KAAAA,CAA1C4D,I;MAA2BmF,UAAAA,GAAe/I,KAAAA,CAAzBgD,Q;AAEzBpG,EAAAA,SAAAA,CAAgB,YAAA;AACd,QAAA,SAAA,EAAe;AACbmG,MAAAA,aAAa,CAAA,SAAA,EAAY;AACvBC,QAAAA,QAAQ,EAAE+F;AADa,OAAZ,CAAbhG;AAGD;;AACD,WAAO,YAAA;AACL,UAAA,SAAA,EAAe;AACbE,QAAAA,eAAe,CAAfA,SAAe,CAAfA;AACD;AAHH,KAAA;AANFrG,GAAAA,EAWG,CAAA,aAAA,EAAA,eAAA,EAAA,SAAA,EAXHA,UAWG,CAXHA,CAAAA;;AAaA,MAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;AACX,KAAA,MAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,4GAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAID;;AAED,GAAA,SAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,2FAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,SAAO,CACLwJ,aAAa,CADR,KACQ,CADR,EAELN,YAAY,CAFP,SAEO,CAFP,EAGLG,eAAe,CAHjB,SAGiB,CAHV,CAAP;AAKD;;AAED,SAAgB+C,KAAhB,CAAgBA,IAAhB,EAAgBA;MACdhG,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACAY,IAAAA,GAAAA,IAAAA,CAAAA,I;MACAuD,MAAAA,GAAAA,IAAAA,CAAAA,M;MACAD,QAAAA,GAAAA,IAAAA,CAAAA,Q;MACIP,EAAAA,GAAAA,IAAAA,CAAJsC,E;MACAhC,SAAAA,GAAAA,IAAAA,CAAAA,S;MACGjH,KAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MAAAA,EAAAA,QAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,WAAAA,CAAAA,C;;0BAOCvB,gBAAgB,E;MADfC,MAAAA,GAAAA,6BAAAA,CAAAA,iBAAAA,EAAAA,CAAAA,UAAAA,EAAAA,kBAAAA,CAAAA,C;;AAGL,MAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;AACX;AACA9B,IAAAA,SAAAA,CAAgB,YAAA;AACd,OACE,CADF,MAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAA,0LAAA,IAAA,GAAA,2DAAA,GAAA,IAAA,GAAT,2CAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,OACE,EAAE+J,EAAE,IAAFA,QAAAA,IAAkB1K,UAAU,CADhC,QACgC,CAA9B,CADF,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,6HAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,OACE,EAAEgL,SAAS,IAATA,QAAAA,IAAyBhL,UAAU,CADvC,QACuC,CAArC,CADF,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,2IAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,OACE,EAAEkL,MAAM,IAANA,QAAAA,IAAsB,CAACxK,eAAe,CAD1C,QAC0C,CAAxC,CADF,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,wHAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA,CAhBc,CAgBd;AAhBFC,KAAAA,EAAAA,EAAAA,CAAAA;AAsBD,GAxCaoM,CAwCb;;;MAGOjG,aAAAA,GAAmCrE,MAAAA,CAAnCqE,a;MAAeE,eAAAA,GAAoBvE,MAAAA,CAApBuE,e;AACvBrG,EAAAA,SAAAA,CAAgB,YAAA;AACdmG,IAAAA,aAAa,CAAA,IAAA,EAAO;AAClBC,MAAAA,QAAQ,EAAEA;AADQ,KAAP,CAAbD;AAGA,WAAO,YAAA;AACLE,MAAAA,eAAe,CAAfA,IAAe,CAAfA;AADF,KAAA;AAJFrG,GAAAA,EAOG,CAAA,aAAA,EAAA,eAAA,EAAA,IAAA,EAPHA,QAOG,CAPHA,CAAAA;AAQA,MAAMsE,KAAK,GAAG,MAAM,CAAN,aAAA,CAAA,QAAA,CAAA;AAAuB0C,IAAAA,IAAI,EAAJA;AAAvB,GAAA,EAAd,KAAc,CAAA,CAAd;AACA,MAAMsF,IAAI,GAAGxK,MAAM,CAANA,YAAAA,CAAb,IAAaA,CAAb;AACA,MAAMyK,SAAS,GAAG;AAAEjI,IAAAA,KAAK,EAAP,KAAA;AAASkI,IAAAA,IAAI,EAAE1K;AAAf,GAAlB;;AAEA,MAAA,MAAA,EAAY;AACV,WAAOyI,MAAM,CAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAAiB+B,MAAAA,IAAI,EAAJA;AAAjB,KAAA,CAAA,CAAb;AACD;;AAED,MAAIjN,UAAU,CAAd,QAAc,CAAd,EAA0B;AACxB,WAAOiL,QAAQ,CAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAAiBgC,MAAAA,IAAI,EAAJA;AAAjB,KAAA,CAAA,CAAf;AACD;;AAED,MAAA,SAAA,EAAe;AACb;AACA,QAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;AAAA,UACzB9B,QADyB,GACHpH,KADG,CAAA,QAAA;AAAA,UACZD,IADY,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,UAAA,CAAA,CAAA;;AAEjC,aAAO,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AAEH2I,QAAAA,GAAG,EAAEtB;AAFF,OAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,CAAA,EAAP,QAAO,CAAP;AAJW,KAAA,CAAA;;;AAWb,WAAO,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AAEHlG,MAAAA,KAAK,EAFF,KAAA;AAEIkI,MAAAA,IAAI,EAAE1K;AAFV,KAAA,EAAA,KAAA,CAAA,EAAP,QAAO,CAAP;AAKD,GAhFasK,CAgFb;;;AAGD,MAAMK,SAAS,GAAG1C,EAAE,IAApB,OAAA;;AAEA,MAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;AAAA,QACzBS,SADyB,GACHpH,KADG,CAAA,QAAA;AAAA,QACZD,KADY,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,UAAA,CAAA,CAAA;;AAEjC,WAAO,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AAEH2I,MAAAA,GAAG,EAAEtB;AAFF,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,CAAA,EAAP,QAAO,CAAP;AAKD;;AAED,SAAOxK,aAAAA,CAAAA,SAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAAP,QAAOA,CAAP;AACD;;ICjNY0M,IAAI,GAAA,aAAG1M,UAAAA,CAClB,UAAA,KAAA,EAAA,GAAA,EAAA;AACE;AACA;MACQ2M,MAAAA,GAAoBvJ,KAAAA,CAApBuJ,M;MAAWxJ,IAAAA,GAAAA,6BAAAA,CAASC,KAATD,EAASC,CAAAA,QAAAA,CAATD,C;;AACnB,MAAMyJ,OAAO,GAAGD,MAAM,IAAtB,GAAA;;0BACsC9K,gBAAgB,E;MAA9CoH,WAAAA,GAAAA,iBAAAA,CAAAA,W;MAAaJ,YAAAA,GAAAA,iBAAAA,CAAAA,Y;;AACrB,SACE7I,aAAAA,CAAAA,MAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA;AACEkD,IAAAA,QAAQ,EAAE2F,YADZ7I;AAEE8L,IAAAA,GAAG,EAAEA,GAFP9L;AAGE6M,IAAAA,OAAO,EAAE5D,WAHXjJ;AAIE2M,IAAAA,MAAM,EAAEC;AAJV5M,GAAAA,EADF,IACEA,CAAAA,CADF;AAPG,CAAaA,C;AAmBpB0M,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AC4DA;;;;AAGA,SAAgBI,UAAhB,CAAgBA,IAAhB,EAAgBA;mCAKdC,gB;MAAAA,gBAAAA,GAAAA,qBAAAA,KAAAA,KAAAA,CAAAA,GAAmB,UAAA,YAAA,EAAA;AACjB,QAAItL,GAAG,GAAP,EAAA;;AACA,SAAK,IAAL,CAAA,IAAA,YAAA,EAA4B;AAC1B,UACEuL,YAAY,CAAZA,cAAAA,CAAAA,CAAAA,KACA,OAAOA,YAAY,CAAnB,CAAmB,CAAnB,KAFF,UAAA,EAGE;AACA;AACCvL,QAAAA,GAAW,CAAXA,CAAW,CAAXA,GAAiBuL,YAAY,CAA7BvL,CAA6B,CAA7BA;AACF;AACF;;AACD,WAAA,GAAA;AACD,GAZDsL,GAYC,qB;MACEE,MAAAA,GAAAA,6BAAAA,CAAAA,IAAAA,EAAAA,CAAAA,kBAAAA,CAAAA,C;;AAKH,SAAO,SAAA,YAAA,CAAA,WAAA,EAAA;AAGL,QAAMC,oBAAoB,GACxBC,WAAS,CAATA,WAAAA,IACAA,WAAS,CADTA,IAAAA,IAECA,WAAS,CAATA,WAAAA,IAAyBA,WAAS,CAATA,WAAAA,CAF1BA,IAAAA,IADF,WAAA;AAKA;;;;;QAIMC,CAAAA,G;;;AAAN,eAAA,CAAA,GAAA;;;;;AAGE,QAAA,KAAA,CAAA,QAAA,GAAW,UAAA,MAAA,EAAA;AACT,iBAAOH,MAAM,CAANA,QAAAA,CAAAA,MAAAA,EAAyB,KAAA,CAAhC,KAAOA,CAAP;AADF,SAAA;;AAIA,QAAA,KAAA,CAAA,gBAAA,GAAmB,YAAA;AACjB,iBAAO5N,UAAU,CAAC4N,MAAM,CAAjB5N,gBAAU,CAAVA,GACH4N,MAAM,CAANA,gBAAAA,CAAyB,KAAA,CADtB5N,KACH4N,CADG5N,GAEH4N,MAAM,CAFV,gBAAA;AADF,SAAA;;AAMA,QAAA,KAAA,CAAA,YAAA,GAAe,UAAA,MAAA,EAAA,OAAA,EAAA;AACb,iBAAO,MAAM,CAAN,YAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EAAA,OAAA,EAAA;AAEL7J,YAAAA,KAAK,EAAE,KAAA,CAAKA;AAFP,WAAA,CAAA,CAAP;AADF,SAAA;AAOA;;;;;AAGA,QAAA,KAAA,CAAA,mBAAA,GAAsB,UAAA,WAAA,EAAA;AACpB,iBAAOpD,aAAAA,CAAAA,WAAAA,EAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EAAe,KAAA,CAAKoD,KAApBpD,EAAP,WAAOA,CAAAA,CAAP;AADF,SAAA;;;AA2BD;;;;aAvBCuK,M,GAAAA,SAAAA,MAAAA,GAAAA;0BACiC,KAAKnH,K;YAAfA,KAAAA,GAAAA,6BAAAA,CAAAA,WAAAA,EAAAA,CAAAA,UAAAA,CAAAA,C;;AACrB,eACE,aAAA,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACMA,KADN,EAEM6J,MAFN,EAEMA;AACJ7G,UAAAA,QAAQ,EAAE6G,MAAM,CAANA,QAAAA,IAAmB,KAAK7G,QAD9B6G;AAEJ9I,UAAAA,gBAAgB,EAAE8I,MAAM,CAANA,gBAAAA,IAA2B,KAAK9I,gBAF9C8I;AAGJ5J,UAAAA,aAAa,EAAE0J,gBAAgB,CAAC,KAAD,KAAA,CAH3BE;AAIJzJ,UAAAA,aAAa,EACXyJ,MAAM,CAANA,gBAAAA,IAA2BA,MAAM,CAANA,gBAAAA,CAAwB,KAAxBA,KAAAA,CALzBA;AAOJ3J,UAAAA,aAAa,EACX2J,MAAM,CAANA,gBAAAA,IAA2BA,MAAM,CAANA,gBAAAA,CAAwB,KAAxBA,KAAAA,CARzBA;AAUJ1J,UAAAA,cAAc,EACZ0J,MAAM,CAANA,iBAAAA,IAA4BA,MAAM,CAANA,iBAAAA,CAAyB,KAAzBA,KAAAA,CAX1BA;AAaJ/J,UAAAA,QAAQ,EAAE,KAAK2F,YAbXoE;AAcJ3C,UAAAA,QAAQ,EAAE,KAAK+C;AAdXJ,SAFN,CAAA,CADF;AAoBD,O;;;MAjDajN,S;;AACPoN,IAAAA,CAAAA,CAAAA,WAAAA,GAAAA,gBAAAA,oBAAAA,GAAAA,GAAAA;AAmDT,WAAOE,oBAAoB,CAAA,CAAA,EAAA,WAAA,CAAA;AAAA,KAA3B;AAhEF,GAAA;AAqED;ACrLD;;;;;;AAIA,SAAgBC,OAAhB,CACEC,IADF,EACEA;AAEA,MAAMJ,CAAC,GAA0B,SAA3BA,CAA2B,CAAA,KAAA,EAAA;AAAA,WAC/B,aAAA,CAAA,cAAA,EAAA,IAAA,EACG,UAAA,MAAA,EAAM;AACL,OACE,CAAC,CADH,MAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAA,yMAEgMI,IAAI,CAF7M,IAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAIA,aAAO,aAAA,CAAA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAUpK,KAAV,EAAUA;AAAOtB,QAAAA,MAAM,EAAEA;AAAfsB,OAAV,CAAA,CAAP;AAP2B,KAC/B,CAD+B;AAAjC,GAAA;;AAWA,MAAM8J,oBAAoB,GACxBM,IAAI,CAAJA,WAAAA,IACAA,IAAI,CADJA,IAAAA,IAECA,IAAI,CAAJA,WAAAA,IAAoBA,IAAI,CAAJA,WAAAA,CAFrBA,IAAAA,IADF,WAAA,CAbAA,CAaA;AAOA;;AACCJ,EAAAA,CAEC,CAFDA,gBAAAA,GAAAA,IAAAA;AAIDA,EAAAA,CAAC,CAADA,WAAAA,GAAAA,mBAAAA,oBAAAA,GAAAA,GAAAA;AAEA,SAAOE,oBAAoB,CAAA,CAAA,EAAA,IAAA,CAAA;AAAA,GAA3B;AAMD;ACmBD;;;;;AAGA,IAAaG,IAAI,GAAG,SAAPA,IAAO,CAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA;AAClB,MAAMC,IAAI,GAAGC,aAAa,CAA1B,KAA0B,CAA1B;AACA,MAAMvO,KAAK,GAAGsO,IAAI,CAAlB,IAAkB,CAAlB;AACAA,EAAAA,IAAI,CAAJA,MAAAA,CAAAA,IAAAA,EAAAA,CAAAA;AACAA,EAAAA,IAAI,CAAJA,MAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,KAAAA;AACA,SAAA,IAAA;AALK,CAAP;;AAQA,IAAaE,IAAI,GAAG,SAAPA,IAAO,CAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA;AAKlB,MAAMF,IAAI,GAAGC,aAAa,CAA1B,SAA0B,CAA1B;AACA,MAAME,CAAC,GAAGH,IAAI,CAAd,MAAc,CAAd;AACAA,EAAAA,IAAI,CAAJA,MAAI,CAAJA,GAAeA,IAAI,CAAnBA,MAAmB,CAAnBA;AACAA,EAAAA,IAAI,CAAJA,MAAI,CAAJA,GAAAA,CAAAA;AACA,SAAA,IAAA;AATK,CAAP;;AAYA,IAAaI,MAAM,GAAG,SAATA,MAAS,CAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA;AAKpB,MAAMJ,IAAI,GAAGC,aAAa,CAA1B,SAA0B,CAA1B;AACAD,EAAAA,IAAI,CAAJA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,KAAAA;AACA,SAAA,IAAA;AAPK,CAAP;;AAUA,IAAaK,OAAO,GAAG,SAAVA,OAAU,CAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA;AAKrB,MAAML,IAAI,GAAGC,aAAa,CAA1B,SAA0B,CAA1B;AACAD,EAAAA,IAAI,CAAJA,KAAI,CAAJA,GAAAA,KAAAA;AACA,SAAA,IAAA;AAPK,CAAP;;AAUA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAA,SAAA,EAAA;AACpB,MAAI,CAAJ,SAAA,EAAgB;AACd,WAAA,EAAA;AADF,GAAA,MAEO,IAAIxO,KAAK,CAALA,OAAAA,CAAJ,SAAIA,CAAJ,EAA8B;AACnC,WAAA,GAAA,MAAA,CAAA,SAAA,CAAA;AADK,GAAA,MAEA;AACL,QAAM6O,QAAQ,GAAG,MAAM,CAAN,IAAA,CAAA,SAAA,EAAA,GAAA,CACV,UAAA,GAAA,EAAG;AAAA,aAAIC,QAAQ,CAAZ,GAAY,CAAZ;AADO,KAAA,EAAA,MAAA,CAEP,UAAA,GAAA,EAAA,EAAA,EAAA;AAAA,aAAc3C,EAAE,GAAFA,GAAAA,GAAAA,EAAAA,GAAd,GAAA;AAFO,KAAA,EAAjB,CAAiB,CAAjB;AAGA,WAAO,KAAK,CAAL,IAAA,CAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAA2B4C,MAAAA,MAAM,EAAEF,QAAQ,GAAG;AAA9C,KAAA,CAAA,CAAP;AACD;AAVH,CAAA;;IAaMG,eAAAA,G;;;AAQJ,WAAA,eAAA,CAAA,KAAA,EAAA;;;AACE,IAAA,KAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,KAAA,IAAA;;AAqBF,IAAA,KAAA,CAAA,gBAAA,GAAmB,UAAA,EAAA,EAAA,YAAA,EAAA,WAAA,EAAA;wBASb,KAAA,CAAK/K,K;UAHP4D,IAAAA,GAAAA,WAAAA,CAAAA,I;UAEUoB,cAAAA,GAAAA,WAAAA,CAAVtG,MAAUsG,CAAAA,c;AAEZA,MAAAA,cAAc,CAAC,UAAA,SAAA,EAAA;AACb,YAAIkG,YAAY,GAAG,OAAA,WAAA,KAAA,UAAA,GAAA,WAAA,GAAnB,EAAA;AACA,YAAIC,aAAa,GACf,OAAA,YAAA,KAAA,UAAA,GAAA,YAAA,GADF,EAAA,CAFa,CAEb;AAIA;;AACA,YAAIvM,MAAM,GAAGrB,KAAK,CAChB6N,SAAS,CADO,MAAA,EAAA,IAAA,EAGhBC,EAAE,CAACpO,KAAK,CAACmO,SAAS,CAAV,MAAA,EAHV,IAGU,CAAN,CAHc,CAAlB;AAMA,YAAIE,UAAU,GAAGC,WAAW,GACxBL,YAAY,CAACjO,KAAK,CAACmO,SAAS,CAAV,MAAA,EADM,IACN,CAAN,CADY,GAA5B,SAAA;AAGA,YAAII,YAAY,GAAGC,YAAY,GAC3BN,aAAa,CAAClO,KAAK,CAACmO,SAAS,CAAV,OAAA,EADQ,IACR,CAAN,CADc,GAA/B,SAAA;;AAIA,YAAItP,YAAY,CAAhB,UAAgB,CAAhB,EAA8B;AAC5BwP,UAAAA,UAAU,GAAVA,SAAAA;AACD;;AACD,YAAIxP,YAAY,CAAhB,YAAgB,CAAhB,EAAgC;AAC9B0P,UAAAA,YAAY,GAAZA,SAAAA;AACD;;AAED,eAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AAEE5M,UAAAA,MAAM,EAFR,MAAA;AAGEK,UAAAA,MAAM,EAAEsM,WAAW,GACfhO,KAAK,CAAC6N,SAAS,CAAV,MAAA,EAAA,IAAA,EADU,UACV,CADU,GAEfA,SAAS,CALf,MAAA;AAMEtM,UAAAA,OAAO,EAAE2M,YAAY,GACjBlO,KAAK,CAAC6N,SAAS,CAAV,OAAA,EAAA,IAAA,EADY,YACZ,CADY,GAEjBA,SAAS,CAACtM;AARhB,SAAA,CAAA;AA3BFkG,OAAc,CAAdA;AAVF,KAAA;;AAkDA,IAAA,KAAA,CAAA,IAAA,GAAO,UAAA,KAAA,EAAA;AAAA,aACL,KAAA,CAAA,gBAAA,CACE,UAAA,SAAA,EAAA;AAAA,eAAA,GAAA,MAAA,CACKuF,aAAa,CADlB,SACkB,CADlB,EAAA,CAEEmB,SAAS,CAFX,KAEW,CAFX,CAAA,CAAA;AADF,OAAA,EAAA,KAAA,EADK,KACL,CADK;AAAP,KAAA;;AAUA,IAAA,KAAA,CAAA,UAAA,GAAa,UAAA,KAAA,EAAA;AAAA,aAAgB,YAAA;AAAA,eAAM,KAAA,CAAA,IAAA,CAAN,KAAM,CAAN;AAAhB,OAAA;AAAb,KAAA;;AAEA,IAAA,KAAA,CAAA,IAAA,GAAO,UAAA,MAAA,EAAA,MAAA,EAAA;AAAA,aACL,KAAA,CAAA,gBAAA,CACE,UAAA,KAAA,EAAA;AAAA,eAAkBlB,IAAI,CAAA,KAAA,EAAA,MAAA,EAAtB,MAAsB,CAAtB;AADF,OAAA,EAAA,IAAA,EADK,IACL,CADK;AAAP,KAAA;;AAOA,IAAA,KAAA,CAAA,UAAA,GAAa,UAAA,MAAA,EAAA,MAAA,EAAA;AAAA,aAAoC,YAAA;AAAA,eAC/C,KAAA,CAAA,IAAA,CAAA,MAAA,EAD+C,MAC/C,CAD+C;AAApC,OAAA;AAAb,KAAA;;AAGA,IAAA,KAAA,CAAA,IAAA,GAAO,UAAA,IAAA,EAAA,EAAA,EAAA;AAAA,aACL,KAAA,CAAA,gBAAA,CAAsB,UAAA,KAAA,EAAA;AAAA,eAAkBH,IAAI,CAAA,KAAA,EAAA,IAAA,EAAtB,EAAsB,CAAtB;AAAtB,OAAA,EAAA,IAAA,EADK,IACL,CADK;AAAP,KAAA;;AAGA,IAAA,KAAA,CAAA,UAAA,GAAa,UAAA,IAAA,EAAA,EAAA,EAAA;AAAA,aAA8B,YAAA;AAAA,eAAM,KAAA,CAAA,IAAA,CAAA,IAAA,EAAN,EAAM,CAAN;AAA9B,OAAA;AAAb,KAAA;;AAEA,IAAA,KAAA,CAAA,MAAA,GAAS,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,aACP,KAAA,CAAA,gBAAA,CACE,UAAA,KAAA,EAAA;AAAA,eAAkBK,MAAM,CAAA,KAAA,EAAA,KAAA,EAAxB,KAAwB,CAAxB;AADF,OAAA,EAEE,UAAA,KAAA,EAAA;AAAA,eAAkBA,MAAM,CAAA,KAAA,EAAA,KAAA,EAAxB,IAAwB,CAAxB;AAFF,OAAA,EAGE,UAAA,KAAA,EAAA;AAAA,eAAkBA,MAAM,CAAA,KAAA,EAAA,KAAA,EAAxB,IAAwB,CAAxB;AAJK,OACP,CADO;AAAT,KAAA;;AAOA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,aAA+B,YAAA;AAAA,eAAM,KAAA,CAAA,MAAA,CAAA,KAAA,EAAN,KAAM,CAAN;AAA/B,OAAA;AAAf,KAAA;;AAEA,IAAA,KAAA,CAAA,OAAA,GAAU,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,aACR,KAAA,CAAA,gBAAA,CACE,UAAA,KAAA,EAAA;AAAA,eAAkBC,OAAO,CAAA,KAAA,EAAA,KAAA,EAAzB,KAAyB,CAAzB;AADF,OAAA,EAAA,KAAA,EADQ,KACR,CADQ;AAAV,KAAA;;AAOA,IAAA,KAAA,CAAA,aAAA,GAAgB,UAAA,KAAA,EAAA,KAAA,EAAA;AAAA,aAA+B,YAAA;AAAA,eAC7C,KAAA,CAAA,OAAA,CAAA,KAAA,EAD6C,KAC7C,CAD6C;AAA/B,OAAA;AAAhB,KAAA;;AAGA,IAAA,KAAA,CAAA,OAAA,GAAU,UAAA,KAAA,EAAA;AACR,UAAIG,MAAM,GAAG,CAAb,CAAA;;AACA,MAAA,KAAA,CAAA,gBAAA,CACE,UAAA,KAAA,EAAA;AACE,YAAMa,GAAG,GAAGC,KAAK,GAAA,CAAA,KAAA,EAAA,MAAA,CAAA,KAAA,CAAA,GAAuB,CAAxC,KAAwC,CAAxC;;AACA,YAAId,MAAM,GAAV,CAAA,EAAgB;AACdA,UAAAA,MAAM,GAAGa,GAAG,CAAZb,MAAAA;AACD;;AACD,eAAA,GAAA;AANJ,OAAA,EAQE,UAAA,KAAA,EAAA;AACE,YAAMa,GAAG,GAAGC,KAAK,GAAA,CAAA,IAAA,EAAA,MAAA,CAAA,KAAA,CAAA,GAAsB,CAAvC,IAAuC,CAAvC;;AACA,YAAId,MAAM,GAAV,CAAA,EAAgB;AACdA,UAAAA,MAAM,GAAGa,GAAG,CAAZb,MAAAA;AACD;;AACD,eAAA,GAAA;AAbJ,OAAA,EAeE,UAAA,KAAA,EAAA;AACE,YAAMa,GAAG,GAAGC,KAAK,GAAA,CAAA,IAAA,EAAA,MAAA,CAAA,KAAA,CAAA,GAAsB,CAAvC,IAAuC,CAAvC;;AACA,YAAId,MAAM,GAAV,CAAA,EAAgB;AACdA,UAAAA,MAAM,GAAGa,GAAG,CAAZb,MAAAA;AACD;;AACD,eAAA,GAAA;AApBJ,OAAA;;AAuBA,aAAA,MAAA;AAzBF,KAAA;;AA4BA,IAAA,KAAA,CAAA,aAAA,GAAgB,UAAA,KAAA,EAAA;AAAA,aAAgB,YAAA;AAAA,eAAM,KAAA,CAAA,OAAA,CAAN,KAAM,CAAN;AAAhB,OAAA;AAAhB,KAAA;;AAwBA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAA,KAAA,EAAA;AAAA,aAAmB,YAAA;AAAA,eAAM,KAAA,CAAA,MAAA,CAAN,KAAM,CAAN;AAAnB,OAAA;AAAf,KAAA;;AAqBA,IAAA,KAAA,CAAA,SAAA,GAAY,YAAA;AAAA,aAAM,YAAA;AAAA,eAAM,KAAA,CAAN,GAAM,EAAN;AAAN,OAAA;AAAZ,KAAA,CA/LA,CA+LA;AA5LE;;;AACA,IAAA,KAAA,CAAA,MAAA,GAAc,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,sBAAA,CAAd,KAAc,CAAA,CAAd;AACA,IAAA,KAAA,CAAA,GAAA,GAAW,KAAA,CAAA,GAAA,CAAA,IAAA,CAAA,sBAAA,CAAX,KAAW,CAAA,CAAX;;AACD;;;;SAEDE,kB,GAAAA,SAAAA,kBAAAA,CAAAA,SAAAA,EAAAA;AAGE,QACE,CAACjM,OAAO,CACN9B,KAAK,CAACgO,SAAS,CAATA,MAAAA,CAAD,MAAA,EAA0BA,SAAS,CADlC,IACD,CADC,EAENhO,KAAK,CAAC,KAAA,KAAA,CAAA,MAAA,CAAD,MAAA,EAA2B,KAAA,KAAA,CAFlC,IAEO,CAFC,CAAR,IAIA,KAAA,KAAA,CAAA,MAAA,CALF,gBAAA,EAME;AACA,WAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAA+B,KAAA,KAAA,CAAA,MAAA,CAA/B,MAAA;AACD;AACF,G;;SAgID4O,M,GAAAA,SAAAA,MAAAA,CAAAA,KAAAA,EAAAA;AACE;AACA,QAAA,MAAA;AACA,SAAA,gBAAA,EAAA;AAEE,cAAA,KAAA,EAAA;AACE,UAAMvB,IAAI,GAAGsB,KAAK,GAAGrB,aAAa,CAAhB,KAAgB,CAAhB,GAAlB,EAAA;;AACA,UAAI,CAAJ,MAAA,EAAa;AACXuB,QAAAA,MAAM,GAAGxB,IAAI,CAAbwB,KAAa,CAAbA;AACD;;AACD,UAAI7P,UAAU,CAACqO,IAAI,CAAnB,MAAc,CAAd,EAA6B;AAC3BA,QAAAA,IAAI,CAAJA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AACD;;AACD,aAAA,IAAA;AAVJ,KAAA,EAAA,IAAA,EAAA,IAAA;AAgBA,WAAA,MAAA;AACD,G;;SAIDyB,G,GAAAA,SAAAA,GAAAA,GAAAA;AACE;AACA,QAAA,MAAA;AACA,SAAA,gBAAA,EAAA;AAEE,cAAA,KAAA,EAAA;AACE,UAAMC,GAAG,GAAT,KAAA;;AACA,UAAI,CAAJ,MAAA,EAAa;AACXF,QAAAA,MAAM,GAAGE,GAAG,IAAIA,GAAG,CAAVA,GAAAA,IAAkBA,GAAG,CAA9BF,GAA2BE,EAA3BF;AACD;;AACD,aAAA,GAAA;AAPJ,KAAA,EAAA,IAAA,EAAA,IAAA;AAaA,WAAA,MAAA;AACD,G;;SAID3E,M,GAAAA,SAAAA,MAAAA,GAAAA;AACE,QAAM8E,YAAY,GAAiB;AACjCC,MAAAA,IAAI,EAAE,KAD2B,IAAA;AAEjCH,MAAAA,GAAG,EAAE,KAF4B,GAAA;AAGjCvB,MAAAA,IAAI,EAAE,KAH2B,IAAA;AAIjCH,MAAAA,IAAI,EAAE,KAJ2B,IAAA;AAKjCK,MAAAA,MAAM,EAAE,KALyB,MAAA;AAMjCC,MAAAA,OAAO,EAAE,KANwB,OAAA;AAOjCwB,MAAAA,OAAO,EAAE,KAPwB,OAAA;AAQjCN,MAAAA,MAAM,EAAE,KARyB,MAAA;AASjCO,MAAAA,UAAU,EAAE,KATqB,UAAA;AAUjCC,MAAAA,SAAS,EAAE,KAVsB,SAAA;AAWjCC,MAAAA,UAAU,EAAE,KAXqB,UAAA;AAYjCC,MAAAA,UAAU,EAAE,KAZqB,UAAA;AAajCC,MAAAA,YAAY,EAAE,KAbmB,YAAA;AAcjCC,MAAAA,aAAa,EAAE,KAdkB,aAAA;AAejCC,MAAAA,aAAa,EAAE,KAfkB,aAAA;AAgBjCC,MAAAA,YAAY,EAAE,KAAKA;AAhBc,KAAnC;;uBA6BI,KAAK3M,K;QATPiH,SAAAA,GAAAA,YAAAA,CAAAA,S;QACAE,MAAAA,GAAAA,YAAAA,CAAAA,M;QACAD,QAAAA,GAAAA,YAAAA,CAAAA,Q;QACAtD,IAAAA,GAAAA,YAAAA,CAAAA,I;2CACAlF,M;QAGKkO,YAAAA,GAAAA,6BAAAA,CAAAA,mBAAAA,EAAAA,CAAAA,UAAAA,EAAAA,kBAAAA,CAAAA,C;;AAIP,QAAM5M,KAAK,GAAA,QAAA,CAAA,EAAA,EAAA,YAAA,EAAA;AAEToJ,MAAAA,IAAI,EAFK,YAAA;AAGTxF,MAAAA,IAAI,EAAJA;AAHS,KAAA,CAAX;;AAMA,WAAOqD,SAAS,GACZrK,aAAAA,CAAAA,SAAAA,EADY,KACZA,CADY,GAEZuK,MAAM,GACLA,MAAc,CADT,KACS,CADT,GAEND,QAAQ,CAAA;AAAA,MACR,OAAA,QAAA,KAAA,UAAA,GACGA,QAAgB,CADnB,KACmB,CADnB,GAEE,CAACvK,eAAe,CAAhB,QAAgB,CAAhB,GACAC,QAAAA,CAAAA,IAAAA,CADA,QACAA,CADA,GAHM,IAAA,GAJZ,IAAA;AAWD,G;;;EA1PwCA,S;;AAIlCmO,eAAAA,CAAAA,YAAAA,GAAe;AACpBtL,EAAAA,gBAAgB,EAAE;AADE,CAAfsL;AAyPT,IAAa8B,UAAU,GAAA,aAAG1C,OAAO,CAA1B,eAA0B,CAAjC;;ICxWM2C,gBAAAA,G;;;;;;;;;SAGJC,qB,GAAAA,SAAAA,qBAAAA,CAAAA,KAAAA,EAAAA;AAGE,QACE9P,KAAK,CAAC,KAAA,KAAA,CAAA,MAAA,CAAD,MAAA,EAA2B,KAAA,KAAA,CAAhCA,IAAK,CAALA,KACEA,KAAK,CAAC+C,KAAK,CAALA,MAAAA,CAAD,MAAA,EAAsB,KAAA,KAAA,CAD7B/C,IACO,CADPA,IAEAA,KAAK,CAAC,KAAA,KAAA,CAAA,MAAA,CAAD,OAAA,EAA4B,KAAA,KAAA,CAAjCA,IAAK,CAALA,KACEA,KAAK,CAAC+C,KAAK,CAALA,MAAAA,CAAD,OAAA,EAAuB,KAAA,KAAA,CAH9B/C,IAGO,CAHPA,IAIAR,MAAM,CAANA,IAAAA,CAAY,KAAZA,KAAAA,EAAAA,MAAAA,KAAmCA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EALrC,MAAA,EAME;AACA,aAAA,IAAA;AAPF,KAAA,MAQO;AACL,aAAA,KAAA;AACD;AACF,G;;SAED0K,M,GAAAA,SAAAA,MAAAA,GAAAA;sBAC+D,KAAKnH,K;QAA5DiH,SAAAA,GAAAA,WAAAA,CAAAA,S;QAAWvI,MAAAA,GAAAA,WAAAA,CAAAA,M;QAAQyI,MAAAA,GAAAA,WAAAA,CAAAA,M;QAAQD,QAAAA,GAAAA,WAAAA,CAAAA,Q;QAAUtD,IAAAA,GAAAA,WAAAA,CAAAA,I;QAAS7D,IAAAA,GAAAA,6BAAAA,CAAAA,WAAAA,EAAAA,CAAAA,WAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,UAAAA,EAAAA,MAAAA,CAAAA,C;;AAEpD,QAAMiN,KAAK,GAAG/P,KAAK,CAACyB,MAAM,CAAP,OAAA,EAAnB,IAAmB,CAAnB;AACA,QAAMoE,KAAK,GAAG7F,KAAK,CAACyB,MAAM,CAAP,MAAA,EAAnB,IAAmB,CAAnB;AAEA,WAAO,CAAC,CAAD,KAAA,IAAW,CAAC,CAAZ,KAAA,GACHyI,MAAM,GACJlL,UAAU,CAAVA,MAAU,CAAVA,GACEkL,MAAM,CADRlL,KACQ,CADRA,GADI,IAAA,GAIJiL,QAAQ,GACRjL,UAAU,CAAVA,QAAU,CAAVA,GACEiL,QAAQ,CADVjL,KACU,CADVA,GADQ,IAAA,GAIRgL,SAAS,GACTrK,aAAAA,CAAAA,SAAAA,EAAAA,IAAAA,EADS,KACTA,CADS,GATR,KAAA,GAAP,IAAA;AAaD,G;;;EAtC4BA,S;;AAyC/B,IAAaqQ,YAAY,GAAA,aAAG9C,OAAO,CAA5B,gBAA4B,CAAnC;AChBA;;;;;IAIM+C,cAAAA,G;;;AAIJ,WAAA,cAAA,CAAA,KAAA,EAAA;;;AACE,IAAA,KAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,KAAA,IAAA;QACQ/F,MAAAA,GAA8CnH,KAAAA,CAA9CmH,M;QAAQD,QAAAA,GAAsClH,KAAAA,CAAtCkH,Q;QAAUD,SAAAA,GAA4BjH,KAAAA,CAA5BiH,S;QAAeN,EAAAA,GAAa3G,KAAAA,CAAjBiJ,E;QAAQrF,IAAAA,GAAS5D,KAAAA,CAAT4D,I;AAC7C,KACE,CADF,MAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAA,4GAAA,IAAA,GAAT,uCAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAIA,KACE,EAAEqD,SAAS,IADb,MACE,CADF,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,0IAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,KACE,EAAEN,EAAE,IAAFA,QAAAA,IAAkB1K,UAAU,CADhC,QACgC,CAA9B,CADF,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,6IAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,KACE,EAAEgL,SAAS,IAATA,QAAAA,IAAyBhL,UAAU,CADvC,QACuC,CAArC,CADF,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,2JAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,KACE,EAAEkL,MAAM,IAANA,QAAAA,IAAsB,CAACxK,eAAe,CAD1C,QAC0C,CAAxC,CADF,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,wIAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;;AAID;;;;SAEDoQ,qB,GAAAA,SAAAA,qBAAAA,CAAAA,KAAAA,EAAAA;AACE,QAAI,KAAA,KAAA,CAAJ,YAAA,EAA6B;AAC3B,aAAO,KAAA,KAAA,CAAA,YAAA,CAAA,KAAA,EAA+B,KAAtC,KAAO,CAAP;AADF,KAAA,MAEO,IACL/M,KAAK,CAALA,IAAAA,KAAe,KAAA,KAAA,CAAfA,IAAAA,IACA/C,KAAK,CAAC+C,KAAK,CAALA,MAAAA,CAAD,MAAA,EAAsB,KAAA,KAAA,CAA3B/C,IAAK,CAALA,KACEA,KAAK,CAAC,KAAA,KAAA,CAAA,MAAA,CAAD,MAAA,EAA2B,KAAA,KAAA,CAFlC+C,IAEO,CAFPA,IAGA/C,KAAK,CAAC+C,KAAK,CAALA,MAAAA,CAAD,MAAA,EAAsB,KAAA,KAAA,CAA3B/C,IAAK,CAALA,KACEA,KAAK,CAAC,KAAA,KAAA,CAAA,MAAA,CAAD,MAAA,EAA2B,KAAA,KAAA,CAJlC+C,IAIO,CAJPA,IAKA/C,KAAK,CAAC+C,KAAK,CAALA,MAAAA,CAAD,OAAA,EAAuB,KAAA,KAAA,CAA5B/C,IAAK,CAALA,KACEA,KAAK,CAAC,KAAA,KAAA,CAAA,MAAA,CAAD,OAAA,EAA4B,KAAA,KAAA,CANnC+C,IAMO,CANPA,IAOAvD,MAAM,CAANA,IAAAA,CAAY,KAAZA,KAAAA,EAAAA,MAAAA,KAAmCA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EAPnCuD,MAAAA,IAQAA,KAAK,CAALA,MAAAA,CAAAA,YAAAA,KAA8B,KAAA,KAAA,CAAA,MAAA,CATzB,YAAA,EAUL;AACA,aAAA,IAAA;AAXK,KAAA,MAYA;AACL,aAAA,KAAA;AACD;AACF,G;;SAEDmN,iB,GAAAA,SAAAA,iBAAAA,GAAAA;AACE;AACA;AACA,SAAA,KAAA,CAAA,MAAA,CAAA,aAAA,CAAgC,KAAA,KAAA,CAAhC,IAAA,EAAiD;AAC/CnK,MAAAA,QAAQ,EAAE,KAAA,KAAA,CAAWA;AAD0B,KAAjD;AAGD,G;;SAEDgI,kB,GAAAA,SAAAA,kBAAAA,CAAAA,SAAAA,EAAAA;AACE,QAAI,KAAA,KAAA,CAAA,IAAA,KAAoBC,SAAS,CAAjC,IAAA,EAAwC;AACtC,WAAA,KAAA,CAAA,MAAA,CAAA,eAAA,CAAkCA,SAAS,CAA3C,IAAA;AACA,WAAA,KAAA,CAAA,MAAA,CAAA,aAAA,CAAgC,KAAA,KAAA,CAAhC,IAAA,EAAiD;AAC/CjI,QAAAA,QAAQ,EAAE,KAAA,KAAA,CAAWA;AAD0B,OAAjD;AAGD;;AAED,QAAI,KAAA,KAAA,CAAA,QAAA,KAAwBiI,SAAS,CAArC,QAAA,EAAgD;AAC9C,WAAA,KAAA,CAAA,MAAA,CAAA,aAAA,CAAgC,KAAA,KAAA,CAAhC,IAAA,EAAiD;AAC/CjI,QAAAA,QAAQ,EAAE,KAAA,KAAA,CAAWA;AAD0B,OAAjD;AAGD;AACF,G;;SAEDoK,oB,GAAAA,SAAAA,oBAAAA,GAAAA;AACE,SAAA,KAAA,CAAA,MAAA,CAAA,eAAA,CAAkC,KAAA,KAAA,CAAlC,IAAA;AACD,G;;SAEDjG,M,GAAAA,SAAAA,MAAAA,GAAAA;sBAWM,KAAKnH,K;QARP4D,IAAAA,GAAAA,WAAAA,CAAAA,I;QACAuD,MAAAA,GAAAA,WAAAA,CAAAA,M;QACIR,EAAAA,GAAAA,WAAAA,CAAJsC,E;QACA/B,QAAAA,GAAAA,WAAAA,CAAAA,Q;QACAD,SAAAA,GAAAA,WAAAA,CAAAA,S;QAEAvI,MAAAA,GAAAA,WAAAA,CAAAA,M;QACGsB,KAAAA,GAAAA,6BAAAA,CAAAA,WAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MAAAA,EAAAA,QAAAA,EAAAA,IAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,cAAAA,EAAAA,QAAAA,CAAAA,C;;QAMA4M,YAAAA,GAAAA,6BAAAA,CACDlO,MADCkO,EACDlO,CAAAA,UAAAA,EAAAA,kBAAAA,CADCkO,C;;AAEL,QAAM1L,KAAK,GAAG;AACZlF,MAAAA,KAAK,EACH,KAAK,CAAL,IAAA,KAAA,OAAA,IAA0BgE,KAAK,CAALA,IAAAA,KAA1B,UAAA,GACIA,KAAK,CADT,KAAA,CAAA;AAAA,QAEI/C,KAAK,CAACyB,MAAM,CAAP,MAAA,EAJC,IAID,CAJC;AAKZkF,MAAAA,IAAI,EALQ,IAAA;AAMZ4C,MAAAA,QAAQ,EAAE9H,MAAM,CANJ,YAAA;AAOZ+H,MAAAA,MAAM,EAAE/H,MAAM,CAACqG;AAPH,KAAd;AASA,QAAMmE,IAAI,GAAG;AACXlN,MAAAA,KAAK,EAAEiB,KAAK,CAACyB,MAAM,CAAP,MAAA,EADD,IACC,CADD;AAEXoE,MAAAA,KAAK,EAAE7F,KAAK,CAACyB,MAAM,CAAP,MAAA,EAFD,IAEC,CAFD;AAGXI,MAAAA,OAAO,EAAE,CAAC,CAAC7B,KAAK,CAACyB,MAAM,CAAP,OAAA,EAHL,IAGK,CAHL;AAIXqH,MAAAA,YAAY,EAAE9I,KAAK,CAACyB,MAAM,CAAP,aAAA,EAJR,IAIQ,CAJR;AAKXyB,MAAAA,cAAc,EAAE,CAAC,CAAClD,KAAK,CAACyB,MAAM,CAAP,cAAA,EALZ,IAKY,CALZ;AAMXsH,MAAAA,YAAY,EAAE/I,KAAK,CAACyB,MAAM,CAAP,aAAA,EAAA,IAAA;AANR,KAAb;AASA,QAAM2O,GAAG,GAAG;AAAEnM,MAAAA,KAAK,EAAP,KAAA;AAASgI,MAAAA,IAAI,EAAb,IAAA;AAAeE,MAAAA,IAAI,EAAEwD;AAArB,KAAZ;;AAEA,QAAA,MAAA,EAAY;AACV,aAAQzF,MAAc,CAAtB,GAAsB,CAAtB;AACD;;AAED,QAAIlL,UAAU,CAAd,QAAc,CAAd,EAA0B;AACxB,aAAQiL,QAA4D,CAApE,GAAoE,CAApE;AACD;;AAED,QAAA,SAAA,EAAe;AACb;AACA,UAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;AAAA,YACzBE,QADyB,GACHpH,KADG,CAAA,QAAA;AAAA,YACZD,IADY,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,UAAA,CAAA,CAAA;;AAEjC,eAAO,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AAEH2I,UAAAA,GAAG,EAAEtB;AAFF,SAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,CAAA,EAAP,QAAO,CAAP;AAJW,OAAA,CAAA;;;AAWb,aAAO,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AAEHlG,QAAAA,KAAK,EAFF,KAAA;AAEIkI,QAAAA,IAAI,EAAE1K;AAFV,OAAA,EAAA,KAAA,CAAA,EAAP,QAAO,CAAP;AAKD,KA9DHyI,CA8DG;;;AAGD,QAAMkC,SAAS,GAAG1C,EAAE,IAApB,OAAA;;AAEA,QAAI,OAAA,SAAA,KAAJ,QAAA,EAAmC;AAAA,UACzBS,SADyB,GACHpH,KADG,CAAA,QAAA;AAAA,UACZD,KADY,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,UAAA,CAAA,CAAA;;AAEjC,aAAO,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AAEH2I,QAAAA,GAAG,EAAEtB;AAFF,OAAA,EAAA,KAAA,EAAA,EAAA,EAAA,KAAA,CAAA,EAAP,QAAO,CAAP;AAKD;;AAED,WAAOxK,aAAAA,CAAAA,SAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAAAA,EAAP,QAAOA,CAAP;AAKD,G;;;EAhKmDA,S;;AAmKtD,IAAa0Q,SAAS,GAAA,aAAGnD,OAAO,CAAzB,cAAyB,CAAhC","sourcesContent":["import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = React.createContext<FormikContextType<any>>(\n  undefined as any\n);\nexport const FormikProvider = FormikContext.Provider;\nexport const FormikConsumer = FormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  const formik = React.useContext<FormikContextType<Values>>(FormikContext);\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return formik;\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport {\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FormikHelpers, FormikHandlers,\n} from './types';\nimport {\n  isFunction,\n  isString,\n  setIn,\n  isEmptyChildren,\n  isPromise,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  isObject,\n} from './utils';\nimport { FormikProvider } from './FormikContext';\nimport invariant from 'tiny-warning';\nimport { unstable_LowPriority, unstable_runWithPriority } from 'scheduler';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\n  >(formikReducer, {\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise((resolve, reject) => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors == null) {\n          // use loose null check here on purpose\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            errors => {\n              resolve(errors || emptyErrors);\n            },\n            actualException => {\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                  actualException\n                );\n              }\n\n              reject(actualException);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff if something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value))\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run validations and dispatching the result as low-priority via rAF.\n  //\n  // The thinking is that validation as a result of onChange and onBlur\n  // should never block user input. Note: This method should never be called\n  // during the submission phase because validation prior to submission\n  // is actaully high-priority since we absolutely need to guarantee the\n  // form is valid before executing props.onSubmit.\n  const validateFormWithLowPriority = useEventCallback(\n    (values: Values = state.values) => {\n      return unstable_runWithPriority(unstable_LowPriority, () => {\n        return runAllValidations(values)\n          .then(combinedErrors => {\n            if (!!isMounted.current) {\n              dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n            }\n            return combinedErrors;\n          })\n          .catch(actualException => {\n            if (process.env.NODE_ENV !== 'production') {\n              // Users can throw during validate, however they have no way of handling their error on touch / blur. In low priority, we need to handle it\n              console.warn(\n                `Warning: An unhandled error was caught during low priority validation in <Formik validate />`,\n                actualException\n              );\n            }\n          });\n      });\n    }\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          if (!isEqual(state.errors, combinedErrors)) {\n            dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n          }\n        }\n        return combinedErrors;\n      });\n    }\n  );\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      const dispatchFn = () => {\n        dispatch({\n          type: 'RESET_FORM',\n          payload: {\n            isSubmitting: !!nextState && !!nextState.isSubmitting,\n            errors,\n            touched,\n            status,\n            values,\n            isValidating: !!nextState && !!nextState.isValidating,\n            submitCount:\n              !!nextState &&\n              !!nextState.submitCount &&\n              typeof nextState.submitCount === 'number'\n                ? nextState.submitCount\n                : 0,\n          },\n        });\n      };\n\n      if (props.onReset) {\n        const maybePromisedOnReset = (props.onReset as any)(\n          state.values,\n          imperativeMethods\n        );\n\n        if (isPromise(maybePromisedOnReset)) {\n          (maybePromisedOnReset as Promise<any>).then(dispatchFn);\n        } else {\n          dispatchFn();\n        }\n      } else {\n        dispatchFn();\n      }\n    },\n    [props.initialErrors, props.initialStatus, props.initialTouched]\n  );\n\n  React.useEffect(() => {\n    if (\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      initialValues.current = props.initialValues;\n\n      if (enableReinitialize) {\n        resetForm();\n      }\n\n      if (validateOnMount) {\n        validateFormWithLowPriority(initialValues.current);\n      }\n    }\n  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithLowPriority]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialErrors.current, props.initialErrors)\n    ) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors,\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialTouched.current, props.initialTouched)\n    ) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched,\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialStatus.current, props.initialStatus)\n    ) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus,\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (isFunction(fieldRegistry.current[name].validate)) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else if (props.validationSchema) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runValidationSchema(state.values, name)\n        .then((x: any) => x)\n        .then((error: any) => {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: { field: name, value: error[name] },\n          });\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        });\n    }\n\n    return Promise.resolve();\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithLowPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: Values, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_VALUES', payload: values });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithLowPriority(values)\n        : Promise.resolve();\n    }\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithLowPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : !!multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = useEventCallback<FormikHandlers['handleChange']>(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    }\n  );\n\n  const setFieldTouched = useEventCallback(\n    (field: string, touched: boolean = true, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithLowPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = useEventCallback<FormikHandlers['handleBlur']>(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    }\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        // In case an error was thrown and passed to the resolved Promise,\n        // `combinedErrors` can be an instance of an Error. We need to check\n        // that and abort the submit.\n        // If we don't do that, calling `Object.keys(new Error())` yields an\n        // empty array, which causes the validation to pass and the form\n        // to be submitted.\n\n        const isInstanceOfError = combinedErrors instanceof Error;\n        const isActuallyValid =\n          !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          // Proceed with submit...\n          //\n          // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n          // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n          // This would be fine in simple cases, but make it impossible to disable submit\n          // buttons where people use callbacks or promises as side effects (which is basically\n          // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n          //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n          // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n          // cleanup of isSubmitting on behalf of the consumer.\n          let promiseOrUndefined;\n          try {\n            promiseOrUndefined = executeSubmit();\n            // Bail if it's sync, consumer is responsible for cleaning up\n            // via setSubmitting(false)\n            if (promiseOrUndefined === undefined) {\n              return;\n            }\n          } catch (error) {\n            throw error;\n          }\n\n          return Promise.resolve(promiseOrUndefined)\n            .then(result => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n              return result;\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n                // This is a legit error rejected by the onSubmit fn\n                // so we don't want to break the promise chain\n                throw _errors;\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before updating state\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          // throw combinedErrors;\n          if (isInstanceOfError) {\n            throw combinedErrors;\n          }\n        }\n        return;\n      }\n    );\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm().catch(reason => {\n        console.warn(\n          `Warning: An unhandled error was caught from submitForm()`,\n          reason\n        );\n      });\n    }\n  );\n\n  const imperativeMethods: FormikHelpers<Values> = {\n    resetForm,\n\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n    submitForm,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldHelpers = React.useCallback(\n    (name: string): FieldHelperProps<any> => {\n      return {\n        setValue: (value: any, shouldValidate?: boolean) =>\n          setFieldValue(name, value, shouldValidate),\n        setTouched: (value: boolean, shouldValidate?: boolean) =>\n          setFieldTouched(name, value, shouldValidate),\n        setError: (value: any) => setFieldError(name, value),\n      };\n    },\n    [setFieldValue, setFieldTouched, setFieldError]\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject ? nameOrOptions.name : nameOrOptions;\n      const valueState = getIn(state.values, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n        } = nameOrOptions;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n      }\n      return field;\n    },\n    [handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render, innerRef } = props;\n\n  // This allows folks to pass a ref to <Formik />\n  React.useImperativeHandle(innerRef, () => formikbag);\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  const validateData: FormikValues = prepareDataForValidation(values);\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = Array.isArray(values) ? [] : {};\n  for (let k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n/** Return multi select values based on an array of options */\nfunction getSelectedValues(options: any[]) {\n  return Array.from(options)\n    .filter(el => el.selected)\n    .map(el => el.value);\n}\n\n/** Return the next value for a checkbox */\nfunction getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  }\n\n  // If the currentValue was not a boolean we want to return an array\n  let currentArrayOfValues = [];\n  let isValueInArray = false;\n  let index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  }\n\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  }\n\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  }\n\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n  return currentArrayOfValues\n    .slice(0, index)\n    .concat(currentArrayOfValues.slice(index + 1));\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n","import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FieldValidator,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren, isObject } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any, FormValues = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<FormValues>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig<V = any> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<V>>\n    | React.ComponentType\n    | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n    | React.ComponentType<FieldProps<V>['field']>\n    | string\n    | React.ComponentType\n    | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: (props: FieldProps<V>) => React.ReactNode;\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<V>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: FieldValidator;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes &\n  FieldConfig<T> &\n  T & { name: string };\n\nexport type FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>;\n\nexport function useField<Val = any>(\n  propsOrFieldName: string | FieldHookConfig<Val>\n): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>] {\n  const formik = useFormikContext();\n  const {\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    registerField,\n    unregisterField,\n  } = formik;\n\n  const isAnObject = isObject(propsOrFieldName);\n\n  // Normalize propsOrFieldName to FieldHookConfig<Val>\n  const props: FieldHookConfig<Val> = isAnObject\n    ? (propsOrFieldName as FieldHookConfig<Val>)\n    : { name: propsOrFieldName as string };\n\n  const { name: fieldName, validate: validateFn } = props;\n\n  React.useEffect(() => {\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn,\n      });\n    }\n    return () => {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n\n  if (__DEV__) {\n    invariant(\n      formik,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n  }\n\n  invariant(\n    fieldName,\n    'Invalid field name. Either pass `useField` a string or an object containing a `name` key.'\n  );\n\n  return [\n    getFieldProps(props),\n    getFieldMeta(fieldName),\n    getFieldHelpers(fieldName),\n  ];\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n\n    ...formik\n  } = useFormikContext();\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !render,\n        `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"${name}\" render={({field, form}) => ...} /> with <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>`\n      );\n\n      invariant(\n        !(is && children && isFunction(children)),\n        'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n      );\n\n      invariant(\n        !(component && children && isFunction(children)),\n        'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n      );\n\n      invariant(\n        !(render && children && !isEmptyChildren(children)),\n        'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  // Register field and field-level validation with parent <Formik>\n  const { registerField, unregisterField } = formik;\n  React.useEffect(() => {\n    registerField(name, {\n      validate: validate,\n    });\n    return () => {\n      unregisterField(name);\n    };\n  }, [registerField, unregisterField, name, validate]);\n  const field = formik.getFieldProps({ name, ...props });\n  const meta = formik.getFieldMeta(name);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render({ ...legacyBag, meta });\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props },\n      children\n    );\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest },\n      children\n    );\n  }\n\n  return React.createElement(asElement, { ...field, ...props }, children);\n}\n","import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props: FormikFormProps, ref) => {\n    // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n    // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n    const { action, ...rest } = props;\n    const _action = action || '#';\n    const { handleReset, handleSubmit } = useFormikContext();\n    return (\n      <form\n        onSubmit={handleSubmit}\n        ref={ref}\n        onReset={handleReset}\n        action={_action}\n        {...rest}\n      />\n    );\n  }\n);\n\nForm.displayName = 'Form';\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n  FormikTouched,\n  FormikErrors,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToTouched?: (props: Props) => FormikTouched<Values>;\n\n  /**\n   * Map props to the form errors state\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps extends object,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            initialTouched={\n              config.mapPropsToTouched && config.mapPropsToTouched(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            children={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n","import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContextType } from './types';\nimport { FormikConsumer } from './FormikContext';\nimport invariant from 'tiny-warning';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContextType<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => {\n        invariant(\n          !!formik,\n          `Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: ${Comp.name}`\n        );\n        return <Comp {...props} formik={formik} />;\n      }}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  ) as React.ComponentType<OuterProps>;\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyChildren,\n  isFunction,\n  setIn,\n  isEmptyArray,\n} from './utils';\nimport isEqual from 'react-fast-compare';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (\n  arrayLike: ArrayLike<any>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (\n  arrayLike: ArrayLike<any>,\n  index: number,\n  value: any\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      ) &&\n      this.props.formik.validateOnChange\n    ) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n      let updateTouched =\n        typeof alterTouched === 'function' ? alterTouched : fn;\n\n      // values fn should be executed before updateErrors and updateTouched,\n      // otherwise it causes an error with unshift.\n      let values = setIn(\n        prevState.values,\n        name,\n        fn(getIn(prevState.values, name))\n      );\n\n      let fieldError = alterErrors\n        ? updateErrors(getIn(prevState.errors, name))\n        : undefined;\n      let fieldTouched = alterTouched\n        ? updateTouched(getIn(prevState.touched, name))\n        : undefined;\n\n      if (isEmptyArray(fieldError)) {\n        fieldError = undefined;\n      }\n      if (isEmptyArray(fieldTouched)) {\n        fieldTouched = undefined;\n      }\n\n      return {\n        ...prevState,\n        values,\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fieldError)\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fieldTouched)\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContextType<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContextType<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render)\n          ? render(error)\n          : null\n        : children\n        ? isFunction(children)\n          ? children(error)\n          : null\n        : component\n        ? React.createElement(component, rest as any, error)\n        : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContextType<any> }\n>(ErrorMessageImpl);\n","import * as React from 'react';\n\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContextType,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport invariant from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\nimport { FieldConfig } from './Field';\nimport { connect } from './connect';\n\ntype $FixMe = any;\n\nexport interface FastFieldProps<V = any> {\n  field: FieldInputProps<V>;\n  meta: FieldMetaProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport type FastFieldConfig<T> = FieldConfig & {\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(prevProps: FastFieldAttributes<Props>) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return React.createElement(\n          component,\n          { ref: innerRef, ...field, ...(rest as $FixMe) },\n          children\n        );\n      }\n      // We don't pass `meta` for backwards compat\n      return React.createElement(\n        component as React.ComponentClass<$FixMe>,\n        { field, form: formik, ...props },\n        children\n      );\n    }\n\n    // default to input here so we can check for both `as` and `children` above\n    const asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        asElement,\n        { ref: innerRef, ...field, ...(rest as $FixMe) },\n        children\n      );\n    }\n\n    return React.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n"]},"metadata":{},"sourceType":"module"}