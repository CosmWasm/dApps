{"ast":null,"code":"'use strict';\n\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'; // pre-compute lookup table\n\nvar ALPHABET_MAP = {};\n\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z);\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous');\n  ALPHABET_MAP[x] = z;\n}\n\nfunction polymodStep(pre) {\n  var b = pre >> 25;\n  return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;\n}\n\nfunction prefixChk(prefix) {\n  var chk = 1;\n\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')';\n    chk = polymodStep(chk) ^ c >> 5;\n  }\n\n  chk = polymodStep(chk);\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i);\n    chk = polymodStep(chk) ^ v & 0x1f;\n  }\n\n  return chk;\n}\n\nfunction encode(prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90;\n  if (prefix.length + 7 + words.length > LIMIT) throw new TypeError('Exceeds length limit');\n  prefix = prefix.toLowerCase(); // determine chk mod\n\n  var chk = prefixChk(prefix);\n  if (typeof chk === 'string') throw new Error(chk);\n  var result = prefix + '1';\n\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i];\n    if (x >> 5 !== 0) throw new Error('Non 5-bit word');\n    chk = polymodStep(chk) ^ x;\n    result += ALPHABET.charAt(x);\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk);\n  }\n\n  chk ^= 1;\n\n  for (i = 0; i < 6; ++i) {\n    var v = chk >> (5 - i) * 5 & 0x1f;\n    result += ALPHABET.charAt(v);\n  }\n\n  return result;\n}\n\nfunction __decode(str, LIMIT) {\n  LIMIT = LIMIT || 90;\n  if (str.length < 8) return str + ' too short';\n  if (str.length > LIMIT) return 'Exceeds length limit'; // don't allow mixed case\n\n  var lowered = str.toLowerCase();\n  var uppered = str.toUpperCase();\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str;\n  str = lowered;\n  var split = str.lastIndexOf('1');\n  if (split === -1) return 'No separator character for ' + str;\n  if (split === 0) return 'Missing prefix for ' + str;\n  var prefix = str.slice(0, split);\n  var wordChars = str.slice(split + 1);\n  if (wordChars.length < 6) return 'Data too short';\n  var chk = prefixChk(prefix);\n  if (typeof chk === 'string') return chk;\n  var words = [];\n\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i);\n    var v = ALPHABET_MAP[c];\n    if (v === undefined) return 'Unknown character ' + c;\n    chk = polymodStep(chk) ^ v; // not in the checksum?\n\n    if (i + 6 >= wordChars.length) continue;\n    words.push(v);\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str;\n  return {\n    prefix: prefix,\n    words: words\n  };\n}\n\nfunction decodeUnsafe() {\n  var res = __decode.apply(null, arguments);\n\n  if (typeof res === 'object') return res;\n}\n\nfunction decode(str) {\n  var res = __decode.apply(null, arguments);\n\n  if (typeof res === 'object') return res;\n  throw new Error(res);\n}\n\nfunction convert(data, inBits, outBits, pad) {\n  var value = 0;\n  var bits = 0;\n  var maxV = (1 << outBits) - 1;\n  var result = [];\n\n  for (var i = 0; i < data.length; ++i) {\n    value = value << inBits | data[i];\n    bits += inBits;\n\n    while (bits >= outBits) {\n      bits -= outBits;\n      result.push(value >> bits & maxV);\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push(value << outBits - bits & maxV);\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding';\n    if (value << outBits - bits & maxV) return 'Non-zero padding';\n  }\n\n  return result;\n}\n\nfunction toWordsUnsafe(bytes) {\n  var res = convert(bytes, 8, 5, true);\n  if (Array.isArray(res)) return res;\n}\n\nfunction toWords(bytes) {\n  var res = convert(bytes, 8, 5, true);\n  if (Array.isArray(res)) return res;\n  throw new Error(res);\n}\n\nfunction fromWordsUnsafe(words) {\n  var res = convert(words, 5, 8, false);\n  if (Array.isArray(res)) return res;\n}\n\nfunction fromWords(words) {\n  var res = convert(words, 5, 8, false);\n  if (Array.isArray(res)) return res;\n  throw new Error(res);\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n};","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/bech32/index.js"],"names":["ALPHABET","ALPHABET_MAP","z","length","x","charAt","undefined","TypeError","polymodStep","pre","b","prefixChk","prefix","chk","i","c","charCodeAt","v","encode","words","LIMIT","toLowerCase","Error","result","__decode","str","lowered","uppered","toUpperCase","split","lastIndexOf","slice","wordChars","push","decodeUnsafe","res","apply","arguments","decode","convert","data","inBits","outBits","pad","value","bits","maxV","toWordsUnsafe","bytes","Array","isArray","toWords","fromWordsUnsafe","fromWords","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n"]},"metadata":{},"sourceType":"script"}