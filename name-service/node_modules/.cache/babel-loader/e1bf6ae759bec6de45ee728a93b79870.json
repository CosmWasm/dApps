{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toRfc3339 = exports.fromRfc3339 = void 0;\n\nconst readonly_date_1 = require(\"readonly-date\");\n\nconst rfc3339Matcher = /^(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,9})?((?:[+-]\\d{2}:\\d{2})|Z)$/;\n\nfunction padded(integer, length = 2) {\n  const filled = \"00000\" + integer.toString();\n  return filled.substring(filled.length - length);\n}\n\nfunction fromRfc3339(str) {\n  const matches = rfc3339Matcher.exec(str);\n\n  if (!matches) {\n    throw new Error(\"Date string is not in RFC3339 format\");\n  }\n\n  const year = +matches[1];\n  const month = +matches[2];\n  const day = +matches[3];\n  const hour = +matches[4];\n  const minute = +matches[5];\n  const second = +matches[6]; // fractional seconds match either undefined or a string like \".1\", \".123456789\"\n\n  const milliSeconds = matches[7] ? Math.floor(+matches[7] * 1000) : 0;\n  let tzOffsetSign;\n  let tzOffsetHours;\n  let tzOffsetMinutes; // if timezone is undefined, it must be Z or nothing (otherwise the group would have captured).\n\n  if (matches[8] === \"Z\") {\n    tzOffsetSign = 1;\n    tzOffsetHours = 0;\n    tzOffsetMinutes = 0;\n  } else {\n    tzOffsetSign = matches[8].substring(0, 1) === \"-\" ? -1 : 1;\n    tzOffsetHours = +matches[8].substring(1, 3);\n    tzOffsetMinutes = +matches[8].substring(4, 6);\n  }\n\n  const tzOffset = tzOffsetSign * (tzOffsetHours * 60 + tzOffsetMinutes) * 60; // seconds\n\n  return new readonly_date_1.ReadonlyDate(readonly_date_1.ReadonlyDate.UTC(year, month - 1, day, hour, minute, second, milliSeconds) - tzOffset * 1000);\n}\n\nexports.fromRfc3339 = fromRfc3339;\n\nfunction toRfc3339(date) {\n  const year = date.getUTCFullYear();\n  const month = padded(date.getUTCMonth() + 1);\n  const day = padded(date.getUTCDate());\n  const hour = padded(date.getUTCHours());\n  const minute = padded(date.getUTCMinutes());\n  const second = padded(date.getUTCSeconds());\n  const ms = padded(date.getUTCMilliseconds(), 3);\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}.${ms}Z`;\n}\n\nexports.toRfc3339 = toRfc3339;","map":{"version":3,"sources":["../src/rfc3339.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toRfc3339 = exports.fromRfc3339 = void 0;\nconst readonly_date_1 = require(\"readonly-date\");\nconst rfc3339Matcher = /^(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,9})?((?:[+-]\\d{2}:\\d{2})|Z)$/;\nfunction padded(integer, length = 2) {\n    const filled = \"00000\" + integer.toString();\n    return filled.substring(filled.length - length);\n}\nfunction fromRfc3339(str) {\n    const matches = rfc3339Matcher.exec(str);\n    if (!matches) {\n        throw new Error(\"Date string is not in RFC3339 format\");\n    }\n    const year = +matches[1];\n    const month = +matches[2];\n    const day = +matches[3];\n    const hour = +matches[4];\n    const minute = +matches[5];\n    const second = +matches[6];\n    // fractional seconds match either undefined or a string like \".1\", \".123456789\"\n    const milliSeconds = matches[7] ? Math.floor(+matches[7] * 1000) : 0;\n    let tzOffsetSign;\n    let tzOffsetHours;\n    let tzOffsetMinutes;\n    // if timezone is undefined, it must be Z or nothing (otherwise the group would have captured).\n    if (matches[8] === \"Z\") {\n        tzOffsetSign = 1;\n        tzOffsetHours = 0;\n        tzOffsetMinutes = 0;\n    }\n    else {\n        tzOffsetSign = matches[8].substring(0, 1) === \"-\" ? -1 : 1;\n        tzOffsetHours = +matches[8].substring(1, 3);\n        tzOffsetMinutes = +matches[8].substring(4, 6);\n    }\n    const tzOffset = tzOffsetSign * (tzOffsetHours * 60 + tzOffsetMinutes) * 60; // seconds\n    return new readonly_date_1.ReadonlyDate(readonly_date_1.ReadonlyDate.UTC(year, month - 1, day, hour, minute, second, milliSeconds) - tzOffset * 1000);\n}\nexports.fromRfc3339 = fromRfc3339;\nfunction toRfc3339(date) {\n    const year = date.getUTCFullYear();\n    const month = padded(date.getUTCMonth() + 1);\n    const day = padded(date.getUTCDate());\n    const hour = padded(date.getUTCHours());\n    const minute = padded(date.getUTCMinutes());\n    const second = padded(date.getUTCSeconds());\n    const ms = padded(date.getUTCMilliseconds(), 3);\n    return `${year}-${month}-${day}T${hour}:${minute}:${second}.${ms}Z`;\n}\nexports.toRfc3339 = toRfc3339;\n//# sourceMappingURL=rfc3339.js.map"]},"metadata":{},"sourceType":"script"}