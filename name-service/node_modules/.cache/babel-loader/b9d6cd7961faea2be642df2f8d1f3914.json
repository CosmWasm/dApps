{"ast":null,"code":"var _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/account.tsx\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\nfunction dummyRefresh() {}\n\nconst defaultContext = () => {\n  return {\n    refreshAccount: dummyRefresh\n  };\n};\n\nexport const AccountContext = React.createContext(defaultContext());\nexport const useAccount = () => React.useContext(AccountContext);\nexport function AccountProvider(props) {\n  const [value, setValue] = React.useState({});\n  const {\n    loading,\n    getClient\n  } = useSdk();\n  const {\n    setError\n  } = useError();\n\n  const refreshAccount = () => {\n    if (!loading) {\n      getClient().getAccount().then(account => setValue({\n        account\n      })).catch(setError);\n    }\n  }; // this should just be called once on startup\n\n\n  React.useEffect(refreshAccount, [loading, getClient, setError]);\n  const context = {\n    refreshAccount,\n    account: value.account\n  };\n  return /*#__PURE__*/React.createElement(AccountContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/account.tsx"],"names":["React","useError","useSdk","dummyRefresh","defaultContext","refreshAccount","AccountContext","createContext","useAccount","useContext","AccountProvider","props","value","setValue","useState","loading","getClient","setError","getAccount","then","account","catch","useEffect","context","children"],"mappings":";AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;;AAUA,SAASC,YAAT,GAA8B,CAAE;;AAEhC,MAAMC,cAAc,GAAG,MAA0B;AAC/C,SAAO;AACLC,IAAAA,cAAc,EAAEF;AADX,GAAP;AAGD,CAJD;;AAMA,OAAO,MAAMG,cAAc,GAAGN,KAAK,CAACO,aAAN,CAAwCH,cAAc,EAAtD,CAAvB;AAEP,OAAO,MAAMI,UAAU,GAAG,MAA0BR,KAAK,CAACS,UAAN,CAAiBH,cAAjB,CAA7C;AAEP,OAAO,SAASI,eAAT,CAAyBC,KAAzB,EAAyE;AAC9E,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,KAAK,CAACc,QAAN,CAAsB,EAAtB,CAA1B;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBd,MAAM,EAArC;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAehB,QAAQ,EAA7B;;AAEA,QAAMI,cAAc,GAAG,MAAY;AACjC,QAAI,CAACU,OAAL,EAAc;AACZC,MAAAA,SAAS,GACNE,UADH,GAEGC,IAFH,CAESC,OAAD,IAAaP,QAAQ,CAAC;AAAEO,QAAAA;AAAF,OAAD,CAF7B,EAGGC,KAHH,CAGSJ,QAHT;AAID;AACF,GAPD,CAL8E,CAc9E;;;AACAjB,EAAAA,KAAK,CAACsB,SAAN,CAAgBjB,cAAhB,EAAgC,CAACU,OAAD,EAAUC,SAAV,EAAqBC,QAArB,CAAhC;AAEA,QAAMM,OAA2B,GAAG;AAClClB,IAAAA,cADkC;AAElCe,IAAAA,OAAO,EAAER,KAAK,CAACQ;AAFmB,GAApC;AAKA,sBAAO,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEG,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0CZ,KAAK,CAACa,QAAhD,CAAP;AACD","sourcesContent":["import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\n\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\nexport interface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nfunction dummyRefresh(): void {}\n\nconst defaultContext = (): AccountContextType => {\n  return {\n    refreshAccount: dummyRefresh,\n  };\n};\n\nexport const AccountContext = React.createContext<AccountContextType>(defaultContext());\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider(props: { readonly children: any }): JSX.Element {\n  const [value, setValue] = React.useState<State>({});\n  const { loading, getClient } = useSdk();\n  const { setError } = useError();\n\n  const refreshAccount = (): void => {\n    if (!loading) {\n      getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  };\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [loading, getClient, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{props.children}</AccountContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}