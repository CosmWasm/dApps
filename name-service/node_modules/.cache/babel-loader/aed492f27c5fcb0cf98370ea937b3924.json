{"ast":null,"code":"\"use strict\"; // Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.Ed25519 = exports.Ed25519Keypair = exports.Argon2id = exports.isArgon2idOptions = void 0;\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\n\nfunction isArgon2idOptions(thing) {\n  if (!utils_1.isNonNullObject(thing)) return false;\n  if (typeof thing.outputLength !== \"number\") return false;\n  if (typeof thing.opsLimit !== \"number\") return false;\n  if (typeof thing.memLimitKib !== \"number\") return false;\n  return true;\n}\n\nexports.isArgon2idOptions = isArgon2idOptions;\n\nclass Argon2id {\n  static async execute(password, salt, options) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt, // libsodium only supports 16 byte salts and will throw when you don't respect that\n    options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13);\n  }\n\n}\n\nexports.Argon2id = Argon2id;\n\nclass Ed25519Keypair {\n  constructor(privkey, pubkey) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  } // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n\n\n  static fromLibsodiumPrivkey(libsodiumPrivkey) {\n    if (libsodiumPrivkey.length !== 64) {\n      throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);\n    }\n\n    return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n  }\n\n  toLibsodiumPrivkey() {\n    return new Uint8Array([...this.privkey, ...this.pubkey]);\n  }\n\n}\n\nexports.Ed25519Keypair = Ed25519Keypair;\n\nclass Ed25519 {\n  /**\n   * Generates a keypair deterministically from a given 32 bytes seed.\n   *\n   * This seed equals the Ed25519 private key.\n   * For implementation details see crypto_sign_seed_keypair in\n   * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n   * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  static async makeKeypair(seed) {\n    await libsodium_wrappers_1.default.ready;\n    const keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n    return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);\n  }\n\n  static async createSignature(message, keyPair) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());\n  }\n\n  static async verifySignature(signature, message, pubkey) {\n    await libsodium_wrappers_1.default.ready;\n    return libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey);\n  }\n\n}\n\nexports.Ed25519 = Ed25519;\n/**\n * Nonce length in bytes for all flavours of XChaCha20.\n *\n * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes\n */\n\nexports.xchacha20NonceLength = 24;\n\nclass Xchacha20poly1305Ietf {\n  static async encrypt(message, key, nonce) {\n    await libsodium_wrappers_1.default.ready;\n    const additionalData = null;\n    return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n    nonce, key);\n  }\n\n  static async decrypt(ciphertext, key, nonce) {\n    await libsodium_wrappers_1.default.ready;\n    const additionalData = null;\n    return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n    ciphertext, additionalData, nonce, key);\n  }\n\n}\n\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;","map":{"version":3,"sources":["../src/libsodium.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.Ed25519 = exports.Ed25519Keypair = exports.Argon2id = exports.isArgon2idOptions = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\nconst libsodium_wrappers_1 = __importDefault(require(\"libsodium-wrappers\"));\nfunction isArgon2idOptions(thing) {\n    if (!utils_1.isNonNullObject(thing))\n        return false;\n    if (typeof thing.outputLength !== \"number\")\n        return false;\n    if (typeof thing.opsLimit !== \"number\")\n        return false;\n    if (typeof thing.memLimitKib !== \"number\")\n        return false;\n    return true;\n}\nexports.isArgon2idOptions = isArgon2idOptions;\nclass Argon2id {\n    static async execute(password, salt, options) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_pwhash(options.outputLength, password, salt, // libsodium only supports 16 byte salts and will throw when you don't respect that\n        options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_1.default.crypto_pwhash_ALG_ARGON2ID13);\n    }\n}\nexports.Argon2id = Argon2id;\nclass Ed25519Keypair {\n    constructor(privkey, pubkey) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n    }\n    // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n    static fromLibsodiumPrivkey(libsodiumPrivkey) {\n        if (libsodiumPrivkey.length !== 64) {\n            throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);\n        }\n        return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n    }\n    toLibsodiumPrivkey() {\n        return new Uint8Array([...this.privkey, ...this.pubkey]);\n    }\n}\nexports.Ed25519Keypair = Ed25519Keypair;\nclass Ed25519 {\n    /**\n     * Generates a keypair deterministically from a given 32 bytes seed.\n     *\n     * This seed equals the Ed25519 private key.\n     * For implementation details see crypto_sign_seed_keypair in\n     * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n     * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n     */\n    static async makeKeypair(seed) {\n        await libsodium_wrappers_1.default.ready;\n        const keypair = libsodium_wrappers_1.default.crypto_sign_seed_keypair(seed);\n        return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);\n    }\n    static async createSignature(message, keyPair) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());\n    }\n    static async verifySignature(signature, message, pubkey) {\n        await libsodium_wrappers_1.default.ready;\n        return libsodium_wrappers_1.default.crypto_sign_verify_detached(signature, message, pubkey);\n    }\n}\nexports.Ed25519 = Ed25519;\n/**\n * Nonce length in bytes for all flavours of XChaCha20.\n *\n * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes\n */\nexports.xchacha20NonceLength = 24;\nclass Xchacha20poly1305Ietf {\n    static async encrypt(message, key, nonce) {\n        await libsodium_wrappers_1.default.ready;\n        const additionalData = null;\n        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n        nonce, key);\n    }\n    static async decrypt(ciphertext, key, nonce) {\n        await libsodium_wrappers_1.default.ready;\n        const additionalData = null;\n        return libsodium_wrappers_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null, // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n        ciphertext, additionalData, nonce, key);\n    }\n}\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;\n//# sourceMappingURL=libsodium.js.map"]},"metadata":{},"sourceType":"script"}