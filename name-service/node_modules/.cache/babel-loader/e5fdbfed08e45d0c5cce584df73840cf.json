{"ast":null,"code":"import*as React from\"react\";const defaultContext={setError:()=>{return;},clearError:()=>{return;}};const ErrorContext=React.createContext(defaultContext);export const useError=()=>React.useContext(ErrorContext);export function ErrorProvider({children}){const[error,setError]=React.useState();const context={error:error,setError:setError,clearError:()=>{setError(undefined);}};return/*#__PURE__*/React.createElement(ErrorContext.Provider,{value:context},children);}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/error.tsx"],"names":["React","defaultContext","setError","clearError","ErrorContext","createContext","useError","useContext","ErrorProvider","children","error","useState","context","undefined"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAQA,KAAMC,CAAAA,cAAgC,CAAG,CACvCC,QAAQ,CAAE,IAAM,CACd,OACD,CAHsC,CAIvCC,UAAU,CAAE,IAAM,CAChB,OACD,CANsC,CAAzC,CASA,KAAMC,CAAAA,YAAY,CAAGJ,KAAK,CAACK,aAAN,CAAsCJ,cAAtC,CAArB,CAEA,MAAO,MAAMK,CAAAA,QAAQ,CAAG,IAAwBN,KAAK,CAACO,UAAN,CAAiBH,YAAjB,CAAzC,CAEP,MAAO,SAASI,CAAAA,aAAT,CAAuB,CAAEC,QAAF,CAAvB,CAA0F,CAC/F,KAAM,CAACC,KAAD,CAAQR,QAAR,EAAoBF,KAAK,CAACW,QAAN,EAA1B,CAEA,KAAMC,CAAAA,OAAyB,CAAG,CAChCF,KAAK,CAAEA,KADyB,CAEhCR,QAAQ,CAAEA,QAFsB,CAGhCC,UAAU,CAAE,IAAM,CAChBD,QAAQ,CAACW,SAAD,CAAR,CACD,CAL+B,CAAlC,CAQA,mBAAO,oBAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAED,OAA9B,EAAwCH,QAAxC,CAAP,CACD","sourcesContent":["import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}