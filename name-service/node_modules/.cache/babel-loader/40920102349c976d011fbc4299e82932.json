{"ast":null,"code":"import\"antd/lib/button/style\";import _Button from\"antd/lib/button\";import\"antd/lib/typography/style\";import _Typography from\"antd/lib/typography\";import copyToClipboard from\"clipboard-copy\";import React,{useEffect,useState}from\"react\";import{useHistory}from\"react-router-dom\";import{useAccount,useError,useSdk}from\"../../../../../service\";import{printableCoin}from\"../../../../../service/helpers\";import Center from\"../../../../../theme/layout/Center\";import Stack from\"../../../../../theme/layout/Stack\";import{pathContract,pathOperationResult,pathTransfer}from\"../../../../paths\";import{getErrorFromStackTrace}from\"../../../../utils/errors\";import\"./SearchResult.less\";const{Text}=_Typography;function getResult(myAddress,nameOwnerAddress,prices,tryRegister,navigateToTransfer){if(!nameOwnerAddress){return{message:\"is available!\",actionText:`Register ${printableCoin(prices.purchase)}`,action:tryRegister};}if(myAddress===nameOwnerAddress){return{message:\"is owned by you !\",actionText:`Transfer ${printableCoin(prices.transfer)}`,action:navigateToTransfer};}else{return{message:`is owned by ${nameOwnerAddress}`,actionText:\"Copy Owner Address\",action:()=>{copyToClipboard(nameOwnerAddress);}};}}function SearchResult({contractLabel,contractAddress,name,setLoading}){const fullContractPath=`${pathContract}/${contractLabel}/${contractAddress}/${name}`;const history=useHistory();const{setError,error}=useError();const{getClient}=useSdk();const accountProvider=useAccount();const[nameOwnerAddress,setNameOwnerAddress]=useState(\"\");const[prices,setPrices]=useState({});useEffect(()=>{getClient().queryContractSmart(contractAddress,{resolve_record:{name}}).then(response=>{setNameOwnerAddress(response.address);}).catch(error=>{// a not found error means it is free, other errors need to be reported\nif(!error.toString().includes(\"NameRecord not found\")){setError(error);}});},[setError,contractAddress,getClient,name]);useEffect(()=>{getClient().queryContractSmart(contractAddress,{config:{}}).then(response=>{setPrices({purchase:response.purchase_price,transfer:response.transfer_price});}).catch(setError);},[setError,contractAddress,getClient]);function tryRegister(){setLoading(true);const purchasePrice=prices.purchase;const payment=purchasePrice?[purchasePrice]:undefined;getClient().execute(contractAddress,{register:{name:name}},\"Buying my name\",payment).then(()=>{accountProvider.refreshAccount();history.push({pathname:pathOperationResult,state:{success:true,message:`Succesfully registered ${name}`,customButtonText:\"Name details\",customButtonActionPath:fullContractPath}});}).catch(stackTrace=>{console.error(stackTrace);history.push({pathname:pathOperationResult,state:{success:false,message:\"Name register failed:\",error:getErrorFromStackTrace(stackTrace),customButtonActionPath:fullContractPath}});});}function navigateToTransfer(){history.push(`${pathTransfer}/${contractLabel}/${contractAddress}/${name}`);}const{message,actionText,action}=getResult(accountProvider.account.address,nameOwnerAddress,prices,tryRegister,navigateToTransfer);return/*#__PURE__*/React.createElement(Center,{tag:\"main\",className:\"SearchResult\"},/*#__PURE__*/React.createElement(Stack,null,/*#__PURE__*/React.createElement(Text,null,error),/*#__PURE__*/React.createElement(Text,{className:\"SearchedName\"},name),/*#__PURE__*/React.createElement(Text,{className:\"LightText\"},message),/*#__PURE__*/React.createElement(_Button,{type:\"primary\",onClick:action},actionText)));}export default SearchResult;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Contract/components/SearchResult/index.tsx"],"names":["copyToClipboard","React","useEffect","useState","useHistory","useAccount","useError","useSdk","printableCoin","Center","Stack","pathContract","pathOperationResult","pathTransfer","getErrorFromStackTrace","Text","getResult","myAddress","nameOwnerAddress","prices","tryRegister","navigateToTransfer","message","actionText","purchase","action","transfer","SearchResult","contractLabel","contractAddress","name","setLoading","fullContractPath","history","setError","error","getClient","accountProvider","setNameOwnerAddress","setPrices","queryContractSmart","resolve_record","then","response","address","catch","toString","includes","config","purchase_price","transfer_price","purchasePrice","payment","undefined","execute","register","refreshAccount","push","pathname","state","success","customButtonText","customButtonActionPath","stackTrace","console","account"],"mappings":"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","sourcesContent":["import { Coin } from \"@cosmjs/launchpad\";\nimport { Button, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../../../service\";\nimport { printableCoin } from \"../../../../../service/helpers\";\nimport Center from \"../../../../../theme/layout/Center\";\nimport Stack from \"../../../../../theme/layout/Stack\";\nimport { pathContract, pathOperationResult, pathTransfer } from \"../../../../paths\";\nimport { getErrorFromStackTrace } from \"../../../../utils/errors\";\nimport { OperationResultState } from \"../../../OperationResult\";\nimport \"./SearchResult.less\";\n\nconst { Text } = Typography;\n\nexport interface Prices {\n  readonly purchase?: Coin;\n  readonly transfer?: Coin;\n}\n\ninterface Result {\n  readonly message: string;\n  readonly actionText: string;\n  readonly action: () => void;\n}\n\nfunction getResult(\n  myAddress: string,\n  nameOwnerAddress: string,\n  prices: Prices,\n  tryRegister: () => void,\n  navigateToTransfer: () => void,\n): Result {\n  if (!nameOwnerAddress) {\n    return {\n      message: \"is available!\",\n      actionText: `Register ${printableCoin(prices.purchase)}`,\n      action: tryRegister,\n    };\n  }\n\n  if (myAddress === nameOwnerAddress) {\n    return {\n      message: \"is owned by you !\",\n      actionText: `Transfer ${printableCoin(prices.transfer)}`,\n      action: navigateToTransfer,\n    };\n  } else {\n    return {\n      message: `is owned by ${nameOwnerAddress}`,\n      actionText: \"Copy Owner Address\",\n      action: () => {\n        copyToClipboard(nameOwnerAddress);\n      },\n    };\n  }\n}\n\ninterface SearchResultProps {\n  readonly contractLabel: string;\n  readonly contractAddress: string;\n  readonly name: string;\n  readonly setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction SearchResult({ contractLabel, contractAddress, name, setLoading }: SearchResultProps): JSX.Element {\n  const fullContractPath = `${pathContract}/${contractLabel}/${contractAddress}/${name}`;\n\n  const history = useHistory();\n  const { setError, error } = useError();\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const [nameOwnerAddress, setNameOwnerAddress] = useState(\"\");\n  const [prices, setPrices] = useState<Prices>({});\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { resolve_record: { name } })\n      .then((response) => {\n        setNameOwnerAddress(response.address);\n      })\n      .catch((error) => {\n        // a not found error means it is free, other errors need to be reported\n        if (!error.toString().includes(\"NameRecord not found\")) {\n          setError(error);\n        }\n      });\n  }, [setError, contractAddress, getClient, name]);\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setPrices({\n          purchase: response.purchase_price,\n          transfer: response.transfer_price,\n        });\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryRegister() {\n    setLoading(true);\n\n    const purchasePrice = prices.purchase;\n    const payment = purchasePrice ? [purchasePrice] : undefined;\n\n    getClient()\n      .execute(contractAddress, { register: { name: name } }, \"Buying my name\", payment)\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `Succesfully registered ${name}`,\n            customButtonText: \"Name details\",\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Name register failed:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      });\n  }\n\n  function navigateToTransfer() {\n    history.push(`${pathTransfer}/${contractLabel}/${contractAddress}/${name}`);\n  }\n\n  const { message, actionText, action } = getResult(\n    accountProvider.account.address,\n    nameOwnerAddress,\n    prices,\n    tryRegister,\n    navigateToTransfer,\n  );\n\n  return (\n    <Center tag=\"main\" className=\"SearchResult\">\n      <Stack>\n        <Text>{error}</Text>\n        <Text className=\"SearchedName\">{name}</Text>\n        <Text className=\"LightText\">{message}</Text>\n        <Button type=\"primary\" onClick={action}>\n          {actionText}\n        </Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}