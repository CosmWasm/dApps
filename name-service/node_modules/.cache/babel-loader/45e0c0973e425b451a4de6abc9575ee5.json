{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nvar _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Luxury/SearchResult/index.tsx\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../../service\";\nimport Center from \"../../../../theme/layout/Center\";\nimport Stack from \"../../../../theme/layout/Stack\";\nimport copyToClipboard from \"clipboard-copy\";\nimport { pathOperationResult, pathTransfer } from \"../../../paths\";\nimport \"./SearchResult.less\";\nimport { printableCoin } from \"../../../../service/helpers\";\nconst {\n  Text\n} = _Typography;\n\nfunction getResult(myAddress, nameOwnerAddress, prices, tryRegister, navigateToTransfer) {\n  if (!nameOwnerAddress) {\n    return {\n      message: \"is available!\",\n      actionText: `Register ${printableCoin(prices.purchase)}`,\n      action: () => {\n        tryRegister();\n      }\n    };\n  }\n\n  if (myAddress === nameOwnerAddress) {\n    return {\n      message: \"is owned by you !\",\n      actionText: `Transfer ${printableCoin(prices.transfer)}`,\n      action: () => {\n        navigateToTransfer();\n      }\n    };\n  } else {\n    return {\n      message: `is owned by ${nameOwnerAddress}`,\n      actionText: \"Copy Owner Address\",\n      action: () => {\n        copyToClipboard(nameOwnerAddress);\n      }\n    };\n  }\n}\n\nfunction SearchResult({\n  name,\n  contractAddress\n}) {\n  const history = useHistory();\n  const {\n    getClient\n  } = useSdk();\n  const {\n    account\n  } = useAccount();\n  const {\n    setError\n  } = useError();\n  const [nameOwnerAddress, setNameOwnerAddress] = useState();\n  const [prices, setPrices] = useState({});\n  React.useEffect(() => {\n    getClient().queryContractSmart(contractAddress, {\n      config: {}\n    }).then(response => {\n      setNameOwnerAddress(response.address);\n    }).catch(error => {\n      // a not found error means it is free, other errors need to be reported\n      if (!error.toString().includes(\"NameRecord not found\")) {\n        setError(error);\n      }\n    });\n  }, [setError, contractAddress, getClient]);\n  React.useEffect(() => {\n    getClient().queryContractSmart(contractAddress, {\n      config: {}\n    }).then(response => {\n      setPrices({\n        purchase: response.purchase_price,\n        transfer: response.transfer_price\n      });\n    }).catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryRegister() {\n    history.push({\n      pathname: pathOperationResult,\n      state: {\n        success: true,\n        message: \"Registered succesfully\"\n      }\n    });\n  }\n\n  function navigateToTransfer() {\n    history.push({\n      pathname: pathTransfer,\n      state: name\n    });\n  }\n\n  const {\n    message,\n    actionText,\n    action\n  } = getResult(account.address, nameOwnerAddress, prices, tryRegister, navigateToTransfer);\n  return /*#__PURE__*/React.createElement(Center, {\n    tag: \"main\",\n    className: \"SearchResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    className: \"SearchedName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, name), /*#__PURE__*/React.createElement(Text, {\n    className: \"LightText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, message), /*#__PURE__*/React.createElement(_Button, {\n    type: \"primary\",\n    onClick: () => action(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, actionText)));\n}\n\nexport default SearchResult;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Luxury/SearchResult/index.tsx"],"names":["React","useState","useHistory","useAccount","useError","useSdk","Center","Stack","copyToClipboard","pathOperationResult","pathTransfer","printableCoin","Text","getResult","myAddress","nameOwnerAddress","prices","tryRegister","navigateToTransfer","message","actionText","purchase","action","transfer","SearchResult","name","contractAddress","history","getClient","account","setError","setNameOwnerAddress","setPrices","useEffect","queryContractSmart","config","then","response","address","catch","error","toString","includes","purchase_price","transfer_price","push","pathname","state","success"],"mappings":"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","sourcesContent":["import { Coin } from \"@cosmjs/launchpad\";\nimport { Button, Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../../service\";\nimport Center from \"../../../../theme/layout/Center\";\nimport Stack from \"../../../../theme/layout/Stack\";\nimport copyToClipboard from \"clipboard-copy\";\nimport { pathOperationResult, pathTransfer } from \"../../../paths\";\nimport \"./SearchResult.less\";\nimport { printableCoin } from \"../../../../service/helpers\";\n\nconst { Text } = Typography;\n\nexport interface Prices {\n  readonly purchase?: Coin;\n  readonly transfer?: Coin;\n}\n\ninterface Result {\n  readonly message: string;\n  readonly actionText: string;\n  readonly action: () => void;\n}\n\nfunction getResult(\n  myAddress: string,\n  nameOwnerAddress: string,\n  prices: Prices,\n  tryRegister: () => void,\n  navigateToTransfer: () => void,\n): Result {\n  if (!nameOwnerAddress) {\n    return {\n      message: \"is available!\",\n      actionText: `Register ${printableCoin(prices.purchase)}`,\n      action: () => {\n        tryRegister();\n      },\n    };\n  }\n\n  if (myAddress === nameOwnerAddress) {\n    return {\n      message: \"is owned by you !\",\n      actionText: `Transfer ${printableCoin(prices.transfer)}`,\n      action: () => {\n        navigateToTransfer();\n      },\n    };\n  } else {\n    return {\n      message: `is owned by ${nameOwnerAddress}`,\n      actionText: \"Copy Owner Address\",\n      action: () => {\n        copyToClipboard(nameOwnerAddress);\n      },\n    };\n  }\n}\n\ninterface SearchResultProps {\n  readonly name: string;\n  readonly contractAddress: string;\n}\n\nfunction SearchResult({ name, contractAddress }: SearchResultProps): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n  const { setError } = useError();\n\n  const [nameOwnerAddress, setNameOwnerAddress] = useState<string>();\n  const [prices, setPrices] = useState<Prices>({});\n\n  React.useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setNameOwnerAddress(response.address);\n      })\n      .catch((error) => {\n        // a not found error means it is free, other errors need to be reported\n        if (!error.toString().includes(\"NameRecord not found\")) {\n          setError(error);\n        }\n      });\n  }, [setError, contractAddress, getClient]);\n\n  React.useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setPrices({\n          purchase: response.purchase_price,\n          transfer: response.transfer_price,\n        });\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryRegister() {\n    history.push({\n      pathname: pathOperationResult,\n      state: { success: true, message: \"Registered succesfully\" },\n    });\n  }\n\n  function navigateToTransfer() {\n    history.push({ pathname: pathTransfer, state: name });\n  }\n\n  const { message, actionText, action } = getResult(\n    account.address,\n    nameOwnerAddress,\n    prices,\n    tryRegister,\n    navigateToTransfer,\n  );\n\n  return (\n    <Center tag=\"main\" className=\"SearchResult\">\n      <Stack>\n        <Text className=\"SearchedName\">{name}</Text>\n        <Text className=\"LightText\">{message}</Text>\n        <Button type=\"primary\" onClick={() => action()}>\n          {actionText}\n        </Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}