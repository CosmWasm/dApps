{"ast":null,"code":"import\"antd/lib/typography/style\";import _Typography from\"antd/lib/typography\";import React,{useEffect,useState}from\"react\";import{useHistory,useParams}from\"react-router-dom\";import{useAccount,useError,useSdk}from\"../../../service\";import{printableCoin}from\"../../../service/helpers\";import Center from\"../../../theme/layout/Center\";import Stack from\"../../../theme/layout/Stack\";import BackButton from\"../../components/BackButton\";import Loading from\"../../components/Loading\";import YourAccount from\"../../components/YourAccount\";import{pathContract,pathOperationResult,pathTransfer}from\"../../paths\";import{getErrorFromStackTrace}from\"../../utils/errors\";import FormTransferName from\"./FormTransferName\";import\"./Transfer.less\";const{Title,Text}=_Typography;function Transfer(){const{contractLabel,contractAddress,name}=useParams();const fullContractPath=`${pathContract}/${contractLabel}/${contractAddress}/${name}`;const history=useHistory();const{setError}=useError();const{getClient}=useSdk();const accountProvider=useAccount();const[loading,setLoading]=useState(false);const[newOwnerAddress,setNewOwnerAddress]=useState(\"\");const[transferPrice,setTransferPrice]=useState();useEffect(()=>{getClient().queryContractSmart(contractAddress,{config:{}}).then(response=>{setTransferPrice(response.transfer_price);}).catch(setError);},[setError,contractAddress,getClient]);function tryTransfer(){setLoading(true);const payment=transferPrice?[transferPrice]:undefined;getClient().execute(contractAddress,{transfer:{name:name,to:newOwnerAddress}},\"Transferring my name\",payment).then(()=>{accountProvider.refreshAccount();history.push({pathname:pathOperationResult,state:{success:true,message:`Succesfully transferred ${name} to ${newOwnerAddress}`,customButtonText:\"Name details\",customButtonActionPath:fullContractPath}});}).catch(stackTrace=>{console.error(stackTrace);history.push({pathname:pathOperationResult,state:{success:false,message:\"Name transfer failed:\",error:getErrorFromStackTrace(stackTrace),customButtonActionPath:`${pathTransfer}/${contractLabel}/${contractAddress}/${name}`}});});}return loading&&/*#__PURE__*/React.createElement(Loading,{loadingText:`Transferring name: ${name}...`})||!loading&&/*#__PURE__*/React.createElement(Center,{tag:\"main\",className:\"Transfer\"},/*#__PURE__*/React.createElement(Stack,null,/*#__PURE__*/React.createElement(BackButton,{path:fullContractPath}),/*#__PURE__*/React.createElement(Stack,{className:\"TransferStack\"},/*#__PURE__*/React.createElement(Title,null,\"Transfer\"),/*#__PURE__*/React.createElement(_Typography,null,/*#__PURE__*/React.createElement(Text,null,\"Name: \"),/*#__PURE__*/React.createElement(Text,null,name)),/*#__PURE__*/React.createElement(Text,null,\"to\"),/*#__PURE__*/React.createElement(FormTransferName,{setNewOwnerAddress:setNewOwnerAddress,transferButtonText:`Transfer ${printableCoin(transferPrice)}`,transferButtonAction:tryTransfer})),/*#__PURE__*/React.createElement(YourAccount,{tag:\"footer\"})));}export default Transfer;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/index.tsx"],"names":["React","useEffect","useState","useHistory","useParams","useAccount","useError","useSdk","printableCoin","Center","Stack","BackButton","Loading","YourAccount","pathContract","pathOperationResult","pathTransfer","getErrorFromStackTrace","FormTransferName","Title","Text","Transfer","contractLabel","contractAddress","name","fullContractPath","history","setError","getClient","accountProvider","loading","setLoading","newOwnerAddress","setNewOwnerAddress","transferPrice","setTransferPrice","queryContractSmart","config","then","response","transfer_price","catch","tryTransfer","payment","undefined","execute","transfer","to","refreshAccount","push","pathname","state","success","message","customButtonText","customButtonActionPath","stackTrace","console","error"],"mappings":"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","sourcesContent":["import { Coin } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../service\";\nimport { printableCoin } from \"../../../service/helpers\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport Loading from \"../../components/Loading\";\nimport YourAccount from \"../../components/YourAccount\";\nimport { pathContract, pathOperationResult, pathTransfer } from \"../../paths\";\nimport { getErrorFromStackTrace } from \"../../utils/errors\";\nimport { OperationResultState } from \"../OperationResult\";\nimport FormTransferName from \"./FormTransferName\";\nimport \"./Transfer.less\";\n\nconst { Title, Text } = Typography;\n\ninterface TransferParams {\n  readonly contractLabel: string;\n  readonly contractAddress: string;\n  readonly name: string;\n}\n\nfunction Transfer(): JSX.Element {\n  const { contractLabel, contractAddress, name } = useParams() as TransferParams;\n  const fullContractPath = `${pathContract}/${contractLabel}/${contractAddress}/${name}`;\n\n  const history = useHistory();\n  const { setError } = useError();\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const [loading, setLoading] = useState(false);\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [transferPrice, setTransferPrice] = useState<Coin>();\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setTransferPrice(response.transfer_price);\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    setLoading(true);\n    const payment = transferPrice ? [transferPrice] : undefined;\n\n    getClient()\n      .execute(\n        contractAddress,\n        { transfer: { name: name, to: newOwnerAddress } },\n        \"Transferring my name\",\n        payment,\n      )\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `Succesfully transferred ${name} to ${newOwnerAddress}`,\n            customButtonText: \"Name details\",\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Name transfer failed:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: `${pathTransfer}/${contractLabel}/${contractAddress}/${name}`,\n          } as OperationResultState,\n        });\n      });\n  }\n\n  return (\n    (loading && <Loading loadingText={`Transferring name: ${name}...`} />) ||\n    (!loading && (\n      <Center tag=\"main\" className=\"Transfer\">\n        <Stack>\n          <BackButton path={fullContractPath} />\n          <Stack className=\"TransferStack\">\n            <Title>Transfer</Title>\n            <Typography>\n              <Text>Name: </Text>\n              <Text>{name}</Text>\n            </Typography>\n            <Text>to</Text>\n            <FormTransferName\n              setNewOwnerAddress={setNewOwnerAddress}\n              transferButtonText={`Transfer ${printableCoin(transferPrice)}`}\n              transferButtonAction={tryTransfer}\n            />\n          </Stack>\n          <YourAccount tag=\"footer\" />\n        </Stack>\n      </Center>\n    ))\n  );\n}\n\nexport default Transfer;\n"]},"metadata":{},"sourceType":"module"}