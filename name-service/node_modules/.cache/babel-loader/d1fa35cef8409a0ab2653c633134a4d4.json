{"ast":null,"code":"import asciiWords from './_asciiWords.js';\nimport hasUnicodeWord from './_hasUnicodeWord.js';\nimport toString from './toString.js';\nimport unicodeWords from './_unicodeWords.js';\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\n\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n\n  return string.match(pattern) || [];\n}\n\nexport default words;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/lodash-es/words.js"],"names":["asciiWords","hasUnicodeWord","toString","unicodeWords","words","string","pattern","guard","undefined","match"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,KAAT,CAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuC;AACrCF,EAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAD,CAAjB;AACAC,EAAAA,OAAO,GAAGC,KAAK,GAAGC,SAAH,GAAeF,OAA9B;;AAEA,MAAIA,OAAO,KAAKE,SAAhB,EAA2B;AACzB,WAAOP,cAAc,CAACI,MAAD,CAAd,GAAyBF,YAAY,CAACE,MAAD,CAArC,GAAgDL,UAAU,CAACK,MAAD,CAAjE;AACD;;AACD,SAAOA,MAAM,CAACI,KAAP,CAAaH,OAAb,KAAyB,EAAhC;AACD;;AAED,eAAeF,KAAf","sourcesContent":["import asciiWords from './_asciiWords.js';\nimport hasUnicodeWord from './_hasUnicodeWord.js';\nimport toString from './toString.js';\nimport unicodeWords from './_unicodeWords.js';\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nexport default words;\n"]},"metadata":{},"sourceType":"module"}