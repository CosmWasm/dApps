{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Hmac = void 0;\n\nclass Hmac {\n  constructor(hashFunctionConstructor, originalKey) {\n    // This implementation is based on https://en.wikipedia.org/wiki/HMAC#Implementation\n    // with the addition of incremental hashing support. Thus part of the algorithm\n    // is in the constructor and the rest in digest().\n    const blockSize = new hashFunctionConstructor().blockSize;\n\n    this.hash = data => new hashFunctionConstructor().update(data).digest();\n\n    let key = originalKey;\n\n    if (key.length > blockSize) {\n      key = this.hash(key);\n    }\n\n    if (key.length < blockSize) {\n      const zeroPadding = new Uint8Array(blockSize - key.length);\n      key = new Uint8Array([...key, ...zeroPadding]);\n    } // eslint-disable-next-line no-bitwise\n\n\n    this.oKeyPad = key.map(keyByte => keyByte ^ 0x5c); // eslint-disable-next-line no-bitwise\n\n    this.iKeyPad = key.map(keyByte => keyByte ^ 0x36);\n    this.messageHasher = new hashFunctionConstructor();\n    this.blockSize = blockSize;\n    this.update(this.iKeyPad);\n  }\n\n  update(data) {\n    this.messageHasher.update(data);\n    return this;\n  }\n\n  digest() {\n    const innerHash = this.messageHasher.digest();\n    return this.hash(new Uint8Array([...this.oKeyPad, ...innerHash]));\n  }\n\n}\n\nexports.Hmac = Hmac;","map":{"version":3,"sources":["../src/hmac.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAa,IAAb,CAAiB;AAQf,EAAA,WAAA,CAAmB,uBAAnB,EAAyD,WAAzD,EAAgF;AAC9E;AACA;AACA;AAEA,UAAM,SAAS,GAAG,IAAI,uBAAJ,GAA8B,SAAhD;;AAEA,SAAK,IAAL,GAAa,IAAD,IAAU,IAAI,uBAAJ,GAA8B,MAA9B,CAAqC,IAArC,EAA2C,MAA3C,EAAtB;;AAEA,QAAI,GAAG,GAAG,WAAV;;AACA,QAAI,GAAG,CAAC,MAAJ,GAAa,SAAjB,EAA4B;AAC1B,MAAA,GAAG,GAAG,KAAK,IAAL,CAAU,GAAV,CAAN;AACD;;AAED,QAAI,GAAG,CAAC,MAAJ,GAAa,SAAjB,EAA4B;AAC1B,YAAM,WAAW,GAAG,IAAI,UAAJ,CAAe,SAAS,GAAG,GAAG,CAAC,MAA/B,CAApB;AACA,MAAA,GAAG,GAAG,IAAI,UAAJ,CAAe,CAAC,GAAG,GAAJ,EAAS,GAAG,WAAZ,CAAf,CAAN;AACD,KAjB6E,CAmB9E;;;AACA,SAAK,OAAL,GAAe,GAAG,CAAC,GAAJ,CAAS,OAAD,IAAa,OAAO,GAAG,IAA/B,CAAf,CApB8E,CAqB9E;;AACA,SAAK,OAAL,GAAe,GAAG,CAAC,GAAJ,CAAS,OAAD,IAAa,OAAO,GAAG,IAA/B,CAAf;AACA,SAAK,aAAL,GAAqB,IAAI,uBAAJ,EAArB;AACA,SAAK,SAAL,GAAiB,SAAjB;AAEA,SAAK,MAAL,CAAY,KAAK,OAAjB;AACD;;AAEM,EAAA,MAAM,CAAC,IAAD,EAAiB;AAC5B,SAAK,aAAL,CAAmB,MAAnB,CAA0B,IAA1B;AACA,WAAO,IAAP;AACD;;AAEM,EAAA,MAAM,GAAA;AACX,UAAM,SAAS,GAAG,KAAK,aAAL,CAAmB,MAAnB,EAAlB;AACA,WAAO,KAAK,IAAL,CAAU,IAAI,UAAJ,CAAe,CAAC,GAAG,KAAK,OAAT,EAAkB,GAAG,SAArB,CAAf,CAAV,CAAP;AACD;;AA7Cc;;AAAjB,OAAA,CAAA,IAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Hmac = void 0;\nclass Hmac {\n    constructor(hashFunctionConstructor, originalKey) {\n        // This implementation is based on https://en.wikipedia.org/wiki/HMAC#Implementation\n        // with the addition of incremental hashing support. Thus part of the algorithm\n        // is in the constructor and the rest in digest().\n        const blockSize = new hashFunctionConstructor().blockSize;\n        this.hash = (data) => new hashFunctionConstructor().update(data).digest();\n        let key = originalKey;\n        if (key.length > blockSize) {\n            key = this.hash(key);\n        }\n        if (key.length < blockSize) {\n            const zeroPadding = new Uint8Array(blockSize - key.length);\n            key = new Uint8Array([...key, ...zeroPadding]);\n        }\n        // eslint-disable-next-line no-bitwise\n        this.oKeyPad = key.map((keyByte) => keyByte ^ 0x5c);\n        // eslint-disable-next-line no-bitwise\n        this.iKeyPad = key.map((keyByte) => keyByte ^ 0x36);\n        this.messageHasher = new hashFunctionConstructor();\n        this.blockSize = blockSize;\n        this.update(this.iKeyPad);\n    }\n    update(data) {\n        this.messageHasher.update(data);\n        return this;\n    }\n    digest() {\n        const innerHash = this.messageHasher.digest();\n        return this.hash(new Uint8Array([...this.oKeyPad, ...innerHash]));\n    }\n}\nexports.Hmac = Hmac;\n//# sourceMappingURL=hmac.js.map"]},"metadata":{},"sourceType":"script"}