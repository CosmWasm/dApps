{"ast":null,"code":"import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { makeCosmoshubPath, Secp256k1Wallet } from \"@cosmjs/launchpad\"; // generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\n\nexport function generateMnemonic() {\n  return Bip39.encode(Random.getBytes(16)).toString();\n} // some code that will only work in a browser...\n\nexport function loadOrCreateMnemonic() {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n\n  if (loaded) {\n    return loaded;\n  }\n\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\nexport async function loadOrCreateWallet(addressPrefix) {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n} // this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\n\nexport async function createClient(httpUrl, signer) {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  return new SigningCosmWasmClient(httpUrl, firstAddress, signer);\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/sdk.ts"],"names":["SigningCosmWasmClient","Bip39","Random","makeCosmoshubPath","Secp256k1Wallet","generateMnemonic","encode","getBytes","toString","loadOrCreateMnemonic","key","loaded","localStorage","getItem","generated","setItem","loadOrCreateWallet","addressPrefix","mnemonic","hdPath","wallet","fromMnemonic","createClient","httpUrl","signer","firstAddress","getAccounts","address"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,kBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,gBAA9B;AACA,SAASC,iBAAT,EAA2CC,eAA3C,QAAkE,mBAAlE,C,CAEA;AACA;;AACA,OAAO,SAASC,gBAAT,GAAoC;AACzC,SAAOJ,KAAK,CAACK,MAAN,CAAaJ,MAAM,CAACK,QAAP,CAAgB,EAAhB,CAAb,EAAkCC,QAAlC,EAAP;AACD,C,CAED;;AACA,OAAO,SAASC,oBAAT,GAAwC;AAC7C,QAAMC,GAAG,GAAG,eAAZ;AACA,QAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqBH,GAArB,CAAf;;AACA,MAAIC,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD;;AACD,QAAMG,SAAS,GAAGT,gBAAgB,EAAlC;AACAO,EAAAA,YAAY,CAACG,OAAb,CAAqBL,GAArB,EAA0BI,SAA1B;AACA,SAAOA,SAAP;AACD;AAED,OAAO,eAAeE,kBAAf,CAAkCC,aAAlC,EAAiF;AACtF,QAAMC,QAAQ,GAAGT,oBAAoB,EAArC;AACA,QAAMU,MAAM,GAAGhB,iBAAiB,CAAC,CAAD,CAAhC;AACA,QAAMiB,MAAM,GAAG,MAAMhB,eAAe,CAACiB,YAAhB,CAA6BH,QAA7B,EAAuCC,MAAvC,EAA+CF,aAA/C,CAArB;AACA,SAAOG,MAAP;AACD,C,CAED;AACA;;AACA,OAAO,eAAeE,YAAf,CAA4BC,OAA5B,EAA6CC,MAA7C,EAAoG;AACzG,QAAMC,YAAY,GAAG,CAAC,MAAMD,MAAM,CAACE,WAAP,EAAP,EAA6B,CAA7B,EAAgCC,OAArD;AACA,SAAO,IAAI3B,qBAAJ,CAA0BuB,OAA1B,EAAmCE,YAAnC,EAAiDD,MAAjD,CAAP;AACD","sourcesContent":["import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { makeCosmoshubPath, OfflineSigner, Secp256k1Wallet } from \"@cosmjs/launchpad\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport async function loadOrCreateWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(httpUrl: string, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  return new SigningCosmWasmClient(httpUrl, firstAddress, signer);\n}\n"]},"metadata":{},"sourceType":"module"}