{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexport var STATUS_ADD = 'add';\nexport var STATUS_KEEP = 'keep';\nexport var STATUS_REMOVE = 'remove';\nexport var STATUS_REMOVED = 'removed';\nexport function wrapKeyToObject(key) {\n  var keyObj = void 0;\n\n  if (key && typeof key === 'object' && 'key' in key) {\n    keyObj = key;\n  } else {\n    keyObj = {\n      key: key\n    };\n  }\n\n  return _extends({}, keyObj, {\n    key: String(keyObj.key)\n  });\n}\nexport function parseKeys() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return keys.map(wrapKeyToObject);\n}\nexport function diffKeys() {\n  var prevKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var currentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var list = [];\n  var currentIndex = 0;\n  var currentLen = currentKeys.length;\n  var prevKeyObjects = parseKeys(prevKeys);\n  var currentKeyObjects = parseKeys(currentKeys); // Check prev keys to insert or keep\n\n  prevKeyObjects.forEach(function (keyObj) {\n    var hit = false;\n\n    for (var i = currentIndex; i < currentLen; i += 1) {\n      var currentKeyObj = currentKeyObjects[i];\n\n      if (currentKeyObj.key === keyObj.key) {\n        // New added keys should add before current key\n        if (currentIndex < i) {\n          list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function (obj) {\n            return _extends({}, obj, {\n              status: STATUS_ADD\n            });\n          }));\n          currentIndex = i;\n        }\n\n        list.push(_extends({}, currentKeyObj, {\n          status: STATUS_KEEP\n        }));\n        currentIndex += 1;\n        hit = true;\n        break;\n      }\n    } // If not hit, it means key is removed\n\n\n    if (!hit) {\n      list.push(_extends({}, keyObj, {\n        status: STATUS_REMOVE\n      }));\n    }\n  }); // Add rest to the list\n\n  if (currentIndex < currentLen) {\n    list = list.concat(currentKeyObjects.slice(currentIndex).map(function (obj) {\n      return _extends({}, obj, {\n        status: STATUS_ADD\n      });\n    }));\n  }\n  /**\n   * Merge same key when it remove and add again:\n   *    [1 - add, 2 - keep, 1 - remove] -> [1 - keep, 2 - keep]\n   */\n\n\n  var keys = {};\n  list.forEach(function (_ref) {\n    var key = _ref.key;\n    keys[key] = (keys[key] || 0) + 1;\n  });\n  var duplicatedKeys = Object.keys(keys).filter(function (key) {\n    return keys[key] > 1;\n  });\n  duplicatedKeys.forEach(function (matchKey) {\n    // Remove `STATUS_REMOVE` node.\n    list = list.filter(function (_ref2) {\n      var key = _ref2.key,\n          status = _ref2.status;\n      return key !== matchKey || status !== STATUS_REMOVE;\n    }); // Update `STATUS_ADD` to `STATUS_KEEP`\n\n    list.forEach(function (node) {\n      if (node.key === matchKey) {\n        node.status = STATUS_KEEP;\n      }\n    });\n  });\n  return list;\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-animate/es/util/diff.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","STATUS_ADD","STATUS_KEEP","STATUS_REMOVE","STATUS_REMOVED","wrapKeyToObject","keyObj","String","parseKeys","keys","undefined","map","diffKeys","prevKeys","currentKeys","list","currentIndex","currentLen","prevKeyObjects","currentKeyObjects","forEach","hit","currentKeyObj","concat","slice","obj","status","push","_ref","duplicatedKeys","filter","matchKey","_ref2","node"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexport var STATUS_ADD = 'add';\nexport var STATUS_KEEP = 'keep';\nexport var STATUS_REMOVE = 'remove';\nexport var STATUS_REMOVED = 'removed';\n\nexport function wrapKeyToObject(key) {\n  var keyObj = void 0;\n  if (key && typeof key === 'object' && 'key' in key) {\n    keyObj = key;\n  } else {\n    keyObj = { key: key };\n  }\n  return _extends({}, keyObj, {\n    key: String(keyObj.key)\n  });\n}\n\nexport function parseKeys() {\n  var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  return keys.map(wrapKeyToObject);\n}\n\nexport function diffKeys() {\n  var prevKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var currentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var list = [];\n  var currentIndex = 0;\n  var currentLen = currentKeys.length;\n\n  var prevKeyObjects = parseKeys(prevKeys);\n  var currentKeyObjects = parseKeys(currentKeys);\n\n  // Check prev keys to insert or keep\n  prevKeyObjects.forEach(function (keyObj) {\n    var hit = false;\n\n    for (var i = currentIndex; i < currentLen; i += 1) {\n      var currentKeyObj = currentKeyObjects[i];\n      if (currentKeyObj.key === keyObj.key) {\n        // New added keys should add before current key\n        if (currentIndex < i) {\n          list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function (obj) {\n            return _extends({}, obj, { status: STATUS_ADD });\n          }));\n          currentIndex = i;\n        }\n        list.push(_extends({}, currentKeyObj, {\n          status: STATUS_KEEP\n        }));\n        currentIndex += 1;\n\n        hit = true;\n        break;\n      }\n    }\n\n    // If not hit, it means key is removed\n    if (!hit) {\n      list.push(_extends({}, keyObj, {\n        status: STATUS_REMOVE\n      }));\n    }\n  });\n\n  // Add rest to the list\n  if (currentIndex < currentLen) {\n    list = list.concat(currentKeyObjects.slice(currentIndex).map(function (obj) {\n      return _extends({}, obj, { status: STATUS_ADD });\n    }));\n  }\n\n  /**\n   * Merge same key when it remove and add again:\n   *    [1 - add, 2 - keep, 1 - remove] -> [1 - keep, 2 - keep]\n   */\n  var keys = {};\n  list.forEach(function (_ref) {\n    var key = _ref.key;\n\n    keys[key] = (keys[key] || 0) + 1;\n  });\n  var duplicatedKeys = Object.keys(keys).filter(function (key) {\n    return keys[key] > 1;\n  });\n  duplicatedKeys.forEach(function (matchKey) {\n    // Remove `STATUS_REMOVE` node.\n    list = list.filter(function (_ref2) {\n      var key = _ref2.key,\n          status = _ref2.status;\n      return key !== matchKey || status !== STATUS_REMOVE;\n    });\n\n    // Update `STATUS_ADD` to `STATUS_KEEP`\n    list.forEach(function (node) {\n      if (node.key === matchKey) {\n        node.status = STATUS_KEEP;\n      }\n    });\n  });\n\n  return list;\n}"]},"metadata":{},"sourceType":"module"}