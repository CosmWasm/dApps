{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js"],"names":["module","exports","Transform","_require$codes","require","codes","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_TRANSFORM_ALREADY_TRANSFORMING","ERR_TRANSFORM_WITH_LENGTH_0","Duplex","afterTransform","er","data","ts","_transformState","transforming","cb","writecb","emit","writechunk","push","rs","_readableState","reading","needReadable","length","highWaterMark","_read","options","call","bind","needTransform","writeencoding","sync","transform","_transform","flush","_flush","on","prefinish","_this","destroyed","done","prototype","chunk","encoding","_write","n","_destroy","err","err2","stream","_writableState"],"mappings":"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","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}"]},"metadata":{},"sourceType":"script"}