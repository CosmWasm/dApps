{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nvar _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Contract/components/SearchResult/index.tsx\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../../../service\";\nimport { printableCoin } from \"../../../../../service/helpers\";\nimport Center from \"../../../../../theme/layout/Center\";\nimport Stack from \"../../../../../theme/layout/Stack\";\nimport { pathOperationResult, pathTransfer, pathContract } from \"../../../../paths\";\nimport \"./SearchResult.less\";\nimport { getErrorFromStackTrace } from \"../../../../utils/errors\";\nconst {\n  Text\n} = _Typography;\n\nfunction getResult(myAddress, nameOwnerAddress, prices, tryRegister, navigateToTransfer) {\n  if (!nameOwnerAddress) {\n    return {\n      message: \"is available!\",\n      actionText: `Register ${printableCoin(prices.purchase)}`,\n      action: tryRegister\n    };\n  }\n\n  if (myAddress === nameOwnerAddress) {\n    return {\n      message: \"is owned by you !\",\n      actionText: `Transfer ${printableCoin(prices.transfer)}`,\n      action: navigateToTransfer\n    };\n  } else {\n    return {\n      message: `is owned by ${nameOwnerAddress}`,\n      actionText: \"Copy Owner Address\",\n      action: () => {\n        copyToClipboard(nameOwnerAddress);\n      }\n    };\n  }\n}\n\nfunction SearchResult({\n  name,\n  contractLabel,\n  contractAddress,\n  setLoading\n}) {\n  const history = useHistory();\n  const {\n    setError,\n    error\n  } = useError();\n  const {\n    getClient\n  } = useSdk();\n  const accountProvider = useAccount();\n  const [nameOwnerAddress, setNameOwnerAddress] = useState(\"\");\n  const [prices, setPrices] = useState({});\n  useEffect(() => {\n    getClient().queryContractSmart(contractAddress, {\n      resolve_record: {\n        name\n      }\n    }).then(response => {\n      setNameOwnerAddress(response.address);\n    }).catch(error => {\n      // a not found error means it is free, other errors need to be reported\n      if (!error.toString().includes(\"NameRecord not found\")) {\n        setError(error);\n      }\n    });\n  }, [setError, contractAddress, getClient, name]);\n  useEffect(() => {\n    getClient().queryContractSmart(contractAddress, {\n      config: {}\n    }).then(response => {\n      setPrices({\n        purchase: response.purchase_price,\n        transfer: response.transfer_price\n      });\n    }).catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryRegister() {\n    setLoading(true);\n    const purchasePrice = prices.purchase;\n    const payment = purchasePrice ? [purchasePrice] : undefined;\n    getClient().execute(contractAddress, {\n      register: {\n        name: name\n      }\n    }, \"Buying my name\", payment).then(() => {\n      accountProvider.refreshAccount();\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: true,\n          message: `Succesfully registered ${name}`,\n          customButtonText: \"Name details\",\n          customButtonActionPath: `${pathContract}/${contractLabel}/${contractAddress}/${name}`\n        }\n      });\n    }).catch(stackTrace => {\n      console.error(stackTrace);\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Name register failed\",\n          error: getErrorFromStackTrace(stackTrace)\n        }\n      });\n    });\n  }\n\n  function navigateToTransfer() {\n    history.push({\n      pathname: pathTransfer,\n      state: {\n        contractLabel: contractLabel,\n        contractAddress: contractAddress,\n        name: name\n      }\n    });\n  }\n\n  const {\n    message,\n    actionText,\n    action\n  } = getResult(accountProvider.account.address, nameOwnerAddress, prices, tryRegister, navigateToTransfer);\n  return /*#__PURE__*/React.createElement(Center, {\n    tag: \"main\",\n    className: \"SearchResult\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, error), /*#__PURE__*/React.createElement(Text, {\n    className: \"SearchedName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, name), /*#__PURE__*/React.createElement(Text, {\n    className: \"LightText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, message), /*#__PURE__*/React.createElement(_Button, {\n    type: \"primary\",\n    onClick: action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, actionText)));\n}\n\nexport default SearchResult;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Contract/components/SearchResult/index.tsx"],"names":["copyToClipboard","React","useEffect","useState","useHistory","useAccount","useError","useSdk","printableCoin","Center","Stack","pathOperationResult","pathTransfer","pathContract","getErrorFromStackTrace","Text","getResult","myAddress","nameOwnerAddress","prices","tryRegister","navigateToTransfer","message","actionText","purchase","action","transfer","SearchResult","name","contractLabel","contractAddress","setLoading","history","setError","error","getClient","accountProvider","setNameOwnerAddress","setPrices","queryContractSmart","resolve_record","then","response","address","catch","toString","includes","config","purchase_price","transfer_price","purchasePrice","payment","undefined","execute","register","refreshAccount","push","pathname","state","success","customButtonText","customButtonActionPath","stackTrace","console","account"],"mappings":"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","sourcesContent":["import { Coin } from \"@cosmjs/launchpad\";\nimport { Button, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../../../service\";\nimport { printableCoin } from \"../../../../../service/helpers\";\nimport Center from \"../../../../../theme/layout/Center\";\nimport Stack from \"../../../../../theme/layout/Stack\";\nimport { pathOperationResult, pathTransfer, pathContract } from \"../../../../paths\";\nimport { OperationResultState } from \"../../../OperationResult\";\nimport \"./SearchResult.less\";\nimport { getErrorFromStackTrace } from \"../../../../utils/errors\";\n\nconst { Text } = Typography;\n\nexport interface Prices {\n  readonly purchase?: Coin;\n  readonly transfer?: Coin;\n}\n\ninterface Result {\n  readonly message: string;\n  readonly actionText: string;\n  readonly action: () => void;\n}\n\nfunction getResult(\n  myAddress: string,\n  nameOwnerAddress: string,\n  prices: Prices,\n  tryRegister: () => void,\n  navigateToTransfer: () => void,\n): Result {\n  if (!nameOwnerAddress) {\n    return {\n      message: \"is available!\",\n      actionText: `Register ${printableCoin(prices.purchase)}`,\n      action: tryRegister,\n    };\n  }\n\n  if (myAddress === nameOwnerAddress) {\n    return {\n      message: \"is owned by you !\",\n      actionText: `Transfer ${printableCoin(prices.transfer)}`,\n      action: navigateToTransfer,\n    };\n  } else {\n    return {\n      message: `is owned by ${nameOwnerAddress}`,\n      actionText: \"Copy Owner Address\",\n      action: () => {\n        copyToClipboard(nameOwnerAddress);\n      },\n    };\n  }\n}\n\ninterface SearchResultProps {\n  readonly contractLabel: string;\n  readonly contractAddress: string;\n  readonly name: string;\n  readonly setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction SearchResult({ name, contractLabel, contractAddress, setLoading }: SearchResultProps): JSX.Element {\n  const history = useHistory();\n  const { setError, error } = useError();\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const [nameOwnerAddress, setNameOwnerAddress] = useState(\"\");\n  const [prices, setPrices] = useState<Prices>({});\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { resolve_record: { name } })\n      .then((response) => {\n        setNameOwnerAddress(response.address);\n      })\n      .catch((error) => {\n        // a not found error means it is free, other errors need to be reported\n        if (!error.toString().includes(\"NameRecord not found\")) {\n          setError(error);\n        }\n      });\n  }, [setError, contractAddress, getClient, name]);\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setPrices({\n          purchase: response.purchase_price,\n          transfer: response.transfer_price,\n        });\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryRegister() {\n    setLoading(true);\n\n    const purchasePrice = prices.purchase;\n    const payment = purchasePrice ? [purchasePrice] : undefined;\n\n    getClient()\n      .execute(contractAddress, { register: { name: name } }, \"Buying my name\", payment)\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `Succesfully registered ${name}`,\n            customButtonText: \"Name details\",\n            customButtonActionPath: `${pathContract}/${contractLabel}/${contractAddress}/${name}`,\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Name register failed\",\n            error: getErrorFromStackTrace(stackTrace),\n          } as OperationResultState,\n        });\n      });\n  }\n\n  function navigateToTransfer() {\n    history.push({\n      pathname: pathTransfer,\n      state: { contractLabel: contractLabel, contractAddress: contractAddress, name: name },\n    });\n  }\n\n  const { message, actionText, action } = getResult(\n    accountProvider.account.address,\n    nameOwnerAddress,\n    prices,\n    tryRegister,\n    navigateToTransfer,\n  );\n\n  return (\n    <Center tag=\"main\" className=\"SearchResult\">\n      <Stack>\n        <Text>{error}</Text>\n        <Text className=\"SearchedName\">{name}</Text>\n        <Text className=\"LightText\">{message}</Text>\n        <Button type=\"primary\" onClick={action}>\n          {actionText}\n        </Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default SearchResult;\n"]},"metadata":{},"sourceType":"module"}