{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromAscii = exports.toAscii = void 0;\n\nfunction toAscii(input) {\n  const toNums = str => str.split(\"\").map(x => {\n    const charCode = x.charCodeAt(0); // 0x00–0x1F control characters\n    // 0x20–0x7E printable characters\n    // 0x7F delete character\n    // 0x80–0xFF out of 7 bit ascii range\n\n    if (charCode < 0x20 || charCode > 0x7e) {\n      throw new Error(\"Cannot encode character that is out of printable ASCII range: \" + charCode);\n    }\n\n    return charCode;\n  });\n\n  return Uint8Array.from(toNums(input));\n}\n\nexports.toAscii = toAscii;\n\nfunction fromAscii(data) {\n  const fromNums = listOfNumbers => listOfNumbers.map(x => {\n    // 0x00–0x1F control characters\n    // 0x20–0x7E printable characters\n    // 0x7F delete character\n    // 0x80–0xFF out of 7 bit ascii range\n    if (x < 0x20 || x > 0x7e) {\n      throw new Error(\"Cannot decode character that is out of printable ASCII range: \" + x);\n    }\n\n    return String.fromCharCode(x);\n  });\n\n  return fromNums(Array.from(data)).join(\"\");\n}\n\nexports.fromAscii = fromAscii;","map":{"version":3,"sources":["../src/ascii.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAgB,OAAhB,CAAwB,KAAxB,EAAqC;AACnC,QAAM,MAAM,GAAI,GAAD,IACb,GAAG,CAAC,KAAJ,CAAU,EAAV,EAAc,GAAd,CAAmB,CAAD,IAAc;AAC9B,UAAM,QAAQ,GAAG,CAAC,CAAC,UAAF,CAAa,CAAb,CAAjB,CAD8B,CAE9B;AACA;AACA;AACA;;AACA,QAAI,QAAQ,GAAG,IAAX,IAAmB,QAAQ,GAAG,IAAlC,EAAwC;AACtC,YAAM,IAAI,KAAJ,CAAU,mEAAmE,QAA7E,CAAN;AACD;;AACD,WAAO,QAAP;AACD,GAVD,CADF;;AAYA,SAAO,UAAU,CAAC,IAAX,CAAgB,MAAM,CAAC,KAAD,CAAtB,CAAP;AACD;;AAdD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAgBA,SAAgB,SAAhB,CAA0B,IAA1B,EAA0C;AACxC,QAAM,QAAQ,GAAI,aAAD,IACf,aAAa,CAAC,GAAd,CAAmB,CAAD,IAAsB;AACtC;AACA;AACA;AACA;AACA,QAAI,CAAC,GAAG,IAAJ,IAAY,CAAC,GAAG,IAApB,EAA0B;AACxB,YAAM,IAAI,KAAJ,CAAU,mEAAmE,CAA7E,CAAN;AACD;;AACD,WAAO,MAAM,CAAC,YAAP,CAAoB,CAApB,CAAP;AACD,GATD,CADF;;AAYA,SAAO,QAAQ,CAAC,KAAK,CAAC,IAAN,CAAW,IAAX,CAAD,CAAR,CAA2B,IAA3B,CAAgC,EAAhC,CAAP;AACD;;AAdD,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromAscii = exports.toAscii = void 0;\nfunction toAscii(input) {\n    const toNums = (str) => str.split(\"\").map((x) => {\n        const charCode = x.charCodeAt(0);\n        // 0x00–0x1F control characters\n        // 0x20–0x7E printable characters\n        // 0x7F delete character\n        // 0x80–0xFF out of 7 bit ascii range\n        if (charCode < 0x20 || charCode > 0x7e) {\n            throw new Error(\"Cannot encode character that is out of printable ASCII range: \" + charCode);\n        }\n        return charCode;\n    });\n    return Uint8Array.from(toNums(input));\n}\nexports.toAscii = toAscii;\nfunction fromAscii(data) {\n    const fromNums = (listOfNumbers) => listOfNumbers.map((x) => {\n        // 0x00–0x1F control characters\n        // 0x20–0x7E printable characters\n        // 0x7F delete character\n        // 0x80–0xFF out of 7 bit ascii range\n        if (x < 0x20 || x > 0x7e) {\n            throw new Error(\"Cannot decode character that is out of printable ASCII range: \" + x);\n        }\n        return String.fromCharCode(x);\n    });\n    return fromNums(Array.from(data)).join(\"\");\n}\nexports.fromAscii = fromAscii;\n//# sourceMappingURL=ascii.js.map"]},"metadata":{},"sourceType":"script"}