{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupWasmExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst launchpad_1 = require(\"@cosmjs/launchpad\");\n\nconst types_1 = require(\"../types\");\n\nfunction isWasmError(resp) {\n  return resp.error !== undefined;\n}\n\nfunction unwrapWasmResponse(response) {\n  if (isWasmError(response)) {\n    throw new Error(response.error);\n  }\n\n  return response.result;\n}\n\nfunction setupWasmExtension(base) {\n  return {\n    wasm: {\n      listCodeInfo: async () => {\n        const path = `/wasm/code`;\n        const responseData = await base.get(path);\n        return launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData));\n      },\n      getCode: async id => {\n        const path = `/wasm/code/${id}`;\n        const responseData = await base.get(path);\n        return unwrapWasmResponse(responseData);\n      },\n      listContractsByCodeId: async id => {\n        const path = `/wasm/code/${id}/contracts`;\n        const responseData = await base.get(path);\n        return launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData));\n      },\n      getContractInfo: async address => {\n        const path = `/wasm/contract/${address}`;\n        const response = await base.get(path);\n        return unwrapWasmResponse(response);\n      },\n      getContractCodeHistory: async address => {\n        const path = `/wasm/contract/${address}/history`;\n        const response = await base.get(path);\n        return unwrapWasmResponse(response);\n      },\n      getAllContractState: async address => {\n        const path = `/wasm/contract/${address}/state`;\n        const responseData = await base.get(path);\n        return launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData)).map(types_1.parseWasmData);\n      },\n      queryContractRaw: async (address, key) => {\n        const hexKey = encoding_1.toHex(key);\n        const path = `/wasm/contract/${address}/raw/${hexKey}?encoding=hex`;\n        const responseData = await base.get(path);\n        const data = unwrapWasmResponse(responseData);\n        return data.length === 0 ? null : encoding_1.fromBase64(data[0].val);\n      },\n      queryContractSmart: async (address, query) => {\n        const encoded = encoding_1.toHex(encoding_1.toUtf8(JSON.stringify(query)));\n        const path = `/wasm/contract/${address}/smart/${encoded}?encoding=hex`;\n        const responseData = await base.get(path);\n        const result = unwrapWasmResponse(responseData); // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n\n        return JSON.parse(encoding_1.fromUtf8(encoding_1.fromBase64(result.smart)));\n      }\n    }\n  };\n}\n\nexports.setupWasmExtension = setupWasmExtension;","map":{"version":3,"sources":["../../src/lcdapi/wasm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupWasmExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst launchpad_1 = require(\"@cosmjs/launchpad\");\nconst types_1 = require(\"../types\");\nfunction isWasmError(resp) {\n    return resp.error !== undefined;\n}\nfunction unwrapWasmResponse(response) {\n    if (isWasmError(response)) {\n        throw new Error(response.error);\n    }\n    return response.result;\n}\nfunction setupWasmExtension(base) {\n    return {\n        wasm: {\n            listCodeInfo: async () => {\n                const path = `/wasm/code`;\n                const responseData = (await base.get(path));\n                return launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData));\n            },\n            getCode: async (id) => {\n                const path = `/wasm/code/${id}`;\n                const responseData = (await base.get(path));\n                return unwrapWasmResponse(responseData);\n            },\n            listContractsByCodeId: async (id) => {\n                const path = `/wasm/code/${id}/contracts`;\n                const responseData = (await base.get(path));\n                return launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData));\n            },\n            getContractInfo: async (address) => {\n                const path = `/wasm/contract/${address}`;\n                const response = (await base.get(path));\n                return unwrapWasmResponse(response);\n            },\n            getContractCodeHistory: async (address) => {\n                const path = `/wasm/contract/${address}/history`;\n                const response = (await base.get(path));\n                return unwrapWasmResponse(response);\n            },\n            getAllContractState: async (address) => {\n                const path = `/wasm/contract/${address}/state`;\n                const responseData = (await base.get(path));\n                return launchpad_1.normalizeLcdApiArray(unwrapWasmResponse(responseData)).map(types_1.parseWasmData);\n            },\n            queryContractRaw: async (address, key) => {\n                const hexKey = encoding_1.toHex(key);\n                const path = `/wasm/contract/${address}/raw/${hexKey}?encoding=hex`;\n                const responseData = (await base.get(path));\n                const data = unwrapWasmResponse(responseData);\n                return data.length === 0 ? null : encoding_1.fromBase64(data[0].val);\n            },\n            queryContractSmart: async (address, query) => {\n                const encoded = encoding_1.toHex(encoding_1.toUtf8(JSON.stringify(query)));\n                const path = `/wasm/contract/${address}/smart/${encoded}?encoding=hex`;\n                const responseData = (await base.get(path));\n                const result = unwrapWasmResponse(responseData);\n                // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n                return JSON.parse(encoding_1.fromUtf8(encoding_1.fromBase64(result.smart)));\n            },\n        },\n    };\n}\nexports.setupWasmExtension = setupWasmExtension;\n//# sourceMappingURL=wasm.js.map"]},"metadata":{},"sourceType":"script"}