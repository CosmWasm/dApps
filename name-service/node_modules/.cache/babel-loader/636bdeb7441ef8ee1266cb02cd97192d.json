{"ast":null,"code":"import * as React from 'react';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport { getCellFixedInfo } from '../utils/fixUtil';\nimport { getColumnsKey } from '../utils/valueUtil';\n\nfunction HeaderRow(_ref) {\n  var cells = _ref.cells,\n      stickyOffsets = _ref.stickyOffsets,\n      flattenColumns = _ref.flattenColumns,\n      RowComponent = _ref.rowComponent,\n      CellComponent = _ref.cellComponent,\n      onHeaderRow = _ref.onHeaderRow,\n      index = _ref.index;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      direction = _React$useContext.direction;\n\n  var rowProps;\n\n  if (onHeaderRow) {\n    rowProps = onHeaderRow(cells.map(function (cell) {\n      return cell.column;\n    }), index);\n  }\n\n  var columnsKey = getColumnsKey(cells.map(function (cell) {\n    return cell.column;\n  }));\n  return React.createElement(RowComponent, Object.assign({}, rowProps), cells.map(function (cell, cellIndex) {\n    var column = cell.column;\n    var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, flattenColumns, stickyOffsets, direction);\n    var additionalProps;\n\n    if (column && column.onHeaderCell) {\n      additionalProps = cell.column.onHeaderCell(column);\n    }\n\n    return React.createElement(Cell, Object.assign({}, cell, {\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: CellComponent,\n      prefixCls: prefixCls,\n      key: columnsKey[cellIndex]\n    }, fixedInfo, {\n      additionalProps: additionalProps,\n      rowType: \"header\"\n    }));\n  }));\n}\n\nHeaderRow.displayName = 'HeaderRow';\nexport default HeaderRow;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-table/es/Header/HeaderRow.js"],"names":["React","Cell","TableContext","getCellFixedInfo","getColumnsKey","HeaderRow","_ref","cells","stickyOffsets","flattenColumns","RowComponent","rowComponent","CellComponent","cellComponent","onHeaderRow","index","_React$useContext","useContext","prefixCls","direction","rowProps","map","cell","column","columnsKey","createElement","Object","assign","cellIndex","fixedInfo","colStart","colEnd","additionalProps","onHeaderCell","ellipsis","align","component","key","rowType","displayName"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,aAAT,QAA8B,oBAA9B;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,aAAa,GAAGF,IAAI,CAACE,aADzB;AAAA,MAEIC,cAAc,GAAGH,IAAI,CAACG,cAF1B;AAAA,MAGIC,YAAY,GAAGJ,IAAI,CAACK,YAHxB;AAAA,MAIIC,aAAa,GAAGN,IAAI,CAACO,aAJzB;AAAA,MAKIC,WAAW,GAAGR,IAAI,CAACQ,WALvB;AAAA,MAMIC,KAAK,GAAGT,IAAI,CAACS,KANjB;;AAQA,MAAIC,iBAAiB,GAAGhB,KAAK,CAACiB,UAAN,CAAiBf,YAAjB,CAAxB;AAAA,MACIgB,SAAS,GAAGF,iBAAiB,CAACE,SADlC;AAAA,MAEIC,SAAS,GAAGH,iBAAiB,CAACG,SAFlC;;AAIA,MAAIC,QAAJ;;AAEA,MAAIN,WAAJ,EAAiB;AACfM,IAAAA,QAAQ,GAAGN,WAAW,CAACP,KAAK,CAACc,GAAN,CAAU,UAAUC,IAAV,EAAgB;AAC/C,aAAOA,IAAI,CAACC,MAAZ;AACD,KAFsB,CAAD,EAElBR,KAFkB,CAAtB;AAGD;;AAED,MAAIS,UAAU,GAAGpB,aAAa,CAACG,KAAK,CAACc,GAAN,CAAU,UAAUC,IAAV,EAAgB;AACvD,WAAOA,IAAI,CAACC,MAAZ;AACD,GAF8B,CAAD,CAA9B;AAGA,SAAOvB,KAAK,CAACyB,aAAN,CAAoBf,YAApB,EAAkCgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,QAAlB,CAAlC,EAA+Db,KAAK,CAACc,GAAN,CAAU,UAAUC,IAAV,EAAgBM,SAAhB,EAA2B;AACzG,QAAIL,MAAM,GAAGD,IAAI,CAACC,MAAlB;AACA,QAAIM,SAAS,GAAG1B,gBAAgB,CAACmB,IAAI,CAACQ,QAAN,EAAgBR,IAAI,CAACS,MAArB,EAA6BtB,cAA7B,EAA6CD,aAA7C,EAA4DW,SAA5D,CAAhC;AACA,QAAIa,eAAJ;;AAEA,QAAIT,MAAM,IAAIA,MAAM,CAACU,YAArB,EAAmC;AACjCD,MAAAA,eAAe,GAAGV,IAAI,CAACC,MAAL,CAAYU,YAAZ,CAAyBV,MAAzB,CAAlB;AACD;;AAED,WAAOvB,KAAK,CAACyB,aAAN,CAAoBxB,IAApB,EAA0ByB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,IAAlB,EAAwB;AACvDY,MAAAA,QAAQ,EAAEX,MAAM,CAACW,QADsC;AAEvDC,MAAAA,KAAK,EAAEZ,MAAM,CAACY,KAFyC;AAGvDC,MAAAA,SAAS,EAAExB,aAH4C;AAIvDM,MAAAA,SAAS,EAAEA,SAJ4C;AAKvDmB,MAAAA,GAAG,EAAEb,UAAU,CAACI,SAAD;AALwC,KAAxB,EAM9BC,SAN8B,EAMnB;AACZG,MAAAA,eAAe,EAAEA,eADL;AAEZM,MAAAA,OAAO,EAAE;AAFG,KANmB,CAA1B,CAAP;AAUD,GAnBqE,CAA/D,CAAP;AAoBD;;AAEDjC,SAAS,CAACkC,WAAV,GAAwB,WAAxB;AACA,eAAelC,SAAf","sourcesContent":["import * as React from 'react';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport { getCellFixedInfo } from '../utils/fixUtil';\nimport { getColumnsKey } from '../utils/valueUtil';\n\nfunction HeaderRow(_ref) {\n  var cells = _ref.cells,\n      stickyOffsets = _ref.stickyOffsets,\n      flattenColumns = _ref.flattenColumns,\n      RowComponent = _ref.rowComponent,\n      CellComponent = _ref.cellComponent,\n      onHeaderRow = _ref.onHeaderRow,\n      index = _ref.index;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      direction = _React$useContext.direction;\n\n  var rowProps;\n\n  if (onHeaderRow) {\n    rowProps = onHeaderRow(cells.map(function (cell) {\n      return cell.column;\n    }), index);\n  }\n\n  var columnsKey = getColumnsKey(cells.map(function (cell) {\n    return cell.column;\n  }));\n  return React.createElement(RowComponent, Object.assign({}, rowProps), cells.map(function (cell, cellIndex) {\n    var column = cell.column;\n    var fixedInfo = getCellFixedInfo(cell.colStart, cell.colEnd, flattenColumns, stickyOffsets, direction);\n    var additionalProps;\n\n    if (column && column.onHeaderCell) {\n      additionalProps = cell.column.onHeaderCell(column);\n    }\n\n    return React.createElement(Cell, Object.assign({}, cell, {\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: CellComponent,\n      prefixCls: prefixCls,\n      key: columnsKey[cellIndex]\n    }, fixedInfo, {\n      additionalProps: additionalProps,\n      rowType: \"header\"\n    }));\n  }));\n}\n\nHeaderRow.displayName = 'HeaderRow';\nexport default HeaderRow;"]},"metadata":{},"sourceType":"module"}