{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = React.createElement(RowComponent, Object.assign({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return React.createElement(Cell, Object.assign({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return React.createElement(BodyRow, Object.assign({}, props, {\n        key: subKey,\n        rowKey: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-table/es/Body/BodyRow.js"],"names":["_defineProperty","_slicedToArray","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","React","classNames","Cell","TableContext","BodyContext","getColumnsKey","ExpandedRow","BodyRow","props","className","style","record","index","rowKey","getRowKey","rowExpandable","expandedKeys","onRow","_props$indent","indent","RowComponent","rowComponent","cellComponent","childrenColumnName","_React$useContext","useContext","prefixCls","fixedInfoList","_React$useContext2","fixHeader","fixColumn","horizonScroll","componentWidth","flattenColumns","expandableType","expandRowByClick","onTriggerExpand","rowClassName","expandedRowClassName","indentSize","expandIcon","expandedRowRender","expandIconColumnIndex","_React$useState","useState","_React$useState2","expandRended","setExpandRended","expanded","has","recordKey","useEffect","rowSupportExpand","nestExpandable","hasNestChildren","mergedExpandable","additionalProps","onClick","event","_additionalProps","_len","args","Array","_key","concat","computeRowClassName","columnsKey","baseRowNode","createElement","assign","map","column","colIndex","render","dataIndex","columnClassName","fixedInfo","appendCellNode","Fragment","paddingLeft","expandable","onExpand","additionalCellProps","onCell","ellipsis","align","component","shouldCellUpdate","appendNode","expandRowNode","expandContent","computedExpandedRowClassName","colSpan","nestRowNode","subRecord","subIndex","subKey","displayName"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport Cell from '../Cell';\nimport TableContext from '../context/TableContext';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ExpandedRow from './ExpandedRow';\n\nfunction BodyRow(props) {\n  var className = props.className,\n      style = props.style,\n      record = props.record,\n      index = props.index,\n      rowKey = props.rowKey,\n      getRowKey = props.getRowKey,\n      rowExpandable = props.rowExpandable,\n      expandedKeys = props.expandedKeys,\n      onRow = props.onRow,\n      _props$indent = props.indent,\n      indent = _props$indent === void 0 ? 0 : _props$indent,\n      RowComponent = props.rowComponent,\n      cellComponent = props.cellComponent,\n      childrenColumnName = props.childrenColumnName;\n\n  var _React$useContext = React.useContext(TableContext),\n      prefixCls = _React$useContext.prefixCls,\n      fixedInfoList = _React$useContext.fixedInfoList;\n\n  var _React$useContext2 = React.useContext(BodyContext),\n      fixHeader = _React$useContext2.fixHeader,\n      fixColumn = _React$useContext2.fixColumn,\n      horizonScroll = _React$useContext2.horizonScroll,\n      componentWidth = _React$useContext2.componentWidth,\n      flattenColumns = _React$useContext2.flattenColumns,\n      expandableType = _React$useContext2.expandableType,\n      expandRowByClick = _React$useContext2.expandRowByClick,\n      onTriggerExpand = _React$useContext2.onTriggerExpand,\n      rowClassName = _React$useContext2.rowClassName,\n      expandedRowClassName = _React$useContext2.expandedRowClassName,\n      indentSize = _React$useContext2.indentSize,\n      expandIcon = _React$useContext2.expandIcon,\n      expandedRowRender = _React$useContext2.expandedRowRender,\n      expandIconColumnIndex = _React$useContext2.expandIconColumnIndex;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandRended = _React$useState2[0],\n      setExpandRended = _React$useState2[1];\n\n  var expanded = expandedKeys && expandedKeys.has(props.recordKey);\n  React.useEffect(function () {\n    if (expanded) {\n      setExpandRended(true);\n    }\n  }, [expanded]);\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record)); // Only when row is not expandable and `children` exist in record\n\n  var nestExpandable = expandableType === 'nest';\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var mergedExpandable = rowSupportExpand || nestExpandable; // =========================== onRow ===========================\n\n  var additionalProps;\n\n  if (onRow) {\n    additionalProps = onRow(record, index);\n  }\n\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n\n    if (additionalProps && additionalProps.onClick) {\n      var _additionalProps;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_additionalProps = additionalProps).onClick.apply(_additionalProps, [event].concat(args));\n    }\n  }; // ======================== Base tr row ========================\n\n\n  var computeRowClassName;\n\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, index, indent);\n  }\n\n  var columnsKey = getColumnsKey(flattenColumns);\n  var baseRowNode = React.createElement(RowComponent, Object.assign({}, additionalProps, {\n    \"data-row-key\": rowKey,\n    className: classNames(className, \"\".concat(prefixCls, \"-row\"), \"\".concat(prefixCls, \"-row-level-\").concat(indent), computeRowClassName, additionalProps && additionalProps.className),\n    style: _objectSpread(_objectSpread({}, style), additionalProps ? additionalProps.style : null),\n    onClick: onClick\n  }), flattenColumns.map(function (column, colIndex) {\n    var render = column.render,\n        dataIndex = column.dataIndex,\n        columnClassName = column.className;\n    var key = columnsKey[colIndex];\n    var fixedInfo = fixedInfoList[colIndex]; // ============= Used for nest expandable =============\n\n    var appendCellNode;\n\n    if (colIndex === (expandIconColumnIndex || 0) && nestExpandable) {\n      appendCellNode = React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        style: {\n          paddingLeft: \"\".concat(indentSize * indent, \"px\")\n        },\n        className: \"\".concat(prefixCls, \"-row-indent indent-level-\").concat(indent)\n      }), expandIcon({\n        prefixCls: prefixCls,\n        expanded: expanded,\n        expandable: hasNestChildren,\n        record: record,\n        onExpand: onTriggerExpand\n      }));\n    }\n\n    var additionalCellProps;\n\n    if (column.onCell) {\n      additionalCellProps = column.onCell(record, index);\n    }\n\n    return React.createElement(Cell, Object.assign({\n      className: columnClassName,\n      ellipsis: column.ellipsis,\n      align: column.align,\n      component: cellComponent,\n      prefixCls: prefixCls,\n      key: key,\n      record: record,\n      index: index,\n      dataIndex: dataIndex,\n      render: render,\n      shouldCellUpdate: column.shouldCellUpdate\n    }, fixedInfo, {\n      appendNode: appendCellNode,\n      additionalProps: additionalCellProps\n    }));\n  })); // ======================== Expand Row =========================\n\n  var expandRowNode;\n\n  if (rowSupportExpand && (expandRended || expanded)) {\n    var expandContent = expandedRowRender(record, index, indent + 1, expanded);\n    var computedExpandedRowClassName = expandedRowClassName && expandedRowClassName(record, index, indent);\n    expandRowNode = React.createElement(ExpandedRow, {\n      expanded: expanded,\n      className: classNames(\"\".concat(prefixCls, \"-expanded-row\"), \"\".concat(prefixCls, \"-expanded-row-level-\").concat(indent + 1), computedExpandedRowClassName),\n      prefixCls: prefixCls,\n      fixHeader: fixHeader,\n      fixColumn: fixColumn,\n      horizonScroll: horizonScroll,\n      component: RowComponent,\n      componentWidth: componentWidth,\n      cellComponent: cellComponent,\n      colSpan: flattenColumns.length\n    }, expandContent);\n  } // ========================= Nest Row ==========================\n\n\n  var nestRowNode;\n\n  if (hasNestChildren && expanded) {\n    nestRowNode = (record[childrenColumnName] || []).map(function (subRecord, subIndex) {\n      var subKey = getRowKey(subRecord, subIndex);\n      return React.createElement(BodyRow, Object.assign({}, props, {\n        key: subKey,\n        rowKey: subKey,\n        record: subRecord,\n        recordKey: subKey,\n        index: subIndex,\n        indent: indent + 1\n      }));\n    });\n  }\n\n  return React.createElement(React.Fragment, null, baseRowNode, expandRowNode, nestRowNode);\n}\n\nBodyRow.displayName = 'BodyRow';\nexport default BodyRow;"]},"metadata":{},"sourceType":"module"}