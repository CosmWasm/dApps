{"ast":null,"code":"import { Decimal } from \"@cosmjs/math\"; // NARROW NO-BREAK SPACE (U+202F)\n\nconst thinSpace = \"\\u202F\";\nexport function printableBalance(balance) {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\nexport function printableCoin(coin) {\n  if (!coin) {\n    return \"0\";\n  }\n\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/helpers.ts"],"names":["Decimal","thinSpace","printableBalance","balance","length","map","printableCoin","join","coin","denom","startsWith","ticker","slice","toUpperCase","fromAtomics","amount","toString"],"mappings":"AACA,SAASA,OAAT,QAAwB,cAAxB,C,CAEA;;AACA,MAAMC,SAAS,GAAG,QAAlB;AAEA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAA6D;AAClE,MAAI,CAACA,OAAD,IAAYA,OAAO,CAACC,MAAR,KAAmB,CAAnC,EAAsC,OAAO,GAAP;AACtC,SAAOD,OAAO,CAACE,GAAR,CAAYC,aAAZ,EAA2BC,IAA3B,CAAgC,IAAhC,CAAP;AACD;AAED,OAAO,SAASD,aAAT,CAAuBE,IAAvB,EAA4C;AACjD,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,GAAP;AACD;;AACD,MAAIA,IAAI,CAACC,KAAL,CAAWC,UAAX,CAAsB,GAAtB,CAAJ,EAAgC;AAC9B,UAAMC,MAAM,GAAGH,IAAI,CAACC,KAAL,CAAWG,KAAX,CAAiB,CAAjB,EAAoBC,WAApB,EAAf;AACA,WAAOb,OAAO,CAACc,WAAR,CAAoBN,IAAI,CAACO,MAAzB,EAAiC,CAAjC,EAAoCC,QAApC,KAAiDf,SAAjD,GAA6DU,MAApE;AACD,GAHD,MAGO;AACL,WAAOH,IAAI,CAACO,MAAL,GAAcd,SAAd,GAA0BO,IAAI,CAACC,KAAtC;AACD;AACF","sourcesContent":["import { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}