{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nvar _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/FormTransferName.tsx\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { TransferValidationSchema } from \"../../forms/validationSchemas\";\n\nfunction FormTransferName({\n  setNewOwnerAddress,\n  transferButtonText,\n  transferButtonAction\n}) {\n  /* FIX SETTING NEW OWNER ADDRESS BEFORE TRANSFER */\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      address: \"\"\n    },\n    validationSchema: TransferValidationSchema,\n    onSubmit: transferButtonAction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, formikProps => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormItem, {\n    name: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: \"address\",\n    placeholder: \"Enter address\",\n    onChange: event => {\n      setNewOwnerAddress(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(_Button, {\n    type: \"primary\",\n    onClick: transferButtonAction,\n    disabled: !(formikProps.isValid && formikProps.dirty),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, transferButtonText)));\n}\n\nexport default FormTransferName;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/FormTransferName.tsx"],"names":["Formik","Form","FormItem","Input","React","TransferValidationSchema","FormTransferName","setNewOwnerAddress","transferButtonText","transferButtonAction","address","formikProps","event","target","value","isValid","dirty"],"mappings":";;;AACA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,KAAzB,QAAsC,aAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,wBAAT,QAAyC,+BAAzC;;AAQA,SAASC,gBAAT,CAA0B;AACxBC,EAAAA,kBADwB;AAExBC,EAAAA,kBAFwB;AAGxBC,EAAAA;AAHwB,CAA1B,EAIuC;AACrC;AACA,sBACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADjB;AAEE,IAAA,gBAAgB,EAAEL,wBAFpB;AAGE,IAAA,QAAQ,EAAEI,oBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKIE,WAAD,iBACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,WAAW,EAAC,eAFd;AAGE,IAAA,QAAQ,EAAGC,KAAD,IAAW;AACnBL,MAAAA,kBAAkB,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAlB;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAUE;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,OAAO,EAAEL,oBAFX;AAGE,IAAA,QAAQ,EAAE,EAAEE,WAAW,CAACI,OAAZ,IAAuBJ,WAAW,CAACK,KAArC,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGR,kBALH,CAVF,CANJ,CADF;AA4BD;;AAED,eAAeF,gBAAf","sourcesContent":["import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { TransferValidationSchema } from \"../../forms/validationSchemas\";\n\ninterface FormTransferNameProps {\n  readonly setNewOwnerAddress: (value: React.SetStateAction<string>) => void;\n  readonly transferButtonText: string;\n  readonly transferButtonAction: () => void;\n}\n\nfunction FormTransferName({\n  setNewOwnerAddress,\n  transferButtonText,\n  transferButtonAction,\n}: FormTransferNameProps): JSX.Element {\n  /* FIX SETTING NEW OWNER ADDRESS BEFORE TRANSFER */\n  return (\n    <Formik\n      initialValues={{ address: \"\" }}\n      validationSchema={TransferValidationSchema}\n      onSubmit={transferButtonAction}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"address\">\n            <Input\n              name=\"address\"\n              placeholder=\"Enter address\"\n              onChange={(event) => {\n                setNewOwnerAddress(event.target.value);\n              }}\n            />\n          </FormItem>\n          <Button\n            type=\"primary\"\n            onClick={transferButtonAction}\n            disabled={!(formikProps.isValid && formikProps.dirty)}\n          >\n            {transferButtonText}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default FormTransferName;\n"]},"metadata":{},"sourceType":"module"}