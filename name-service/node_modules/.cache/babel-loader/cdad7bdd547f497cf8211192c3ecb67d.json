{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\n/**\n * Our algorithm have additional one ghost item\n * whose index as `data.length` to simplify the calculation\n */\n\nexport var GHOST_ITEM_KEY = '__rc_ghost_item__';\n/**\n * Get location item and its align percentage with the scroll percentage.\n * We should measure current scroll position to decide which item is the location item.\n * And then fill the top count and bottom count with the base of location item.\n *\n * `total` should be the real count instead of `total - 1` in calculation.\n */\n\nfunction getLocationItem(scrollPtg, total) {\n  var itemIndex = Math.floor(scrollPtg * total);\n  var itemTopPtg = itemIndex / total;\n  var itemBottomPtg = (itemIndex + 1) / total;\n  var itemOffsetPtg = (scrollPtg - itemTopPtg) / (itemBottomPtg - itemTopPtg);\n  return {\n    index: itemIndex,\n    offsetPtg: itemOffsetPtg\n  };\n}\n/**\n * Safari has the elasticity effect which provides negative `scrollTop` value.\n * We should ignore it since will make scroll animation shake.\n */\n\n\nexport function alignScrollTop(scrollTop, scrollRange) {\n  if (scrollTop < 0) {\n    return 0;\n  }\n\n  if (scrollTop >= scrollRange) {\n    return scrollRange;\n  }\n\n  return scrollTop;\n}\nexport function getScrollPercentage(_ref) {\n  var scrollTop = _ref.scrollTop,\n      scrollHeight = _ref.scrollHeight,\n      clientHeight = _ref.clientHeight;\n\n  if (scrollHeight <= clientHeight) {\n    return 0;\n  }\n\n  var scrollRange = scrollHeight - clientHeight;\n  var alignedScrollTop = alignScrollTop(scrollTop, scrollRange);\n  var scrollTopPtg = alignedScrollTop / scrollRange;\n  return scrollTopPtg;\n}\nexport function getElementScrollPercentage(element) {\n  if (!element) {\n    return 0;\n  }\n\n  return getScrollPercentage(element);\n}\n/**\n * Get node `offsetHeight`. We prefer node is a dom element directly.\n * But if not provided, downgrade to `findDOMNode` to get the real dom element.\n */\n\nexport function getNodeHeight(node) {\n  var element = findDOMNode(node);\n  return element ? element.offsetHeight : 0;\n}\n/**\n * Get display items start, end, located item index. This is pure math calculation\n */\n\nexport function getRangeIndex(scrollPtg, itemCount, visibleCount) {\n  var _getLocationItem = getLocationItem(scrollPtg, itemCount),\n      index = _getLocationItem.index,\n      offsetPtg = _getLocationItem.offsetPtg;\n\n  var beforeCount = Math.ceil(scrollPtg * visibleCount);\n  var afterCount = Math.ceil((1 - scrollPtg) * visibleCount);\n  return {\n    itemIndex: index,\n    itemOffsetPtg: offsetPtg,\n    startIndex: Math.max(0, index - beforeCount),\n    endIndex: Math.min(itemCount - 1, index + afterCount)\n  };\n}\n/**\n * Calculate the located item related top with current window height\n */\n\nexport function getItemRelativeTop(_ref2) {\n  var itemIndex = _ref2.itemIndex,\n      itemOffsetPtg = _ref2.itemOffsetPtg,\n      itemElementHeights = _ref2.itemElementHeights,\n      scrollPtg = _ref2.scrollPtg,\n      clientHeight = _ref2.clientHeight,\n      getItemKey = _ref2.getItemKey;\n  var locatedItemHeight = itemElementHeights[getItemKey(itemIndex)] || 0;\n  var locatedItemTop = scrollPtg * clientHeight;\n  var locatedItemOffset = itemOffsetPtg * locatedItemHeight;\n  return Math.floor(locatedItemTop - locatedItemOffset);\n}\n/**\n * Calculate the located item absolute top with whole scroll height\n */\n\nexport function getItemAbsoluteTop(_ref3) {\n  var scrollTop = _ref3.scrollTop,\n      rest = _objectWithoutProperties(_ref3, [\"scrollTop\"]);\n\n  return scrollTop + getItemRelativeTop(rest);\n}\nexport function getCompareItemRelativeTop(_ref4) {\n  var locatedItemRelativeTop = _ref4.locatedItemRelativeTop,\n      locatedItemIndex = _ref4.locatedItemIndex,\n      compareItemIndex = _ref4.compareItemIndex,\n      startIndex = _ref4.startIndex,\n      endIndex = _ref4.endIndex,\n      getItemKey = _ref4.getItemKey,\n      itemElementHeights = _ref4.itemElementHeights;\n  var originCompareItemTop = locatedItemRelativeTop;\n  var compareItemKey = getItemKey(compareItemIndex);\n\n  if (compareItemIndex <= locatedItemIndex) {\n    for (var index = locatedItemIndex; index >= startIndex; index -= 1) {\n      var key = getItemKey(index);\n\n      if (key === compareItemKey) {\n        break;\n      }\n\n      var prevItemKey = getItemKey(index - 1);\n      originCompareItemTop -= itemElementHeights[prevItemKey] || 0;\n    }\n  } else {\n    for (var _index = locatedItemIndex; _index <= endIndex; _index += 1) {\n      var _key = getItemKey(_index);\n\n      if (_key === compareItemKey) {\n        break;\n      }\n\n      originCompareItemTop += itemElementHeights[_key] || 0;\n    }\n  }\n\n  return originCompareItemTop;\n}\nexport function requireVirtual(height, itemHeight, count, virtual) {\n  return virtual !== false && typeof height === 'number' && count * itemHeight > height;\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-virtual-list/es/utils/itemUtil.js"],"names":["_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","keys","findDOMNode","GHOST_ITEM_KEY","getLocationItem","scrollPtg","total","itemIndex","Math","floor","itemTopPtg","itemBottomPtg","itemOffsetPtg","index","offsetPtg","alignScrollTop","scrollTop","scrollRange","getScrollPercentage","_ref","scrollHeight","clientHeight","alignedScrollTop","scrollTopPtg","getElementScrollPercentage","element","getNodeHeight","node","offsetHeight","getRangeIndex","itemCount","visibleCount","_getLocationItem","beforeCount","ceil","afterCount","startIndex","max","endIndex","min","getItemRelativeTop","_ref2","itemElementHeights","getItemKey","locatedItemHeight","locatedItemTop","locatedItemOffset","getItemAbsoluteTop","_ref3","rest","getCompareItemRelativeTop","_ref4","locatedItemRelativeTop","locatedItemIndex","compareItemIndex","originCompareItemTop","compareItemKey","prevItemKey","_index","_key","requireVirtual","height","itemHeight","count","virtual"],"mappings":"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","sourcesContent":["function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\n/**\n * Our algorithm have additional one ghost item\n * whose index as `data.length` to simplify the calculation\n */\n\nexport var GHOST_ITEM_KEY = '__rc_ghost_item__';\n/**\n * Get location item and its align percentage with the scroll percentage.\n * We should measure current scroll position to decide which item is the location item.\n * And then fill the top count and bottom count with the base of location item.\n *\n * `total` should be the real count instead of `total - 1` in calculation.\n */\n\nfunction getLocationItem(scrollPtg, total) {\n  var itemIndex = Math.floor(scrollPtg * total);\n  var itemTopPtg = itemIndex / total;\n  var itemBottomPtg = (itemIndex + 1) / total;\n  var itemOffsetPtg = (scrollPtg - itemTopPtg) / (itemBottomPtg - itemTopPtg);\n  return {\n    index: itemIndex,\n    offsetPtg: itemOffsetPtg\n  };\n}\n/**\n * Safari has the elasticity effect which provides negative `scrollTop` value.\n * We should ignore it since will make scroll animation shake.\n */\n\n\nexport function alignScrollTop(scrollTop, scrollRange) {\n  if (scrollTop < 0) {\n    return 0;\n  }\n\n  if (scrollTop >= scrollRange) {\n    return scrollRange;\n  }\n\n  return scrollTop;\n}\nexport function getScrollPercentage(_ref) {\n  var scrollTop = _ref.scrollTop,\n      scrollHeight = _ref.scrollHeight,\n      clientHeight = _ref.clientHeight;\n\n  if (scrollHeight <= clientHeight) {\n    return 0;\n  }\n\n  var scrollRange = scrollHeight - clientHeight;\n  var alignedScrollTop = alignScrollTop(scrollTop, scrollRange);\n  var scrollTopPtg = alignedScrollTop / scrollRange;\n  return scrollTopPtg;\n}\nexport function getElementScrollPercentage(element) {\n  if (!element) {\n    return 0;\n  }\n\n  return getScrollPercentage(element);\n}\n/**\n * Get node `offsetHeight`. We prefer node is a dom element directly.\n * But if not provided, downgrade to `findDOMNode` to get the real dom element.\n */\n\nexport function getNodeHeight(node) {\n  var element = findDOMNode(node);\n  return element ? element.offsetHeight : 0;\n}\n/**\n * Get display items start, end, located item index. This is pure math calculation\n */\n\nexport function getRangeIndex(scrollPtg, itemCount, visibleCount) {\n  var _getLocationItem = getLocationItem(scrollPtg, itemCount),\n      index = _getLocationItem.index,\n      offsetPtg = _getLocationItem.offsetPtg;\n\n  var beforeCount = Math.ceil(scrollPtg * visibleCount);\n  var afterCount = Math.ceil((1 - scrollPtg) * visibleCount);\n  return {\n    itemIndex: index,\n    itemOffsetPtg: offsetPtg,\n    startIndex: Math.max(0, index - beforeCount),\n    endIndex: Math.min(itemCount - 1, index + afterCount)\n  };\n}\n/**\n * Calculate the located item related top with current window height\n */\n\nexport function getItemRelativeTop(_ref2) {\n  var itemIndex = _ref2.itemIndex,\n      itemOffsetPtg = _ref2.itemOffsetPtg,\n      itemElementHeights = _ref2.itemElementHeights,\n      scrollPtg = _ref2.scrollPtg,\n      clientHeight = _ref2.clientHeight,\n      getItemKey = _ref2.getItemKey;\n  var locatedItemHeight = itemElementHeights[getItemKey(itemIndex)] || 0;\n  var locatedItemTop = scrollPtg * clientHeight;\n  var locatedItemOffset = itemOffsetPtg * locatedItemHeight;\n  return Math.floor(locatedItemTop - locatedItemOffset);\n}\n/**\n * Calculate the located item absolute top with whole scroll height\n */\n\nexport function getItemAbsoluteTop(_ref3) {\n  var scrollTop = _ref3.scrollTop,\n      rest = _objectWithoutProperties(_ref3, [\"scrollTop\"]);\n\n  return scrollTop + getItemRelativeTop(rest);\n}\nexport function getCompareItemRelativeTop(_ref4) {\n  var locatedItemRelativeTop = _ref4.locatedItemRelativeTop,\n      locatedItemIndex = _ref4.locatedItemIndex,\n      compareItemIndex = _ref4.compareItemIndex,\n      startIndex = _ref4.startIndex,\n      endIndex = _ref4.endIndex,\n      getItemKey = _ref4.getItemKey,\n      itemElementHeights = _ref4.itemElementHeights;\n  var originCompareItemTop = locatedItemRelativeTop;\n  var compareItemKey = getItemKey(compareItemIndex);\n\n  if (compareItemIndex <= locatedItemIndex) {\n    for (var index = locatedItemIndex; index >= startIndex; index -= 1) {\n      var key = getItemKey(index);\n\n      if (key === compareItemKey) {\n        break;\n      }\n\n      var prevItemKey = getItemKey(index - 1);\n      originCompareItemTop -= itemElementHeights[prevItemKey] || 0;\n    }\n  } else {\n    for (var _index = locatedItemIndex; _index <= endIndex; _index += 1) {\n      var _key = getItemKey(_index);\n\n      if (_key === compareItemKey) {\n        break;\n      }\n\n      originCompareItemTop += itemElementHeights[_key] || 0;\n    }\n  }\n\n  return originCompareItemTop;\n}\nexport function requireVirtual(height, itemHeight, count, virtual) {\n  return virtual !== false && typeof height === 'number' && count * itemHeight > height;\n}"]},"metadata":{},"sourceType":"module"}