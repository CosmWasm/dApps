{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKey = getKey;\nexports.warningWithoutKey = warningWithoutKey;\nexports.convertTreeToData = convertTreeToData;\nexports.flattenTreeData = flattenTreeData;\nexports.traverseDataNodes = traverseDataNodes;\nexports.convertDataToEntities = convertDataToEntities;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2.default)(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback, externalGetKey) {\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  }\n\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var externalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, externalGetKey);\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-tree/lib/utils/treeUtil.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","getKey","warningWithoutKey","convertTreeToData","flattenTreeData","traverseDataNodes","convertDataToEntities","getTreeNodeProps","convertNodePropsToEventData","_toConsumableArray2","_defineProperty2","_objectWithoutProperties2","_toArray","_warning","_util","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","default","getOwnPropertyDescriptors","defineProperties","pos","undefined","treeData","Map","dig","list","path","treeNode","children","concat","recordKey","String","has","set","rootNodes","node","treeNodes","map","isTreeNode","_treeNode$props","props","rest","dataNode","parsedChildren","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","parent","index","getPosition","mergedKey","flattenNode","data","isStart","isEnd","dataNodes","callback","externalGetKey","syntheticGetKey","processNode","parentPos","level","subNode","subIndex","_ref","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","item","entity","_ref2","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","active","eventData","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKey = getKey;\nexports.warningWithoutKey = warningWithoutKey;\nexports.convertTreeToData = convertTreeToData;\nexports.flattenTreeData = flattenTreeData;\nexports.traverseDataNodes = traverseDataNodes;\nexports.convertDataToEntities = convertDataToEntities;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, [\"children\"]);\n\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = _objectSpread(_objectSpread({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback, externalGetKey) {\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  }\n\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var externalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, externalGetKey);\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"]},"metadata":{},"sourceType":"script"}