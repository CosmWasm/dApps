{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst lcdapi_1 = require(\"./lcdapi\");\n\nfunction sortJson(json) {\n  if (typeof json !== \"object\" || json === null) {\n    return json;\n  }\n\n  if (Array.isArray(json)) {\n    return json.map(sortJson);\n  }\n\n  const sortedKeys = Object.keys(json).sort();\n  const result = sortedKeys.reduce((accumulator, key) => Object.assign(Object.assign({}, accumulator), {\n    [key]: sortJson(json[key])\n  }), {});\n  return result;\n}\n\nfunction makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence) {\n  const signDoc = {\n    account_number: lcdapi_1.uint64ToString(accountNumber),\n    chain_id: chainId,\n    fee: fee,\n    memo: memo,\n    msgs: msgs,\n    sequence: lcdapi_1.uint64ToString(sequence)\n  };\n  const sortedSignDoc = sortJson(signDoc);\n  return encoding_1.toUtf8(JSON.stringify(sortedSignDoc));\n}\n\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"sources":["../src/encoding.ts"],"names":[],"mappings":";;;;;;AAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAIA,SAAS,QAAT,CAAkB,IAAlB,EAA2B;AACzB,MAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,IAAI,KAAK,IAAzC,EAA+C;AAC7C,WAAO,IAAP;AACD;;AACD,MAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,WAAO,IAAI,CAAC,GAAL,CAAS,QAAT,CAAP;AACD;;AACD,QAAM,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,IAAlB,EAAnB;AACA,QAAM,MAAM,GAAG,UAAU,CAAC,MAAX,CACb,CAAC,WAAD,EAAc,GAAd,KAAsB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACjB,WADiB,CAAA,EACN;AACd,KAAC,GAAD,GAAO,QAAQ,CAAC,IAAI,CAAC,GAAD,CAAL;AADD,GADM,CADT,EAKb,EALa,CAAf;AAOA,SAAO,MAAP;AACD;;AAgBD,SAAgB,aAAhB,CACE,IADF,EAEE,GAFF,EAGE,OAHF,EAIE,IAJF,EAKE,aALF,EAME,QANF,EAM2B;AAEzB,QAAM,OAAO,GAAe;AAC1B,IAAA,cAAc,EAAE,QAAA,CAAA,cAAA,CAAe,aAAf,CADU;AAE1B,IAAA,QAAQ,EAAE,OAFgB;AAG1B,IAAA,GAAG,EAAE,GAHqB;AAI1B,IAAA,IAAI,EAAE,IAJoB;AAK1B,IAAA,IAAI,EAAE,IALoB;AAM1B,IAAA,QAAQ,EAAE,QAAA,CAAA,cAAA,CAAe,QAAf;AANgB,GAA5B;AAQA,QAAM,aAAa,GAAG,QAAQ,CAAC,OAAD,CAA9B;AACA,SAAO,UAAA,CAAA,MAAA,CAAO,IAAI,CAAC,SAAL,CAAe,aAAf,CAAP,CAAP;AACD;;AAlBD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeSignBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst lcdapi_1 = require(\"./lcdapi\");\nfunction sortJson(json) {\n    if (typeof json !== \"object\" || json === null) {\n        return json;\n    }\n    if (Array.isArray(json)) {\n        return json.map(sortJson);\n    }\n    const sortedKeys = Object.keys(json).sort();\n    const result = sortedKeys.reduce((accumulator, key) => (Object.assign(Object.assign({}, accumulator), { [key]: sortJson(json[key]) })), {});\n    return result;\n}\nfunction makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence) {\n    const signDoc = {\n        account_number: lcdapi_1.uint64ToString(accountNumber),\n        chain_id: chainId,\n        fee: fee,\n        memo: memo,\n        msgs: msgs,\n        sequence: lcdapi_1.uint64ToString(sequence),\n    };\n    const sortedSignDoc = sortJson(signDoc);\n    return encoding_1.toUtf8(JSON.stringify(sortedSignDoc));\n}\nexports.makeSignBytes = makeSignBytes;\n//# sourceMappingURL=encoding.js.map"]},"metadata":{},"sourceType":"script"}