{"ast":null,"code":"import \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nvar _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/index.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../service\";\nimport { printableCoin } from \"../../../service/helpers\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport Loading from \"../../components/Loading\";\nimport YourAccount from \"../../components/YourAccount\";\nimport { pathContract, pathOperationResult } from \"../../paths\";\nimport FormTransferName from \"./FormTransferName\";\nimport \"./Transfer.less\";\nconst {\n  Title,\n  Text\n} = _Typography;\n\nfunction Transfer() {\n  const {\n    name,\n    contractLabel,\n    contractAddress\n  } = useLocation().state;\n  const fullContractPath = `${pathContract}/${contractLabel}/${contractAddress}`;\n  const history = useHistory();\n  const {\n    setError\n  } = useError();\n  const {\n    getClient\n  } = useSdk();\n  const accountProvider = useAccount();\n  const [loading, setLoading] = useState(false);\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [transferPrice, setTransferPrice] = useState();\n  useEffect(() => {\n    getClient().queryContractSmart(contractAddress, {\n      config: {}\n    }).then(response => {\n      setTransferPrice(response.transfer_price);\n    }).catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    setLoading(true);\n    const payment = transferPrice ? [transferPrice] : undefined;\n    getClient().execute(contractAddress, {\n      transfer: {\n        name: name,\n        to: newOwnerAddress\n      }\n    }, \"Transferring my name\", payment).then(() => {\n      accountProvider.refreshAccount();\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: true,\n          message: `Succesfully transferred ${name} to ${newOwnerAddress}`,\n          customButtonText: \"Name details\",\n          customButtonActionPath: `${fullContractPath}/${name}`\n        }\n      });\n    }).catch(stackTrace => {\n      console.error(stackTrace);\n      const stringStackTrace = typeof stackTrace === \"string\" ? stackTrace : stackTrace.toString();\n      const regexp = new RegExp(\"\\funds\");\n      const error = stringStackTrace.match(regexp)[0];\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Name transfer failed\",\n          error: error\n        }\n      });\n    });\n  }\n\n  return loading && /*#__PURE__*/React.createElement(Loading, {\n    loadingText: `Transferring name: ${name}...`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }) || !loading && /*#__PURE__*/React.createElement(Center, {\n    tag: \"main\",\n    className: \"Transfer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Stack, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    path: `${fullContractPath}/${name}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Stack, {\n    className: \"TransferStack\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Transfer\"), /*#__PURE__*/React.createElement(_Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, \"Name: \"), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, name)), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \"to\"), /*#__PURE__*/React.createElement(FormTransferName, {\n    setNewOwnerAddress: setNewOwnerAddress,\n    transferButtonText: `Transfer ${printableCoin(transferPrice)}`,\n    transferButtonAction: tryTransfer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(YourAccount, {\n    tag: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default Transfer;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/App/routes/Transfer/index.tsx"],"names":["React","useEffect","useState","useHistory","useLocation","useAccount","useError","useSdk","printableCoin","Center","Stack","BackButton","Loading","YourAccount","pathContract","pathOperationResult","FormTransferName","Title","Text","Transfer","name","contractLabel","contractAddress","state","fullContractPath","history","setError","getClient","accountProvider","loading","setLoading","newOwnerAddress","setNewOwnerAddress","transferPrice","setTransferPrice","queryContractSmart","config","then","response","transfer_price","catch","tryTransfer","payment","undefined","execute","transfer","to","refreshAccount","push","pathname","success","message","customButtonText","customButtonActionPath","stackTrace","console","error","stringStackTrace","toString","regexp","RegExp","match"],"mappings":"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","sourcesContent":["import { Coin } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../service\";\nimport { printableCoin } from \"../../../service/helpers\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport Loading from \"../../components/Loading\";\nimport YourAccount from \"../../components/YourAccount\";\nimport { pathContract, pathOperationResult } from \"../../paths\";\nimport { OperationResultState } from \"../OperationResult\";\nimport FormTransferName from \"./FormTransferName\";\nimport \"./Transfer.less\";\n\nconst { Title, Text } = Typography;\n\ninterface TransferState {\n  readonly contractLabel: string;\n  readonly contractAddress: string;\n  readonly name: string;\n}\n\nfunction Transfer(): JSX.Element {\n  const { name, contractLabel, contractAddress } = useLocation().state as TransferState;\n  const fullContractPath = `${pathContract}/${contractLabel}/${contractAddress}`;\n\n  const history = useHistory();\n  const { setError } = useError();\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const [loading, setLoading] = useState(false);\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [transferPrice, setTransferPrice] = useState<Coin>();\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setTransferPrice(response.transfer_price);\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    setLoading(true);\n    const payment = transferPrice ? [transferPrice] : undefined;\n\n    getClient()\n      .execute(\n        contractAddress,\n        { transfer: { name: name, to: newOwnerAddress } },\n        \"Transferring my name\",\n        payment,\n      )\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `Succesfully transferred ${name} to ${newOwnerAddress}`,\n            customButtonText: \"Name details\",\n            customButtonActionPath: `${fullContractPath}/${name}`,\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        const stringStackTrace: string = typeof stackTrace === \"string\" ? stackTrace : stackTrace.toString();\n        const regexp = new RegExp(\"\\funds\");\n        const error = stringStackTrace.match(regexp)[0];\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Name transfer failed\",\n            error: error,\n          } as OperationResultState,\n        });\n      });\n  }\n\n  return (\n    (loading && <Loading loadingText={`Transferring name: ${name}...`} />) ||\n    (!loading && (\n      <Center tag=\"main\" className=\"Transfer\">\n        <Stack>\n          <BackButton path={`${fullContractPath}/${name}`} />\n          <Stack className=\"TransferStack\">\n            <Title>Transfer</Title>\n            <Typography>\n              <Text>Name: </Text>\n              <Text>{name}</Text>\n            </Typography>\n            <Text>to</Text>\n            <FormTransferName\n              setNewOwnerAddress={setNewOwnerAddress}\n              transferButtonText={`Transfer ${printableCoin(transferPrice)}`}\n              transferButtonAction={tryTransfer}\n            />\n          </Stack>\n          <YourAccount tag=\"footer\" />\n        </Stack>\n      </Center>\n    ))\n  );\n}\n\nexport default Transfer;\n"]},"metadata":{},"sourceType":"module"}