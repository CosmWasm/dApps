{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKey = getKey;\nexports.warningWithoutKey = warningWithoutKey;\nexports.convertTreeToData = convertTreeToData;\nexports.flattenTreeData = flattenTreeData;\nexports.traverseDataNodes = traverseDataNodes;\nexports.convertDataToEntities = convertDataToEntities;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, [\"children\"]);\n      var dataNode = (0, _objectSpread2.default)({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback, externalGetKey) {\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  }\n\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var externalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, externalGetKey);\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-tree/lib/utils/treeUtil.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","getKey","warningWithoutKey","convertTreeToData","flattenTreeData","traverseDataNodes","convertDataToEntities","getTreeNodeProps","convertNodePropsToEventData","_toConsumableArray2","_objectSpread2","_objectWithoutProperties2","_toArray","_warning","_util","key","pos","undefined","treeData","arguments","length","keys","Map","dig","list","path","forEach","treeNode","children","default","concat","recordKey","String","has","set","rootNodes","node","treeNodes","map","isTreeNode","_treeNode$props","props","rest","dataNode","parsedChildren","filter","treeNodeList","expandedKeys","expandedKeySet","Set","flattenList","parent","index","getPosition","mergedKey","flattenNode","data","isStart","isEnd","push","dataNodes","callback","externalGetKey","syntheticGetKey","processNode","parentPos","level","subNode","subIndex","_ref","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","item","entity","_ref2","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","active","eventData","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getKey = getKey;\nexports.warningWithoutKey = warningWithoutKey;\nexports.convertTreeToData = convertTreeToData;\nexports.flattenTreeData = flattenTreeData;\nexports.traverseDataNodes = traverseDataNodes;\nexports.convertDataToEntities = convertDataToEntities;\nexports.getTreeNodeProps = getTreeNodeProps;\nexports.convertNodePropsToEventData = convertNodePropsToEventData;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toArray = _interopRequireDefault(require(\"rc-util/lib/Children/toArray\"));\n\nvar _warning = _interopRequireDefault(require(\"rc-util/lib/warning\"));\n\nvar _util = require(\"../util\");\n\nfunction getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n\n  return pos;\n}\n/**\n * Warning if TreeNode do not provides key\n */\n\n\nfunction warningWithoutKey() {\n  var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = new Map();\n\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode.key,\n          children = treeNode.children;\n      (0, _warning.default)(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      (0, _warning.default)(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n\n  dig(treeData);\n}\n/**\n * Convert `children` of Tree into `treeData` structure.\n */\n\n\nfunction convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = (0, _toArray.default)(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!(0, _util.isTreeNode)(treeNode)) {\n        (0, _warning.default)(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n          children = _treeNode$props.children,\n          rest = (0, _objectWithoutProperties2.default)(_treeNode$props, [\"children\"]);\n      var dataNode = (0, _objectSpread2.default)({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n\n  return dig(rootNodes);\n}\n/**\n * Flat nest tree data into flatten list. This is used for virtual list render.\n * @param treeNodeList Origin data node list\n * @param expandedKeys\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\n */\n\n\nfunction flattenTreeData() {\n  var treeNodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var expandedKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = (0, _util.getPosition)(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode.key, pos); // Add FlattenDataNode into list\n\n      var flattenNode = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, treeNode), {}, {\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat((0, _toConsumableArray2.default)(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat((0, _toConsumableArray2.default)(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode); // Loop treeNode children\n\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode.children || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n\n      return flattenNode;\n    });\n  }\n\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\n * Traverse all the data by `treeData`.\n * Please not use it out of the `rc-tree` since we may refactor this code.\n */\n\n\nfunction traverseDataNodes(dataNodes, callback, externalGetKey) {\n  var syntheticGetKey;\n\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node.key, pos);\n    };\n  }\n\n  function processNode(node, index, parent) {\n    var children = node ? node.children : dataNodes;\n    var pos = node ? (0, _util.getPosition)(parent.pos, index) : '0'; // Process node if is not root\n\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1\n      };\n      callback(data);\n    } // Process children node\n\n\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        });\n      });\n    }\n  }\n\n  processNode(null);\n}\n/**\n * Convert `treeData` into entity records.\n */\n\n\nfunction convertDataToEntities(dataNodes) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref.initWrapper,\n      processEntity = _ref.processEntity,\n      onProcessFinished = _ref.onProcessFinished;\n\n  var externalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos,\n        level = item.level;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, externalGetKey);\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Get TreeNode props with Tree props.\n */\n\n\nfunction getTreeNodeProps(key, _ref2) {\n  var expandedKeys = _ref2.expandedKeys,\n      selectedKeys = _ref2.selectedKeys,\n      loadedKeys = _ref2.loadedKeys,\n      loadingKeys = _ref2.loadingKeys,\n      checkedKeys = _ref2.checkedKeys,\n      halfCheckedKeys = _ref2.halfCheckedKeys,\n      dragOverNodeKey = _ref2.dragOverNodeKey,\n      dropPosition = _ref2.dropPosition,\n      keyEntities = _ref2.keyEntities;\n  var entity = keyEntities[key];\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\n\nfunction convertNodePropsToEventData(props) {\n  var data = props.data,\n      expanded = props.expanded,\n      selected = props.selected,\n      checked = props.checked,\n      loaded = props.loaded,\n      loading = props.loading,\n      halfChecked = props.halfChecked,\n      dragOver = props.dragOver,\n      dragOverGapTop = props.dragOverGapTop,\n      dragOverGapBottom = props.dragOverGapBottom,\n      pos = props.pos,\n      active = props.active;\n  var eventData = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active\n  });\n\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        (0, _warning.default)(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n\n  return eventData;\n}"]},"metadata":{},"sourceType":"script"}