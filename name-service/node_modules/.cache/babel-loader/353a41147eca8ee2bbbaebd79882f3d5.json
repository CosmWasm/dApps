{"ast":null,"code":"var _jsxFileName = \"/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/account.tsx\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\nconst defaultContext = {\n  refreshAccount: () => {\n    return;\n  }\n};\nconst AccountContext = React.createContext(defaultContext);\n\nconst useAccount = () => React.useContext(AccountContext);\n\nfunction AccountProvider({\n  children\n}) {\n  const {\n    setError\n  } = useError();\n  const sdk = useSdk();\n  const [value, setValue] = React.useState({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk.getClient().getAccount().then(account => setValue({\n        account\n      })).catch(setError);\n    }\n  } // this should just be called once on startup\n\n\n  React.useEffect(refreshAccount, [sdk, setError]);\n  const context = {\n    refreshAccount,\n    account: value.account\n  };\n  return /*#__PURE__*/React.createElement(AccountContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 10\n    }\n  }, children);\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/account.tsx"],"names":["React","useError","useSdk","defaultContext","refreshAccount","AccountContext","createContext","useAccount","useContext","AccountProvider","children","setError","sdk","value","setValue","useState","initialized","getClient","getAccount","then","account","catch","useEffect","context"],"mappings":";AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAUA,MAAMC,cAAkC,GAAG;AACzCC,EAAAA,cAAc,EAAE,MAAM;AACpB;AACD;AAHwC,CAA3C;AAMA,MAAMC,cAAc,GAAGL,KAAK,CAACM,aAAN,CAAwCH,cAAxC,CAAvB;;AAEA,MAAMI,UAAU,GAAG,MAA0BP,KAAK,CAACQ,UAAN,CAAiBH,cAAjB,CAA7C;;AAEA,SAASI,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA4F;AAC1F,QAAM;AAAEC,IAAAA;AAAF,MAAeV,QAAQ,EAA7B;AACA,QAAMW,GAAG,GAAGV,MAAM,EAAlB;AAEA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBd,KAAK,CAACe,QAAN,CAAsB,EAAtB,CAA1B;;AAEA,WAASX,cAAT,GAA0B;AACxB,QAAIQ,GAAG,CAACI,WAAR,EAAqB;AACnBJ,MAAAA,GAAG,CACAK,SADH,GAEGC,UAFH,GAGGC,IAHH,CAGSC,OAAD,IAAaN,QAAQ,CAAC;AAAEM,QAAAA;AAAF,OAAD,CAH7B,EAIGC,KAJH,CAISV,QAJT;AAKD;AACF,GAdyF,CAgB1F;;;AACAX,EAAAA,KAAK,CAACsB,SAAN,CAAgBlB,cAAhB,EAAgC,CAACQ,GAAD,EAAMD,QAAN,CAAhC;AAEA,QAAMY,OAA2B,GAAG;AAClCnB,IAAAA,cADkC;AAElCgB,IAAAA,OAAO,EAAEP,KAAK,CAACO;AAFmB,GAApC;AAKA,sBAAO,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEG,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0Cb,QAA1C,CAAP;AACD","sourcesContent":["import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nconst useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nfunction AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}