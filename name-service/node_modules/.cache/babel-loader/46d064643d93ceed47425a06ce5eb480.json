{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnglishMnemonic = void 0;\n\nconst bip39 = __importStar(require(\"bip39\"));\n\nclass EnglishMnemonic {\n  constructor(mnemonic) {\n    if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {\n      throw new Error(\"Invalid mnemonic format\");\n    }\n\n    const words = mnemonic.split(\" \");\n    const allowedWordsLengths = [12, 15, 18, 21, 24];\n\n    if (allowedWordsLengths.indexOf(words.length) === -1) {\n      throw new Error(`Invalid word count in mnemonic (allowed: ${allowedWordsLengths} got: ${words.length})`);\n    }\n\n    for (const word of words) {\n      if (EnglishMnemonic.wordlist.indexOf(word) === -1) {\n        throw new Error(\"Mnemonic contains invalid word\");\n      }\n    } // Throws with informative error message if mnemonic is not valid\n\n\n    bip39.mnemonicToEntropy(mnemonic);\n    this.data = mnemonic;\n  }\n\n  toString() {\n    return this.data;\n  }\n\n}\n\nexports.EnglishMnemonic = EnglishMnemonic;\nEnglishMnemonic.wordlist = bip39.wordlists.english; // list of space separated lower case words (1 or more)\n\nEnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;","map":{"version":3,"sources":["../src/englishmnemonic.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,MAAa,eAAb,CAA4B;AAQ1B,EAAA,WAAA,CAAmB,QAAnB,EAAmC;AACjC,QAAI,CAAC,eAAe,CAAC,eAAhB,CAAgC,IAAhC,CAAqC,QAArC,CAAL,EAAqD;AACnD,YAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,UAAM,KAAK,GAAG,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAd;AACA,UAAM,mBAAmB,GAAsB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAA/C;;AACA,QAAI,mBAAmB,CAAC,OAApB,CAA4B,KAAK,CAAC,MAAlC,MAA8C,CAAC,CAAnD,EAAsD;AACpD,YAAM,IAAI,KAAJ,CACJ,4CAA4C,mBAAmB,SAAS,KAAK,CAAC,MAAM,GADhF,CAAN;AAGD;;AAED,SAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACxB,UAAI,eAAe,CAAC,QAAhB,CAAyB,OAAzB,CAAiC,IAAjC,MAA2C,CAAC,CAAhD,EAAmD;AACjD,cAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF,KAjBgC,CAmBjC;;;AACA,IAAA,KAAK,CAAC,iBAAN,CAAwB,QAAxB;AAEA,SAAK,IAAL,GAAY,QAAZ;AACD;;AAEM,EAAA,QAAQ,GAAA;AACb,WAAO,KAAK,IAAZ;AACD;;AAnCyB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA;AACyB,eAAA,CAAA,QAAA,GAA8B,KAAK,CAAC,SAAN,CAAgB,OAA9C,C,CAEvB;;AACwB,eAAA,CAAA,eAAA,GAAkB,oBAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnglishMnemonic = void 0;\nconst bip39 = __importStar(require(\"bip39\"));\nclass EnglishMnemonic {\n    constructor(mnemonic) {\n        if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {\n            throw new Error(\"Invalid mnemonic format\");\n        }\n        const words = mnemonic.split(\" \");\n        const allowedWordsLengths = [12, 15, 18, 21, 24];\n        if (allowedWordsLengths.indexOf(words.length) === -1) {\n            throw new Error(`Invalid word count in mnemonic (allowed: ${allowedWordsLengths} got: ${words.length})`);\n        }\n        for (const word of words) {\n            if (EnglishMnemonic.wordlist.indexOf(word) === -1) {\n                throw new Error(\"Mnemonic contains invalid word\");\n            }\n        }\n        // Throws with informative error message if mnemonic is not valid\n        bip39.mnemonicToEntropy(mnemonic);\n        this.data = mnemonic;\n    }\n    toString() {\n        return this.data;\n    }\n}\nexports.EnglishMnemonic = EnglishMnemonic;\nEnglishMnemonic.wordlist = bip39.wordlists.english;\n// list of space separated lower case words (1 or more)\nEnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;\n//# sourceMappingURL=englishmnemonic.js.map"]},"metadata":{},"sourceType":"script"}