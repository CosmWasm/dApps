{"ast":null,"code":"import{Decimal}from\"@cosmjs/math\";// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace=\"\\u202F\";export function printableBalance(balance){if(!balance||balance.length===0)return\"–\";return balance.map(printableCoin).join(\", \");}export function printableCoin(coin){if(!coin){return\"0\";}if(coin.denom.startsWith(\"u\")){const ticker=coin.denom.slice(1).toUpperCase();return Decimal.fromAtomics(coin.amount,6).toString()+thinSpace+ticker;}else{return coin.amount+thinSpace+coin.denom;}}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/helpers.ts"],"names":["Decimal","thinSpace","printableBalance","balance","length","map","printableCoin","join","coin","denom","startsWith","ticker","slice","toUpperCase","fromAtomics","amount","toString"],"mappings":"AACA,OAASA,OAAT,KAAwB,cAAxB,CAEA;AACA,KAAMC,CAAAA,SAAS,CAAG,QAAlB,CAEA,MAAO,SAASC,CAAAA,gBAAT,CAA0BC,OAA1B,CAA6D,CAClE,GAAI,CAACA,OAAD,EAAYA,OAAO,CAACC,MAAR,GAAmB,CAAnC,CAAsC,MAAO,GAAP,CACtC,MAAOD,CAAAA,OAAO,CAACE,GAAR,CAAYC,aAAZ,EAA2BC,IAA3B,CAAgC,IAAhC,CAAP,CACD,CAED,MAAO,SAASD,CAAAA,aAAT,CAAuBE,IAAvB,CAA4C,CACjD,GAAI,CAACA,IAAL,CAAW,CACT,MAAO,GAAP,CACD,CACD,GAAIA,IAAI,CAACC,KAAL,CAAWC,UAAX,CAAsB,GAAtB,CAAJ,CAAgC,CAC9B,KAAMC,CAAAA,MAAM,CAAGH,IAAI,CAACC,KAAL,CAAWG,KAAX,CAAiB,CAAjB,EAAoBC,WAApB,EAAf,CACA,MAAOb,CAAAA,OAAO,CAACc,WAAR,CAAoBN,IAAI,CAACO,MAAzB,CAAiC,CAAjC,EAAoCC,QAApC,GAAiDf,SAAjD,CAA6DU,MAApE,CACD,CAHD,IAGO,CACL,MAAOH,CAAAA,IAAI,CAACO,MAAL,CAAcd,SAAd,CAA0BO,IAAI,CAACC,KAAtC,CACD,CACF","sourcesContent":["import { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}