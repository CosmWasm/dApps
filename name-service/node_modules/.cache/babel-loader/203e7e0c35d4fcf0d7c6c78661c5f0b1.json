{"ast":null,"code":"import { forEach } from 'property-expr';\n\nvar trim = function trim(part) {\n  return part.substr(0, part.length - 1).substr(1);\n};\n\nexport function getIn(schema, path, value, context) {\n  if (context === void 0) {\n    context = value;\n  }\n\n  var parent, lastPart, lastPartDebug; // root path: ''\n\n  if (!path) return {\n    parent: parent,\n    parentPath: path,\n    schema: schema\n  };\n  forEach(path, function (_part, isBracket, isArray) {\n    var part = isBracket ? trim(_part) : _part;\n    schema = schema.resolve({\n      context: context,\n      parent: parent,\n      value: value\n    });\n\n    if (schema.innerType) {\n      var idx = isArray ? parseInt(part, 10) : 0;\n\n      if (value && idx >= value.length) {\n        throw new Error(\"Yup.reach cannot resolve an array item at index: \" + _part + \", in the path: \" + path + \". \" + \"because there is no value at that index. \");\n      }\n\n      parent = value;\n      value = value && value[idx];\n      schema = schema.innerType;\n    } // sometimes the array index part of a path doesn't exist: \"nested.arr.child\"\n    // in these cases the current part is the next schema and should be processed\n    // in this iteration. For cases where the index signature is included this\n    // check will fail and we'll handle the `child` part on the next iteration like normal\n\n\n    if (!isArray) {\n      if (!schema.fields || !schema.fields[part]) throw new Error(\"The schema does not contain the path: \" + path + \". \" + (\"(failed at: \" + lastPartDebug + \" which is a type: \\\"\" + schema._type + \"\\\")\"));\n      parent = value;\n      value = value && value[part];\n      schema = schema.fields[part];\n    }\n\n    lastPart = part;\n    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n  });\n  return {\n    schema: schema,\n    parent: parent,\n    parentPath: lastPart\n  };\n}\n\nvar reach = function reach(obj, path, value, context) {\n  return getIn(obj, path, value, context).schema;\n};\n\nexport default reach;","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/yup/es/util/reach.js"],"names":["forEach","trim","part","substr","length","getIn","schema","path","value","context","parent","lastPart","lastPartDebug","parentPath","_part","isBracket","isArray","resolve","innerType","idx","parseInt","Error","fields","_type","reach","obj"],"mappings":"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","sourcesContent":["import { forEach } from 'property-expr';\n\nvar trim = function trim(part) {\n  return part.substr(0, part.length - 1).substr(1);\n};\n\nexport function getIn(schema, path, value, context) {\n  if (context === void 0) {\n    context = value;\n  }\n\n  var parent, lastPart, lastPartDebug; // root path: ''\n\n  if (!path) return {\n    parent: parent,\n    parentPath: path,\n    schema: schema\n  };\n  forEach(path, function (_part, isBracket, isArray) {\n    var part = isBracket ? trim(_part) : _part;\n    schema = schema.resolve({\n      context: context,\n      parent: parent,\n      value: value\n    });\n\n    if (schema.innerType) {\n      var idx = isArray ? parseInt(part, 10) : 0;\n\n      if (value && idx >= value.length) {\n        throw new Error(\"Yup.reach cannot resolve an array item at index: \" + _part + \", in the path: \" + path + \". \" + \"because there is no value at that index. \");\n      }\n\n      parent = value;\n      value = value && value[idx];\n      schema = schema.innerType;\n    } // sometimes the array index part of a path doesn't exist: \"nested.arr.child\"\n    // in these cases the current part is the next schema and should be processed\n    // in this iteration. For cases where the index signature is included this\n    // check will fail and we'll handle the `child` part on the next iteration like normal\n\n\n    if (!isArray) {\n      if (!schema.fields || !schema.fields[part]) throw new Error(\"The schema does not contain the path: \" + path + \". \" + (\"(failed at: \" + lastPartDebug + \" which is a type: \\\"\" + schema._type + \"\\\")\"));\n      parent = value;\n      value = value && value[part];\n      schema = schema.fields[part];\n    }\n\n    lastPart = part;\n    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;\n  });\n  return {\n    schema: schema,\n    parent: parent,\n    parentPath: lastPart\n  };\n}\n\nvar reach = function reach(obj, path, value, context) {\n  return getIn(obj, path, value, context).schema;\n};\n\nexport default reach;"]},"metadata":{},"sourceType":"module"}