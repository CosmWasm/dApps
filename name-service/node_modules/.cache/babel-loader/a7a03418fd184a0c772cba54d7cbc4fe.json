{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst launchpad_1 = require(\"@cosmjs/launchpad\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst pako_1 = __importDefault(require(\"pako\"));\n\nconst builder_1 = require(\"./builder\");\n\nconst cosmwasmclient_1 = require(\"./cosmwasmclient\");\n\nconst logs_1 = require(\"./logs\");\n\nfunction prepareBuilder(buider) {\n  if (buider === undefined) {\n    return \"\"; // normalization needed by backend\n  } else {\n    if (!builder_1.isValidBuilder(buider)) throw new Error(\"The builder (Docker Hub image with tag) is not valid\");\n    return buider;\n  }\n}\n\nconst defaultFees = {\n  upload: {\n    amount: launchpad_1.coins(25000, \"ucosm\"),\n    gas: \"1000000\"\n  },\n  init: {\n    amount: launchpad_1.coins(12500, \"ucosm\"),\n    gas: \"500000\"\n  },\n  migrate: {\n    amount: launchpad_1.coins(5000, \"ucosm\"),\n    gas: \"200000\"\n  },\n  exec: {\n    amount: launchpad_1.coins(5000, \"ucosm\"),\n    gas: \"200000\"\n  },\n  send: {\n    amount: launchpad_1.coins(2000, \"ucosm\"),\n    gas: \"80000\"\n  },\n  changeAdmin: {\n    amount: launchpad_1.coins(2000, \"ucosm\"),\n    gas: \"80000\"\n  }\n};\n\nfunction createPostTxErrorMessage(result) {\n  return `Error when posting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`;\n}\n\nclass SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {\n  /**\n   * Creates a new client with signing capability to interact with a CosmWasm blockchain. This is the bigger brother of CosmWasmClient.\n   *\n   * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n   * for the lifetime of your application. When switching backends, a new instance must be created.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param senderAddress The address that will sign and send transactions using this instance\n   * @param signer An implementation of OfflineSigner which can provide signatures for transactions, potentially requiring user input.\n   * @param customFees The fees that are paid for transactions\n   * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n   */\n  constructor(apiUrl, senderAddress, signer, customFees, broadcastMode = launchpad_1.BroadcastMode.Block) {\n    super(apiUrl, broadcastMode);\n    this.anyValidAddress = senderAddress;\n    this.senderAddress = senderAddress;\n    this.signer = signer;\n    this.fees = Object.assign(Object.assign({}, defaultFees), customFees || {});\n  }\n\n  async getSequence(address) {\n    return super.getSequence(address || this.senderAddress);\n  }\n\n  async getAccount(address) {\n    return super.getAccount(address || this.senderAddress);\n  }\n  /** Uploads code and returns a receipt, including the code ID */\n\n\n  async upload(wasmCode, meta = {}, memo = \"\") {\n    const source = meta.source || \"\";\n    const builder = prepareBuilder(meta.builder);\n    const compressed = pako_1.default.gzip(wasmCode, {\n      level: 9\n    });\n    const storeCodeMsg = {\n      type: \"wasm/MsgStoreCode\",\n      value: {\n        sender: this.senderAddress,\n        wasm_byte_code: encoding_1.toBase64(compressed),\n        source: source,\n        builder: builder\n      }\n    };\n    const result = await this.signAndPost([storeCodeMsg], this.fees.upload, memo);\n\n    if (launchpad_1.isPostTxFailure(result)) {\n      throw new Error(createPostTxErrorMessage(result));\n    }\n\n    const codeIdAttr = logs_1.findAttribute(result.logs, \"message\", \"code_id\");\n    return {\n      originalSize: wasmCode.length,\n      originalChecksum: encoding_1.toHex(new crypto_1.Sha256(wasmCode).digest()),\n      compressedSize: compressed.length,\n      compressedChecksum: encoding_1.toHex(new crypto_1.Sha256(compressed).digest()),\n      codeId: Number.parseInt(codeIdAttr.value, 10),\n      logs: result.logs,\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async instantiate(codeId, initMsg, label, options = {}) {\n    const instantiateMsg = {\n      type: \"wasm/MsgInstantiateContract\",\n      value: {\n        sender: this.senderAddress,\n        code_id: new math_1.Uint53(codeId).toString(),\n        label: label,\n        init_msg: initMsg,\n        init_funds: options.transferAmount || [],\n        admin: options.admin\n      }\n    };\n    const result = await this.signAndPost([instantiateMsg], this.fees.init, options.memo);\n\n    if (launchpad_1.isPostTxFailure(result)) {\n      throw new Error(createPostTxErrorMessage(result));\n    }\n\n    const contractAddressAttr = logs_1.findAttribute(result.logs, \"message\", \"contract_address\");\n    return {\n      contractAddress: contractAddressAttr.value,\n      logs: result.logs,\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async updateAdmin(contractAddress, newAdmin, memo = \"\") {\n    const updateAdminMsg = {\n      type: \"wasm/MsgUpdateAdmin\",\n      value: {\n        sender: this.senderAddress,\n        contract: contractAddress,\n        new_admin: newAdmin\n      }\n    };\n    const result = await this.signAndPost([updateAdminMsg], this.fees.changeAdmin, memo);\n\n    if (launchpad_1.isPostTxFailure(result)) {\n      throw new Error(createPostTxErrorMessage(result));\n    }\n\n    return {\n      logs: result.logs,\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async clearAdmin(contractAddress, memo = \"\") {\n    const clearAdminMsg = {\n      type: \"wasm/MsgClearAdmin\",\n      value: {\n        sender: this.senderAddress,\n        contract: contractAddress\n      }\n    };\n    const result = await this.signAndPost([clearAdminMsg], this.fees.changeAdmin, memo);\n\n    if (launchpad_1.isPostTxFailure(result)) {\n      throw new Error(createPostTxErrorMessage(result));\n    }\n\n    return {\n      logs: result.logs,\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async migrate(contractAddress, codeId, migrateMsg, memo = \"\") {\n    const msg = {\n      type: \"wasm/MsgMigrateContract\",\n      value: {\n        sender: this.senderAddress,\n        contract: contractAddress,\n        code_id: new math_1.Uint53(codeId).toString(),\n        msg: migrateMsg\n      }\n    };\n    const result = await this.signAndPost([msg], this.fees.migrate, memo);\n\n    if (launchpad_1.isPostTxFailure(result)) {\n      throw new Error(createPostTxErrorMessage(result));\n    }\n\n    return {\n      logs: result.logs,\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async execute(contractAddress, handleMsg, memo = \"\", transferAmount) {\n    const executeMsg = {\n      type: \"wasm/MsgExecuteContract\",\n      value: {\n        sender: this.senderAddress,\n        contract: contractAddress,\n        msg: handleMsg,\n        sent_funds: transferAmount || []\n      }\n    };\n    const result = await this.signAndPost([executeMsg], this.fees.exec, memo);\n\n    if (launchpad_1.isPostTxFailure(result)) {\n      throw new Error(createPostTxErrorMessage(result));\n    }\n\n    return {\n      logs: result.logs,\n      transactionHash: result.transactionHash\n    };\n  }\n\n  async sendTokens(recipientAddress, transferAmount, memo = \"\") {\n    const sendMsg = {\n      type: \"cosmos-sdk/MsgSend\",\n      value: {\n        from_address: this.senderAddress,\n        to_address: recipientAddress,\n        amount: transferAmount\n      }\n    };\n    return this.signAndPost([sendMsg], this.fees.send, memo);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature, assembles the signed transaction and broadcasts it.\n   */\n\n\n  async signAndPost(msgs, fee, memo = \"\") {\n    const {\n      accountNumber,\n      sequence\n    } = await this.getSequence();\n    const chainId = await this.getChainId();\n    const signBytes = launchpad_1.makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence);\n    const signature = await this.signer.sign(this.senderAddress, signBytes);\n    const signedTx = {\n      msg: msgs,\n      fee: fee,\n      memo: memo,\n      signatures: [signature]\n    };\n    return this.postTx(signedTx);\n  }\n\n}\n\nexports.SigningCosmWasmClient = SigningCosmWasmClient;","map":{"version":3,"sources":["../src/signingcosmwasmclient.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAcA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAuBA,SAAS,cAAT,CAAwB,MAAxB,EAAkD;AAChD,MAAI,MAAM,KAAK,SAAf,EAA0B;AACxB,WAAO,EAAP,CADwB,CACb;AACZ,GAFD,MAEO;AACL,QAAI,CAAC,SAAA,CAAA,cAAA,CAAe,MAAf,CAAL,EAA6B,MAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AAC7B,WAAO,MAAP;AACD;AACF;;AAED,MAAM,WAAW,GAAa;AAC5B,EAAA,MAAM,EAAE;AACN,IAAA,MAAM,EAAE,WAAA,CAAA,KAAA,CAAM,KAAN,EAAa,OAAb,CADF;AAEN,IAAA,GAAG,EAAE;AAFC,GADoB;AAK5B,EAAA,IAAI,EAAE;AACJ,IAAA,MAAM,EAAE,WAAA,CAAA,KAAA,CAAM,KAAN,EAAa,OAAb,CADJ;AAEJ,IAAA,GAAG,EAAE;AAFD,GALsB;AAS5B,EAAA,OAAO,EAAE;AACP,IAAA,MAAM,EAAE,WAAA,CAAA,KAAA,CAAM,IAAN,EAAY,OAAZ,CADD;AAEP,IAAA,GAAG,EAAE;AAFE,GATmB;AAa5B,EAAA,IAAI,EAAE;AACJ,IAAA,MAAM,EAAE,WAAA,CAAA,KAAA,CAAM,IAAN,EAAY,OAAZ,CADJ;AAEJ,IAAA,GAAG,EAAE;AAFD,GAbsB;AAiB5B,EAAA,IAAI,EAAE;AACJ,IAAA,MAAM,EAAE,WAAA,CAAA,KAAA,CAAM,IAAN,EAAY,OAAZ,CADJ;AAEJ,IAAA,GAAG,EAAE;AAFD,GAjBsB;AAqB5B,EAAA,WAAW,EAAE;AACX,IAAA,MAAM,EAAE,WAAA,CAAA,KAAA,CAAM,IAAN,EAAY,OAAZ,CADG;AAEX,IAAA,GAAG,EAAE;AAFM;AArBe,CAA9B;;AAsGA,SAAS,wBAAT,CAAkC,MAAlC,EAAuD;AACrD,SAAO,yBAAyB,MAAM,CAAC,eAAe,cAAc,MAAM,CAAC,MAAM,WAAW,MAAM,CAAC,IAAI,cAAc,MAAM,CAAC,MAAM,EAAlI;AACD;;AAED,MAAa,qBAAb,SAA2C,gBAAA,CAAA,cAA3C,CAAyD;AAMvD;;;;;;;;;;;;AAYA,EAAA,WAAA,CACE,MADF,EAEE,aAFF,EAGE,MAHF,EAIE,UAJF,EAKE,aAAa,GAAG,WAAA,CAAA,aAAA,CAAc,KALhC,EAKqC;AAEnC,UAAM,MAAN,EAAc,aAAd;AACA,SAAK,eAAL,GAAuB,aAAvB;AAEA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAS,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,WAAR,CAAA,EAAyB,UAAU,IAAI,EAAvC,CAAT;AACD;;AAEM,QAAM,WAAN,CAAkB,OAAlB,EAAkC;AACvC,WAAO,MAAM,WAAN,CAAkB,OAAO,IAAI,KAAK,aAAlC,CAAP;AACD;;AAEM,QAAM,UAAN,CAAiB,OAAjB,EAAiC;AACtC,WAAO,MAAM,UAAN,CAAiB,OAAO,IAAI,KAAK,aAAjC,CAAP;AACD;AAED;;;AACO,QAAM,MAAN,CAAa,QAAb,EAAmC,IAAA,GAAmB,EAAtD,EAA0D,IAAI,GAAG,EAAjE,EAAmE;AACxE,UAAM,MAAM,GAAG,IAAI,CAAC,MAAL,IAAe,EAA9B;AACA,UAAM,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,OAAN,CAA9B;AAEA,UAAM,UAAU,GAAG,MAAA,CAAA,OAAA,CAAK,IAAL,CAAU,QAAV,EAAoB;AAAE,MAAA,KAAK,EAAE;AAAT,KAApB,CAAnB;AACA,UAAM,YAAY,GAAiB;AACjC,MAAA,IAAI,EAAE,mBAD2B;AAEjC,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,KAAK,aADR;AAEL,QAAA,cAAc,EAAE,UAAA,CAAA,QAAA,CAAS,UAAT,CAFX;AAGL,QAAA,MAAM,EAAE,MAHH;AAIL,QAAA,OAAO,EAAE;AAJJ;AAF0B,KAAnC;AASA,UAAM,MAAM,GAAG,MAAM,KAAK,WAAL,CAAiB,CAAC,YAAD,CAAjB,EAAiC,KAAK,IAAL,CAAU,MAA3C,EAAmD,IAAnD,CAArB;;AACA,QAAI,WAAA,CAAA,eAAA,CAAgB,MAAhB,CAAJ,EAA6B;AAC3B,YAAM,IAAI,KAAJ,CAAU,wBAAwB,CAAC,MAAD,CAAlC,CAAN;AACD;;AACD,UAAM,UAAU,GAAG,MAAA,CAAA,aAAA,CAAc,MAAM,CAAC,IAArB,EAA2B,SAA3B,EAAsC,SAAtC,CAAnB;AACA,WAAO;AACL,MAAA,YAAY,EAAE,QAAQ,CAAC,MADlB;AAEL,MAAA,gBAAgB,EAAE,UAAA,CAAA,KAAA,CAAM,IAAI,QAAA,CAAA,MAAJ,CAAW,QAAX,EAAqB,MAArB,EAAN,CAFb;AAGL,MAAA,cAAc,EAAE,UAAU,CAAC,MAHtB;AAIL,MAAA,kBAAkB,EAAE,UAAA,CAAA,KAAA,CAAM,IAAI,QAAA,CAAA,MAAJ,CAAW,UAAX,EAAuB,MAAvB,EAAN,CAJf;AAKL,MAAA,MAAM,EAAE,MAAM,CAAC,QAAP,CAAgB,UAAU,CAAC,KAA3B,EAAkC,EAAlC,CALH;AAML,MAAA,IAAI,EAAE,MAAM,CAAC,IANR;AAOL,MAAA,eAAe,EAAE,MAAM,CAAC;AAPnB,KAAP;AASD;;AAEM,QAAM,WAAN,CACL,MADK,EAEL,OAFK,EAGL,KAHK,EAIL,OAAA,GAA8B,EAJzB,EAI2B;AAEhC,UAAM,cAAc,GAA2B;AAC7C,MAAA,IAAI,EAAE,6BADuC;AAE7C,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,KAAK,aADR;AAEL,QAAA,OAAO,EAAE,IAAI,MAAA,CAAA,MAAJ,CAAW,MAAX,EAAmB,QAAnB,EAFJ;AAGL,QAAA,KAAK,EAAE,KAHF;AAIL,QAAA,QAAQ,EAAE,OAJL;AAKL,QAAA,UAAU,EAAE,OAAO,CAAC,cAAR,IAA0B,EALjC;AAML,QAAA,KAAK,EAAE,OAAO,CAAC;AANV;AAFsC,KAA/C;AAWA,UAAM,MAAM,GAAG,MAAM,KAAK,WAAL,CAAiB,CAAC,cAAD,CAAjB,EAAmC,KAAK,IAAL,CAAU,IAA7C,EAAmD,OAAO,CAAC,IAA3D,CAArB;;AACA,QAAI,WAAA,CAAA,eAAA,CAAgB,MAAhB,CAAJ,EAA6B;AAC3B,YAAM,IAAI,KAAJ,CAAU,wBAAwB,CAAC,MAAD,CAAlC,CAAN;AACD;;AACD,UAAM,mBAAmB,GAAG,MAAA,CAAA,aAAA,CAAc,MAAM,CAAC,IAArB,EAA2B,SAA3B,EAAsC,kBAAtC,CAA5B;AACA,WAAO;AACL,MAAA,eAAe,EAAE,mBAAmB,CAAC,KADhC;AAEL,MAAA,IAAI,EAAE,MAAM,CAAC,IAFR;AAGL,MAAA,eAAe,EAAE,MAAM,CAAC;AAHnB,KAAP;AAKD;;AAEM,QAAM,WAAN,CAAkB,eAAlB,EAA2C,QAA3C,EAA6D,IAAI,GAAG,EAApE,EAAsE;AAC3E,UAAM,cAAc,GAAmB;AACrC,MAAA,IAAI,EAAE,qBAD+B;AAErC,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,KAAK,aADR;AAEL,QAAA,QAAQ,EAAE,eAFL;AAGL,QAAA,SAAS,EAAE;AAHN;AAF8B,KAAvC;AAQA,UAAM,MAAM,GAAG,MAAM,KAAK,WAAL,CAAiB,CAAC,cAAD,CAAjB,EAAmC,KAAK,IAAL,CAAU,WAA7C,EAA0D,IAA1D,CAArB;;AACA,QAAI,WAAA,CAAA,eAAA,CAAgB,MAAhB,CAAJ,EAA6B;AAC3B,YAAM,IAAI,KAAJ,CAAU,wBAAwB,CAAC,MAAD,CAAlC,CAAN;AACD;;AACD,WAAO;AACL,MAAA,IAAI,EAAE,MAAM,CAAC,IADR;AAEL,MAAA,eAAe,EAAE,MAAM,CAAC;AAFnB,KAAP;AAID;;AAEM,QAAM,UAAN,CAAiB,eAAjB,EAA0C,IAAI,GAAG,EAAjD,EAAmD;AACxD,UAAM,aAAa,GAAkB;AACnC,MAAA,IAAI,EAAE,oBAD6B;AAEnC,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,KAAK,aADR;AAEL,QAAA,QAAQ,EAAE;AAFL;AAF4B,KAArC;AAOA,UAAM,MAAM,GAAG,MAAM,KAAK,WAAL,CAAiB,CAAC,aAAD,CAAjB,EAAkC,KAAK,IAAL,CAAU,WAA5C,EAAyD,IAAzD,CAArB;;AACA,QAAI,WAAA,CAAA,eAAA,CAAgB,MAAhB,CAAJ,EAA6B;AAC3B,YAAM,IAAI,KAAJ,CAAU,wBAAwB,CAAC,MAAD,CAAlC,CAAN;AACD;;AACD,WAAO;AACL,MAAA,IAAI,EAAE,MAAM,CAAC,IADR;AAEL,MAAA,eAAe,EAAE,MAAM,CAAC;AAFnB,KAAP;AAID;;AAEM,QAAM,OAAN,CACL,eADK,EAEL,MAFK,EAGL,UAHK,EAIL,IAAI,GAAG,EAJF,EAII;AAET,UAAM,GAAG,GAAuB;AAC9B,MAAA,IAAI,EAAE,yBADwB;AAE9B,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,KAAK,aADR;AAEL,QAAA,QAAQ,EAAE,eAFL;AAGL,QAAA,OAAO,EAAE,IAAI,MAAA,CAAA,MAAJ,CAAW,MAAX,EAAmB,QAAnB,EAHJ;AAIL,QAAA,GAAG,EAAE;AAJA;AAFuB,KAAhC;AASA,UAAM,MAAM,GAAG,MAAM,KAAK,WAAL,CAAiB,CAAC,GAAD,CAAjB,EAAwB,KAAK,IAAL,CAAU,OAAlC,EAA2C,IAA3C,CAArB;;AACA,QAAI,WAAA,CAAA,eAAA,CAAgB,MAAhB,CAAJ,EAA6B;AAC3B,YAAM,IAAI,KAAJ,CAAU,wBAAwB,CAAC,MAAD,CAAlC,CAAN;AACD;;AACD,WAAO;AACL,MAAA,IAAI,EAAE,MAAM,CAAC,IADR;AAEL,MAAA,eAAe,EAAE,MAAM,CAAC;AAFnB,KAAP;AAID;;AAEM,QAAM,OAAN,CACL,eADK,EAEL,SAFK,EAGL,IAAI,GAAG,EAHF,EAIL,cAJK,EAI2B;AAEhC,UAAM,UAAU,GAAuB;AACrC,MAAA,IAAI,EAAE,yBAD+B;AAErC,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,KAAK,aADR;AAEL,QAAA,QAAQ,EAAE,eAFL;AAGL,QAAA,GAAG,EAAE,SAHA;AAIL,QAAA,UAAU,EAAE,cAAc,IAAI;AAJzB;AAF8B,KAAvC;AASA,UAAM,MAAM,GAAG,MAAM,KAAK,WAAL,CAAiB,CAAC,UAAD,CAAjB,EAA+B,KAAK,IAAL,CAAU,IAAzC,EAA+C,IAA/C,CAArB;;AACA,QAAI,WAAA,CAAA,eAAA,CAAgB,MAAhB,CAAJ,EAA6B;AAC3B,YAAM,IAAI,KAAJ,CAAU,wBAAwB,CAAC,MAAD,CAAlC,CAAN;AACD;;AACD,WAAO;AACL,MAAA,IAAI,EAAE,MAAM,CAAC,IADR;AAEL,MAAA,eAAe,EAAE,MAAM,CAAC;AAFnB,KAAP;AAID;;AAEM,QAAM,UAAN,CACL,gBADK,EAEL,cAFK,EAGL,IAAI,GAAG,EAHF,EAGI;AAET,UAAM,OAAO,GAAY;AACvB,MAAA,IAAI,EAAE,oBADiB;AAEvB,MAAA,KAAK,EAAE;AACL,QAAA,YAAY,EAAE,KAAK,aADd;AAEL,QAAA,UAAU,EAAE,gBAFP;AAGL,QAAA,MAAM,EAAE;AAHH;AAFgB,KAAzB;AAQA,WAAO,KAAK,WAAL,CAAiB,CAAC,OAAD,CAAjB,EAA4B,KAAK,IAAL,CAAU,IAAtC,EAA4C,IAA5C,CAAP;AACD;AAED;;;;;;AAIO,QAAM,WAAN,CAAkB,IAAlB,EAAwC,GAAxC,EAAqD,IAAI,GAAG,EAA5D,EAA8D;AACnE,UAAM;AAAE,MAAA,aAAF;AAAiB,MAAA;AAAjB,QAA8B,MAAM,KAAK,WAAL,EAA1C;AACA,UAAM,OAAO,GAAG,MAAM,KAAK,UAAL,EAAtB;AACA,UAAM,SAAS,GAAG,WAAA,CAAA,aAAA,CAAc,IAAd,EAAoB,GAApB,EAAyB,OAAzB,EAAkC,IAAlC,EAAwC,aAAxC,EAAuD,QAAvD,CAAlB;AACA,UAAM,SAAS,GAAG,MAAM,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,aAAtB,EAAqC,SAArC,CAAxB;AACA,UAAM,QAAQ,GAAU;AACtB,MAAA,GAAG,EAAE,IADiB;AAEtB,MAAA,GAAG,EAAE,GAFiB;AAGtB,MAAA,IAAI,EAAE,IAHgB;AAItB,MAAA,UAAU,EAAE,CAAC,SAAD;AAJU,KAAxB;AAMA,WAAO,KAAK,MAAL,CAAY,QAAZ,CAAP;AACD;;AA5NsD;;AAAzD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SigningCosmWasmClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst launchpad_1 = require(\"@cosmjs/launchpad\");\nconst math_1 = require(\"@cosmjs/math\");\nconst pako_1 = __importDefault(require(\"pako\"));\nconst builder_1 = require(\"./builder\");\nconst cosmwasmclient_1 = require(\"./cosmwasmclient\");\nconst logs_1 = require(\"./logs\");\nfunction prepareBuilder(buider) {\n    if (buider === undefined) {\n        return \"\"; // normalization needed by backend\n    }\n    else {\n        if (!builder_1.isValidBuilder(buider))\n            throw new Error(\"The builder (Docker Hub image with tag) is not valid\");\n        return buider;\n    }\n}\nconst defaultFees = {\n    upload: {\n        amount: launchpad_1.coins(25000, \"ucosm\"),\n        gas: \"1000000\",\n    },\n    init: {\n        amount: launchpad_1.coins(12500, \"ucosm\"),\n        gas: \"500000\",\n    },\n    migrate: {\n        amount: launchpad_1.coins(5000, \"ucosm\"),\n        gas: \"200000\",\n    },\n    exec: {\n        amount: launchpad_1.coins(5000, \"ucosm\"),\n        gas: \"200000\",\n    },\n    send: {\n        amount: launchpad_1.coins(2000, \"ucosm\"),\n        gas: \"80000\",\n    },\n    changeAdmin: {\n        amount: launchpad_1.coins(2000, \"ucosm\"),\n        gas: \"80000\",\n    },\n};\nfunction createPostTxErrorMessage(result) {\n    return `Error when posting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`;\n}\nclass SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {\n    /**\n     * Creates a new client with signing capability to interact with a CosmWasm blockchain. This is the bigger brother of CosmWasmClient.\n     *\n     * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n     * for the lifetime of your application. When switching backends, a new instance must be created.\n     *\n     * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n     * @param senderAddress The address that will sign and send transactions using this instance\n     * @param signer An implementation of OfflineSigner which can provide signatures for transactions, potentially requiring user input.\n     * @param customFees The fees that are paid for transactions\n     * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n     */\n    constructor(apiUrl, senderAddress, signer, customFees, broadcastMode = launchpad_1.BroadcastMode.Block) {\n        super(apiUrl, broadcastMode);\n        this.anyValidAddress = senderAddress;\n        this.senderAddress = senderAddress;\n        this.signer = signer;\n        this.fees = Object.assign(Object.assign({}, defaultFees), (customFees || {}));\n    }\n    async getSequence(address) {\n        return super.getSequence(address || this.senderAddress);\n    }\n    async getAccount(address) {\n        return super.getAccount(address || this.senderAddress);\n    }\n    /** Uploads code and returns a receipt, including the code ID */\n    async upload(wasmCode, meta = {}, memo = \"\") {\n        const source = meta.source || \"\";\n        const builder = prepareBuilder(meta.builder);\n        const compressed = pako_1.default.gzip(wasmCode, { level: 9 });\n        const storeCodeMsg = {\n            type: \"wasm/MsgStoreCode\",\n            value: {\n                sender: this.senderAddress,\n                wasm_byte_code: encoding_1.toBase64(compressed),\n                source: source,\n                builder: builder,\n            },\n        };\n        const result = await this.signAndPost([storeCodeMsg], this.fees.upload, memo);\n        if (launchpad_1.isPostTxFailure(result)) {\n            throw new Error(createPostTxErrorMessage(result));\n        }\n        const codeIdAttr = logs_1.findAttribute(result.logs, \"message\", \"code_id\");\n        return {\n            originalSize: wasmCode.length,\n            originalChecksum: encoding_1.toHex(new crypto_1.Sha256(wasmCode).digest()),\n            compressedSize: compressed.length,\n            compressedChecksum: encoding_1.toHex(new crypto_1.Sha256(compressed).digest()),\n            codeId: Number.parseInt(codeIdAttr.value, 10),\n            logs: result.logs,\n            transactionHash: result.transactionHash,\n        };\n    }\n    async instantiate(codeId, initMsg, label, options = {}) {\n        const instantiateMsg = {\n            type: \"wasm/MsgInstantiateContract\",\n            value: {\n                sender: this.senderAddress,\n                code_id: new math_1.Uint53(codeId).toString(),\n                label: label,\n                init_msg: initMsg,\n                init_funds: options.transferAmount || [],\n                admin: options.admin,\n            },\n        };\n        const result = await this.signAndPost([instantiateMsg], this.fees.init, options.memo);\n        if (launchpad_1.isPostTxFailure(result)) {\n            throw new Error(createPostTxErrorMessage(result));\n        }\n        const contractAddressAttr = logs_1.findAttribute(result.logs, \"message\", \"contract_address\");\n        return {\n            contractAddress: contractAddressAttr.value,\n            logs: result.logs,\n            transactionHash: result.transactionHash,\n        };\n    }\n    async updateAdmin(contractAddress, newAdmin, memo = \"\") {\n        const updateAdminMsg = {\n            type: \"wasm/MsgUpdateAdmin\",\n            value: {\n                sender: this.senderAddress,\n                contract: contractAddress,\n                new_admin: newAdmin,\n            },\n        };\n        const result = await this.signAndPost([updateAdminMsg], this.fees.changeAdmin, memo);\n        if (launchpad_1.isPostTxFailure(result)) {\n            throw new Error(createPostTxErrorMessage(result));\n        }\n        return {\n            logs: result.logs,\n            transactionHash: result.transactionHash,\n        };\n    }\n    async clearAdmin(contractAddress, memo = \"\") {\n        const clearAdminMsg = {\n            type: \"wasm/MsgClearAdmin\",\n            value: {\n                sender: this.senderAddress,\n                contract: contractAddress,\n            },\n        };\n        const result = await this.signAndPost([clearAdminMsg], this.fees.changeAdmin, memo);\n        if (launchpad_1.isPostTxFailure(result)) {\n            throw new Error(createPostTxErrorMessage(result));\n        }\n        return {\n            logs: result.logs,\n            transactionHash: result.transactionHash,\n        };\n    }\n    async migrate(contractAddress, codeId, migrateMsg, memo = \"\") {\n        const msg = {\n            type: \"wasm/MsgMigrateContract\",\n            value: {\n                sender: this.senderAddress,\n                contract: contractAddress,\n                code_id: new math_1.Uint53(codeId).toString(),\n                msg: migrateMsg,\n            },\n        };\n        const result = await this.signAndPost([msg], this.fees.migrate, memo);\n        if (launchpad_1.isPostTxFailure(result)) {\n            throw new Error(createPostTxErrorMessage(result));\n        }\n        return {\n            logs: result.logs,\n            transactionHash: result.transactionHash,\n        };\n    }\n    async execute(contractAddress, handleMsg, memo = \"\", transferAmount) {\n        const executeMsg = {\n            type: \"wasm/MsgExecuteContract\",\n            value: {\n                sender: this.senderAddress,\n                contract: contractAddress,\n                msg: handleMsg,\n                sent_funds: transferAmount || [],\n            },\n        };\n        const result = await this.signAndPost([executeMsg], this.fees.exec, memo);\n        if (launchpad_1.isPostTxFailure(result)) {\n            throw new Error(createPostTxErrorMessage(result));\n        }\n        return {\n            logs: result.logs,\n            transactionHash: result.transactionHash,\n        };\n    }\n    async sendTokens(recipientAddress, transferAmount, memo = \"\") {\n        const sendMsg = {\n            type: \"cosmos-sdk/MsgSend\",\n            value: {\n                from_address: this.senderAddress,\n                to_address: recipientAddress,\n                amount: transferAmount,\n            },\n        };\n        return this.signAndPost([sendMsg], this.fees.send, memo);\n    }\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature, assembles the signed transaction and broadcasts it.\n     */\n    async signAndPost(msgs, fee, memo = \"\") {\n        const { accountNumber, sequence } = await this.getSequence();\n        const chainId = await this.getChainId();\n        const signBytes = launchpad_1.makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence);\n        const signature = await this.signer.sign(this.senderAddress, signBytes);\n        const signedTx = {\n            msg: msgs,\n            fee: fee,\n            memo: memo,\n            signatures: [signature],\n        };\n        return this.postTx(signedTx);\n    }\n}\nexports.SigningCosmWasmClient = SigningCosmWasmClient;\n//# sourceMappingURL=signingcosmwasmclient.js.map"]},"metadata":{},"sourceType":"script"}