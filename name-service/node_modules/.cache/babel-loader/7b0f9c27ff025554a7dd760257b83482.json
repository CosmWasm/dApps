{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport get from \"rc-util/es/utils/get\";\nimport set from \"rc-util/es/utils/set\";\nimport { toArray } from './typeUtil';\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * 'a' => ['a']\n * 123 => [123]\n * ['a', 123] => ['a', 123]\n */\n\nexport function getNamePath(path) {\n  return toArray(path);\n}\nexport function getValue(store, namePath) {\n  var value = get(store, namePath);\n  return value;\n}\nexport function setValue(store, namePath, value) {\n  var newStore = set(store, namePath, value);\n  return newStore;\n}\nexport function cloneByNamePathList(store, namePathList) {\n  var newStore = {};\n  namePathList.forEach(function (namePath) {\n    var value = getValue(store, namePath);\n    newStore = setValue(newStore, namePath, value);\n  });\n  return newStore;\n}\nexport function containsNamePath(namePathList, namePath) {\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(path, namePath);\n  });\n}\n\nfunction isObject(obj) {\n  return _typeof(obj) === 'object' && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;\n}\n/**\n * Copy values into store and return a new values object\n * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }\n */\n\n\nfunction internalSetValues(store, values) {\n  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _objectSpread({}, store);\n\n  if (!values) {\n    return newStore;\n  }\n\n  Object.keys(values).forEach(function (key) {\n    var prevValue = newStore[key];\n    var value = values[key]; // If both are object (but target is not array), we use recursion to set deep value\n\n    var recursive = isObject(prevValue) && isObject(value);\n    newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : value;\n  });\n  return newStore;\n}\n\nexport function setValues(store) {\n  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restValues[_key - 1] = arguments[_key];\n  }\n\n  return restValues.reduce(function (current, newStore) {\n    return internalSetValues(current, newStore);\n  }, store);\n}\nexport function matchNamePath(namePath, changedNamePath) {\n  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {\n    return false;\n  }\n\n  return namePath.every(function (nameUnit, i) {\n    return changedNamePath[i] === nameUnit;\n  });\n}\nexport function isSimilar(source, target) {\n  if (source === target) {\n    return true;\n  }\n\n  if (!source && target || source && !target) {\n    return false;\n  }\n\n  if (!source || !target || _typeof(source) !== 'object' || _typeof(target) !== 'object') {\n    return false;\n  }\n\n  var sourceKeys = Object.keys(source);\n  var targetKeys = Object.keys(target);\n  var keys = new Set([].concat(_toConsumableArray(sourceKeys), _toConsumableArray(targetKeys)));\n  return _toConsumableArray(keys).every(function (key) {\n    var sourceValue = source[key];\n    var targetValue = target[key];\n\n    if (typeof sourceValue === 'function' && typeof targetValue === 'function') {\n      return true;\n    }\n\n    return sourceValue === targetValue;\n  });\n}\nexport function defaultGetValueFromEvent(valuePropName) {\n  var event = arguments.length <= 1 ? undefined : arguments[1];\n\n  if (event && event.target && valuePropName in event.target) {\n    return event.target[valuePropName];\n  }\n\n  return event;\n}\n/**\n * Moves an array item from one position in an array to another.\n *\n * Note: This is a pure function so a new array will be returned, instead\n * of altering the array argument.\n *\n * @param array         Array in which to move an item.         (required)\n * @param moveIndex     The index of the item to move.          (required)\n * @param toIndex       The index to move item at moveIndex to. (required)\n */\n\nexport function move(array, moveIndex, toIndex) {\n  var length = array.length;\n\n  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {\n    return array;\n  }\n\n  var item = array[moveIndex];\n  var diff = moveIndex - toIndex;\n\n  if (diff > 0) {\n    // move left\n    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));\n  }\n\n  if (diff < 0) {\n    // move right\n    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));\n  }\n\n  return array;\n}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/node_modules/rc-field-form/es/utils/valueUtil.js"],"names":["_defineProperty","_toConsumableArray","_typeof","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","get","set","toArray","getNamePath","path","getValue","store","namePath","value","setValue","newStore","cloneByNamePathList","namePathList","containsNamePath","some","matchNamePath","isObject","obj","getPrototypeOf","prototype","internalSetValues","values","Array","isArray","prevValue","recursive","setValues","_len","restValues","_key","reduce","current","changedNamePath","every","nameUnit","isSimilar","sourceKeys","targetKeys","Set","concat","sourceValue","targetValue","defaultGetValueFromEvent","valuePropName","event","undefined","move","array","moveIndex","toIndex","item","diff","slice"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport get from \"rc-util/es/utils/get\";\nimport set from \"rc-util/es/utils/set\";\nimport { toArray } from './typeUtil';\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * 'a' => ['a']\n * 123 => [123]\n * ['a', 123] => ['a', 123]\n */\n\nexport function getNamePath(path) {\n  return toArray(path);\n}\nexport function getValue(store, namePath) {\n  var value = get(store, namePath);\n  return value;\n}\nexport function setValue(store, namePath, value) {\n  var newStore = set(store, namePath, value);\n  return newStore;\n}\nexport function cloneByNamePathList(store, namePathList) {\n  var newStore = {};\n  namePathList.forEach(function (namePath) {\n    var value = getValue(store, namePath);\n    newStore = setValue(newStore, namePath, value);\n  });\n  return newStore;\n}\nexport function containsNamePath(namePathList, namePath) {\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(path, namePath);\n  });\n}\n\nfunction isObject(obj) {\n  return _typeof(obj) === 'object' && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;\n}\n/**\n * Copy values into store and return a new values object\n * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }\n */\n\n\nfunction internalSetValues(store, values) {\n  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _objectSpread({}, store);\n\n  if (!values) {\n    return newStore;\n  }\n\n  Object.keys(values).forEach(function (key) {\n    var prevValue = newStore[key];\n    var value = values[key]; // If both are object (but target is not array), we use recursion to set deep value\n\n    var recursive = isObject(prevValue) && isObject(value);\n    newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : value;\n  });\n  return newStore;\n}\n\nexport function setValues(store) {\n  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restValues[_key - 1] = arguments[_key];\n  }\n\n  return restValues.reduce(function (current, newStore) {\n    return internalSetValues(current, newStore);\n  }, store);\n}\nexport function matchNamePath(namePath, changedNamePath) {\n  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {\n    return false;\n  }\n\n  return namePath.every(function (nameUnit, i) {\n    return changedNamePath[i] === nameUnit;\n  });\n}\nexport function isSimilar(source, target) {\n  if (source === target) {\n    return true;\n  }\n\n  if (!source && target || source && !target) {\n    return false;\n  }\n\n  if (!source || !target || _typeof(source) !== 'object' || _typeof(target) !== 'object') {\n    return false;\n  }\n\n  var sourceKeys = Object.keys(source);\n  var targetKeys = Object.keys(target);\n  var keys = new Set([].concat(_toConsumableArray(sourceKeys), _toConsumableArray(targetKeys)));\n  return _toConsumableArray(keys).every(function (key) {\n    var sourceValue = source[key];\n    var targetValue = target[key];\n\n    if (typeof sourceValue === 'function' && typeof targetValue === 'function') {\n      return true;\n    }\n\n    return sourceValue === targetValue;\n  });\n}\nexport function defaultGetValueFromEvent(valuePropName) {\n  var event = arguments.length <= 1 ? undefined : arguments[1];\n\n  if (event && event.target && valuePropName in event.target) {\n    return event.target[valuePropName];\n  }\n\n  return event;\n}\n/**\n * Moves an array item from one position in an array to another.\n *\n * Note: This is a pure function so a new array will be returned, instead\n * of altering the array argument.\n *\n * @param array         Array in which to move an item.         (required)\n * @param moveIndex     The index of the item to move.          (required)\n * @param toIndex       The index to move item at moveIndex to. (required)\n */\n\nexport function move(array, moveIndex, toIndex) {\n  var length = array.length;\n\n  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {\n    return array;\n  }\n\n  var item = array[moveIndex];\n  var diff = moveIndex - toIndex;\n\n  if (diff > 0) {\n    // move left\n    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));\n  }\n\n  if (diff < 0) {\n    // move right\n    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));\n  }\n\n  return array;\n}"]},"metadata":{},"sourceType":"module"}