{"ast":null,"code":"import{SigningCosmWasmClient}from\"@cosmjs/cosmwasm\";import{Bip39,Random}from\"@cosmjs/crypto\";import{makeCosmoshubPath,Secp256k1Wallet}from\"@cosmjs/launchpad\";// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(){return Bip39.encode(Random.getBytes(16)).toString();}// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(){const key=\"burner-wallet\";const loaded=localStorage.getItem(key);if(loaded){return loaded;}const generated=generateMnemonic();localStorage.setItem(key,generated);return generated;}export async function loadOrCreateWallet(addressPrefix){const mnemonic=loadOrCreateMnemonic();const hdPath=makeCosmoshubPath(0);const wallet=await Secp256k1Wallet.fromMnemonic(mnemonic,hdPath,addressPrefix);return wallet;}// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(httpUrl,signer){const firstAddress=(await signer.getAccounts())[0].address;return new SigningCosmWasmClient(httpUrl,firstAddress,signer);}","map":{"version":3,"sources":["/home/abefernan/cosmwasm/dApps/packages/name-service/src/service/sdk.ts"],"names":["SigningCosmWasmClient","Bip39","Random","makeCosmoshubPath","Secp256k1Wallet","generateMnemonic","encode","getBytes","toString","loadOrCreateMnemonic","key","loaded","localStorage","getItem","generated","setItem","loadOrCreateWallet","addressPrefix","mnemonic","hdPath","wallet","fromMnemonic","createClient","httpUrl","signer","firstAddress","getAccounts","address"],"mappings":"AAAA,OAASA,qBAAT,KAAsC,kBAAtC,CACA,OAASC,KAAT,CAAgBC,MAAhB,KAA8B,gBAA9B,CACA,OAASC,iBAAT,CAA2CC,eAA3C,KAAkE,mBAAlE,CAEA;AACA;AACA,MAAO,SAASC,CAAAA,gBAAT,EAAoC,CACzC,MAAOJ,CAAAA,KAAK,CAACK,MAAN,CAAaJ,MAAM,CAACK,QAAP,CAAgB,EAAhB,CAAb,EAAkCC,QAAlC,EAAP,CACD,CAED;AACA,MAAO,SAASC,CAAAA,oBAAT,EAAwC,CAC7C,KAAMC,CAAAA,GAAG,CAAG,eAAZ,CACA,KAAMC,CAAAA,MAAM,CAAGC,YAAY,CAACC,OAAb,CAAqBH,GAArB,CAAf,CACA,GAAIC,MAAJ,CAAY,CACV,MAAOA,CAAAA,MAAP,CACD,CACD,KAAMG,CAAAA,SAAS,CAAGT,gBAAgB,EAAlC,CACAO,YAAY,CAACG,OAAb,CAAqBL,GAArB,CAA0BI,SAA1B,EACA,MAAOA,CAAAA,SAAP,CACD,CAED,MAAO,eAAeE,CAAAA,kBAAf,CAAkCC,aAAlC,CAAiF,CACtF,KAAMC,CAAAA,QAAQ,CAAGT,oBAAoB,EAArC,CACA,KAAMU,CAAAA,MAAM,CAAGhB,iBAAiB,CAAC,CAAD,CAAhC,CACA,KAAMiB,CAAAA,MAAM,CAAG,KAAMhB,CAAAA,eAAe,CAACiB,YAAhB,CAA6BH,QAA7B,CAAuCC,MAAvC,CAA+CF,aAA/C,CAArB,CACA,MAAOG,CAAAA,MAAP,CACD,CAED;AACA;AACA,MAAO,eAAeE,CAAAA,YAAf,CAA4BC,OAA5B,CAA6CC,MAA7C,CAAoG,CACzG,KAAMC,CAAAA,YAAY,CAAG,CAAC,KAAMD,CAAAA,MAAM,CAACE,WAAP,EAAP,EAA6B,CAA7B,EAAgCC,OAArD,CACA,MAAO,IAAI3B,CAAAA,qBAAJ,CAA0BuB,OAA1B,CAAmCE,YAAnC,CAAiDD,MAAjD,CAAP,CACD","sourcesContent":["import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { makeCosmoshubPath, OfflineSigner, Secp256k1Wallet } from \"@cosmjs/launchpad\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport async function loadOrCreateWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(httpUrl: string, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  return new SigningCosmWasmClient(httpUrl, firstAddress, signer);\n}\n"]},"metadata":{},"sourceType":"module"}