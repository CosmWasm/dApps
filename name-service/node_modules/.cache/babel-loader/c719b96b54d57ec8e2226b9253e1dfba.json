{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningCosmosClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst coins_1 = require(\"./coins\");\n\nconst cosmosclient_1 = require(\"./cosmosclient\");\n\nconst encoding_1 = require(\"./encoding\");\n\nconst lcdapi_1 = require(\"./lcdapi\");\n\nconst defaultFees = {\n  send: {\n    amount: coins_1.coins(2000, \"ucosm\"),\n    gas: \"80000\"\n  }\n};\n\nclass SigningCosmosClient extends cosmosclient_1.CosmosClient {\n  /**\n   * Creates a new client with signing capability to interact with a CosmWasm blockchain. This is the bigger brother of CosmWasmClient.\n   *\n   * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n   * for the lifetime of your application. When switching backends, a new instance must be created.\n   *\n   * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n   * @param senderAddress The address that will sign and send transactions using this instance\n   * @param signer An implementation of OfflineSigner which can provide signatures for transactions, potentially requiring user input.\n   * @param customFees The fees that are paid for transactions\n   * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n   */\n  constructor(apiUrl, senderAddress, signer, customFees, broadcastMode = lcdapi_1.BroadcastMode.Block) {\n    super(apiUrl, broadcastMode);\n    this.anyValidAddress = senderAddress;\n    this.senderAddress = senderAddress;\n    this.signer = signer;\n    this.fees = Object.assign(Object.assign({}, defaultFees), customFees || {});\n  }\n\n  async getSequence(address) {\n    return super.getSequence(address || this.senderAddress);\n  }\n\n  async getAccount(address) {\n    return super.getAccount(address || this.senderAddress);\n  }\n\n  async sendTokens(recipientAddress, transferAmount, memo = \"\") {\n    const sendMsg = {\n      type: \"cosmos-sdk/MsgSend\",\n      value: {\n        from_address: this.senderAddress,\n        to_address: recipientAddress,\n        amount: transferAmount\n      }\n    };\n    return this.signAndPost([sendMsg], this.fees.send, memo);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature, assembles the signed transaction and broadcasts it.\n   */\n\n\n  async signAndPost(msgs, fee, memo = \"\") {\n    const {\n      accountNumber,\n      sequence\n    } = await this.getSequence();\n    const chainId = await this.getChainId();\n    const signBytes = encoding_1.makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence);\n    const signature = await this.signer.sign(this.senderAddress, signBytes);\n    const signedTx = {\n      msg: msgs,\n      fee: fee,\n      memo: memo,\n      signatures: [signature]\n    };\n    return this.postTx(signedTx);\n  }\n\n}\n\nexports.SigningCosmosClient = SigningCosmosClient;","map":{"version":3,"sources":["../src/signingcosmosclient.ts"],"names":[],"mappings":";;;;;;AAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAYA,MAAM,WAAW,GAAa;AAC5B,EAAA,IAAI,EAAE;AACJ,IAAA,MAAM,EAAE,OAAA,CAAA,KAAA,CAAM,IAAN,EAAY,OAAZ,CADJ;AAEJ,IAAA,GAAG,EAAE;AAFD;AADsB,CAA9B;;AAOA,MAAa,mBAAb,SAAyC,cAAA,CAAA,YAAzC,CAAqD;AAMnD;;;;;;;;;;;;AAYA,EAAA,WAAA,CACE,MADF,EAEE,aAFF,EAGE,MAHF,EAIE,UAJF,EAKE,aAAa,GAAG,QAAA,CAAA,aAAA,CAAc,KALhC,EAKqC;AAEnC,UAAM,MAAN,EAAc,aAAd;AACA,SAAK,eAAL,GAAuB,aAAvB;AAEA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,GAAS,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,WAAR,CAAA,EAAyB,UAAU,IAAI,EAAvC,CAAT;AACD;;AAEM,QAAM,WAAN,CAAkB,OAAlB,EAAkC;AACvC,WAAO,MAAM,WAAN,CAAkB,OAAO,IAAI,KAAK,aAAlC,CAAP;AACD;;AAEM,QAAM,UAAN,CAAiB,OAAjB,EAAiC;AACtC,WAAO,MAAM,UAAN,CAAiB,OAAO,IAAI,KAAK,aAAjC,CAAP;AACD;;AAEM,QAAM,UAAN,CACL,gBADK,EAEL,cAFK,EAGL,IAAI,GAAG,EAHF,EAGI;AAET,UAAM,OAAO,GAAY;AACvB,MAAA,IAAI,EAAE,oBADiB;AAEvB,MAAA,KAAK,EAAE;AACL,QAAA,YAAY,EAAE,KAAK,aADd;AAEL,QAAA,UAAU,EAAE,gBAFP;AAGL,QAAA,MAAM,EAAE;AAHH;AAFgB,KAAzB;AAQA,WAAO,KAAK,WAAL,CAAiB,CAAC,OAAD,CAAjB,EAA4B,KAAK,IAAL,CAAU,IAAtC,EAA4C,IAA5C,CAAP;AACD;AAED;;;;;;AAIO,QAAM,WAAN,CAAkB,IAAlB,EAAwC,GAAxC,EAAqD,IAAI,GAAG,EAA5D,EAA8D;AACnE,UAAM;AAAE,MAAA,aAAF;AAAiB,MAAA;AAAjB,QAA8B,MAAM,KAAK,WAAL,EAA1C;AACA,UAAM,OAAO,GAAG,MAAM,KAAK,UAAL,EAAtB;AACA,UAAM,SAAS,GAAG,UAAA,CAAA,aAAA,CAAc,IAAd,EAAoB,GAApB,EAAyB,OAAzB,EAAkC,IAAlC,EAAwC,aAAxC,EAAuD,QAAvD,CAAlB;AACA,UAAM,SAAS,GAAG,MAAM,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,aAAtB,EAAqC,SAArC,CAAxB;AACA,UAAM,QAAQ,GAAU;AACtB,MAAA,GAAG,EAAE,IADiB;AAEtB,MAAA,GAAG,EAAE,GAFiB;AAGtB,MAAA,IAAI,EAAE,IAHgB;AAItB,MAAA,UAAU,EAAE,CAAC,SAAD;AAJU,KAAxB;AAMA,WAAO,KAAK,MAAL,CAAY,QAAZ,CAAP;AACD;;AAzEkD;;AAArD,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SigningCosmosClient = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst coins_1 = require(\"./coins\");\nconst cosmosclient_1 = require(\"./cosmosclient\");\nconst encoding_1 = require(\"./encoding\");\nconst lcdapi_1 = require(\"./lcdapi\");\nconst defaultFees = {\n    send: {\n        amount: coins_1.coins(2000, \"ucosm\"),\n        gas: \"80000\",\n    },\n};\nclass SigningCosmosClient extends cosmosclient_1.CosmosClient {\n    /**\n     * Creates a new client with signing capability to interact with a CosmWasm blockchain. This is the bigger brother of CosmWasmClient.\n     *\n     * This instance does a lot of caching. In order to benefit from that you should try to use one instance\n     * for the lifetime of your application. When switching backends, a new instance must be created.\n     *\n     * @param apiUrl The URL of a Cosmos SDK light client daemon API (sometimes called REST server or REST API)\n     * @param senderAddress The address that will sign and send transactions using this instance\n     * @param signer An implementation of OfflineSigner which can provide signatures for transactions, potentially requiring user input.\n     * @param customFees The fees that are paid for transactions\n     * @param broadcastMode Defines at which point of the transaction processing the postTx method (i.e. transaction broadcasting) returns\n     */\n    constructor(apiUrl, senderAddress, signer, customFees, broadcastMode = lcdapi_1.BroadcastMode.Block) {\n        super(apiUrl, broadcastMode);\n        this.anyValidAddress = senderAddress;\n        this.senderAddress = senderAddress;\n        this.signer = signer;\n        this.fees = Object.assign(Object.assign({}, defaultFees), (customFees || {}));\n    }\n    async getSequence(address) {\n        return super.getSequence(address || this.senderAddress);\n    }\n    async getAccount(address) {\n        return super.getAccount(address || this.senderAddress);\n    }\n    async sendTokens(recipientAddress, transferAmount, memo = \"\") {\n        const sendMsg = {\n            type: \"cosmos-sdk/MsgSend\",\n            value: {\n                from_address: this.senderAddress,\n                to_address: recipientAddress,\n                amount: transferAmount,\n            },\n        };\n        return this.signAndPost([sendMsg], this.fees.send, memo);\n    }\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature, assembles the signed transaction and broadcasts it.\n     */\n    async signAndPost(msgs, fee, memo = \"\") {\n        const { accountNumber, sequence } = await this.getSequence();\n        const chainId = await this.getChainId();\n        const signBytes = encoding_1.makeSignBytes(msgs, fee, chainId, memo, accountNumber, sequence);\n        const signature = await this.signer.sign(this.senderAddress, signBytes);\n        const signedTx = {\n            msg: msgs,\n            fee: fee,\n            memo: memo,\n            signatures: [signature],\n        };\n        return this.postTx(signedTx);\n    }\n}\nexports.SigningCosmosClient = SigningCosmosClient;\n//# sourceMappingURL=signingcosmosclient.js.map"]},"metadata":{},"sourceType":"script"}