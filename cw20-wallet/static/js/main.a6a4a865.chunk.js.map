{"version":3,"sources":["App/routes/Allowances/assets/edit.svg","App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","App/assets/backArrow.svg","../../src/service/error.tsx","../../src/service/sdk.ts","../../src/service/wallet.tsx","../../src/service/account.tsx","../../src/service/contracts.tsx","../../src/service/cw20.tsx","../../src/service/ProtectedSwitch.tsx","../../src/utils/currency.ts","../../src/utils/errors.ts","../../src/components/layout/Center/component.tsx","../../src/components/layout/Center/style.ts","../../src/components/layout/Stack/component.tsx","../../src/components/layout/Stack/style.ts","../../src/components/layout/PageLayout/component.tsx","../../src/components/layout/PageLayout/style.ts","../../src/components/logic/BackButton/component.tsx","../../src/components/logic/BackButton/style.ts","../../src/components/logic/Loading/style.ts","../../src/components/logic/Loading/index.tsx","../../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/components/logic/Login/style.ts","../../src/components/logic/Login/index.tsx","../../src/config.ts","../../src/components/logic/OperationResult/style.ts","../../src/components/logic/OperationResult/index.tsx","../../src/components/logic/YourAccount/style.ts","../../src/components/logic/YourAccount/index.tsx","../../src/theme/GlobalStyle/GlobalAntOverride.ts","../../src/theme/GlobalStyle/GlobalColors.ts","../../src/theme/GlobalStyle/GlobalFonts.ts","../../src/theme/GlobalStyle/GlobalReset.ts","../../src/theme/GlobalStyle/GlobalSpacing.ts","../../src/theme/GlobalStyle/index.tsx","config.ts","App/forms/validationSchemas.ts","App/routes/AllowanceAdd/style.ts","App/routes/AllowanceAdd/index.tsx","App/paths.ts","App/routes/AllowanceEdit/FormChangeAmount/style.ts","App/routes/AllowanceEdit/FormChangeAmount/index.tsx","App/routes/AllowanceEdit/style.ts","App/routes/AllowanceEdit/index.tsx","App/routes/Allowances/style.ts","App/routes/Allowances/index.tsx","App/routes/Login/index.tsx","App/routes/OperationResult/index.tsx","App/forms/Search.tsx","App/routes/TokenDetail/FormSearchAllowing/index.tsx","App/routes/TokenDetail/style.ts","App/routes/TokenDetail/index.tsx","App/routes/Tokens/style.ts","App/routes/Tokens/TokenList/style.ts","App/routes/Tokens/TokenList/index.tsx","App/routes/Tokens/index.tsx","App/routes/TokensAdd/style.ts","App/routes/TokensAdd/index.tsx","App/routes/TokenSend/FormSendTokens/style.ts","App/routes/TokenSend/FormSendTokens/index.tsx","App/routes/TokenSend/style.ts","App/routes/TokenSend/index.tsx","App/index.tsx","index.tsx"],"names":["module","exports","defaultContext","setError","clearError","ErrorContext","React","useError","ErrorProvider","children","error","context","value","loadKeplrWallet","anyWindow","Error","e","loadLedgerWallet","TransportWebUSB","ledgerTransport","hdPaths","makeCosmoshubPath","prefix","addressPrefix","loadOrCreateWallet","mnemonic","key","loaded","localStorage","generated","Bip39","Random","loadOrCreateMnemonic","hdPath","Secp256k1HdWallet","initialized","address","init","clear","getClient","getStakingClient","CosmWasmContext","useSdk","SdkProvider","config","contextWithInit","signer","firstAddress","gasPrice","GasPrice","upload","exec","migrate","send","changeAdmin","createClient","client","apiUrl","stakingClient","setValue","faucetUrl","acct","fetch","method","headers","body","JSON","ticker","useState","refreshAccount","AccountContext","useAccount","AccountProvider","sdk","account","contracts","addContract","ContractsContext","useContracts","ContractsProvider","setContracts","contract","newContract","CW20","use","contractAddress","balance","result","allowance","owner","spender","allAllowances","all_allowances","start_after","limit","allAccounts","all_accounts","accounts","tokenInfo","token_info","investment","claims","minter","mint","recipient","amount","transfer","burn","increaseAllowance","increase_allowance","decreaseAllowance","decrease_allowance","transferFrom","transfer_from","bond","unbond","claim","ProtectedSwitch","authPath","location","to","pathname","state","redirectPathname","redirectState","undefined","printableCoin","coin","Decimal","getErrorFromStackTrace","stackTrace","stringStackTrace","match","Center","tag","Tag","props","StyledCenter","styled","Stack","StyledStack","PageLayout","StyledPageLayout","BackButton","icon","path","history","useHistory","goBack","src","alt","onClick","StyledBackButton","StyledSpin","spinIndicator","style","fontSize","spin","Loading","tip","loadingText","indicator","Symbol","_catch","recover","Text","Typography","MainStack","WelcomeStack","LightText","ErrorText","Title","disableLedgerLogin","anyNavigator","Login","loadWallet","setInitializing","console","pathAfterLogin","appName","appLogo","initializing","useEffect","level","type","initBrowser","disabled","initLedger","initKeplr","chainId","chainName","rpc","rest","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","coinDenom","coinMinimalDenom","coinDecimals","fractionalDigits","feeCurrencies","stakeCurrency","gasPriceStep","low","average","high","bip44","coinType","configKeplr","ResultText","OperationResult","defaultButtonAction","successIcon","failIcon","success","message","customButtonText","customButtonActionPath","customButtonActionState","buttonText","buttonAction","getResultContent","chosenButtonText","chosenButtonAction","AccountStack","YourAccount","hideTitle","hideBalance","printableBalance","copyToClipboard","GlobalAntOverride","createGlobalStyle","GlobalColors","GlobalFonts","GlobalReset","GlobalSpacing","GlobalStyle","rpcUrl","httpUrl","feeToken","stakingToken","faucetToken","coinMap","ushell","denom","ureef","codeId","regexStartsWithPrefix","RegExp","addressField","Yup","matches","length","requiredAddressField","required","amountField","positive","contractValidationSchema","shape","Number","isNaN","searchAddressValidationSchema","sendAddressValidationSchema","setAllowanceValidationSchema","newAmount","addAllowanceValidationSchema","FormStack","FormFieldsStack","Amount","div","AllowanceAdd","loading","setLoading","useParams","tokenName","setTokenName","tokenDecimals","setTokenDecimals","then","symbol","decimals","backArrowIcon","initialValues","onSubmit","values","spenderAddress","cw20Contract","decNewAmount","fromUserInput","decCurrentAmount","fromAtomics","allowanceOperation","Promise","reject","isGreaterThan","minus","atomics","push","validationSchema","formikProps","name","placeholder","submitForm","isValid","dirty","FormChangeAmount","submitChangeAmount","AllowanceEdit","allowanceAmount","setAllowanceAmount","amountToDisplay","toString","TitleAmountStack","AllowancesStack","AllowanceItem","AllowanceAmountCopy","Allowances","allowances","setAllowances","tokenAmount","setTokenAmount","setFractionalDigits","amountInteger","maybeAmountDecimal","split","amountDecimal","map","allowanceInfo","index","allowanceToDisplay","editIcon","goToAllowancesEdit","cosmWasmLogo","goToTokensList","TypedInput","validate","fast","onChange","$onChange","onBlur","$onBlur","restProps","ref","field","event","Search","FormSearchAllowing","initialAddress","setSearchedAddress","enterButton","onSearch","AllowanceStack","Allowance","TokenDetail","allowingAddress","allowingAddressParam","setAllowingAddress","setAllowance","tokenAddress","showCurrentAllowance","showSendButton","isSendButtonDisabled","showAllowancesLink","response","optionalAllowingAddress","TokenStack","TokenItem","BorderContainer","async","getTokenData","tokenCompare","a","b","TokenList","cw20Contracts","tokens","setTokens","getContracts","forEach","newCw20contract","tokenPromises","all","sort","token","goTokenDetail","Tokens","TokensAdd","setCodeId","selectedContractAddresses","setSelectedContractAddresses","handleChangeSelected","selectedAddresses","filterCaseInsensitive","input","option","title","toLowerCase","indexOf","showInputContract","showCodeIdForm","catch","String","newCw20Contract","showSearch","filterOption","dataSource","label","onSelectChange","listStyle","render","item","FormField","FormSendTokens","maxAmount","sendTokensAction","sendValidationSchema","max","toFloatApproximation","concat","TokenSend","fullPathTokenDetail","recipientAddress","transferAmount","txHash","App","basename","process","exact","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6a4a865.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edit.fdc29000.svg\";","module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n","import { CosmWasmFeeTable, SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport {\n  GasLimits,\n  GasPrice,\n  LcdClient,\n  makeCosmoshubPath,\n  OfflineSigner,\n  Secp256k1HdWallet,\n  setupStakingExtension,\n  StakingExtension,\n} from \"@cosmjs/launchpad\";\nimport { LedgerSigner } from \"@cosmjs/launchpad-ledger\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { AppConfig } from \"../config\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport type WalletLoader = (chainId: string, addressPrefix?: string) => Promise<OfflineSigner>;\n\nexport async function loadOrCreateWallet(_chainId: string, addressPrefix?: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\nexport async function loadLedgerWallet(_chainId: string, addressPrefix?: string): Promise<OfflineSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\nexport async function loadKeplrWallet(chainId: string): Promise<OfflineSigner> {\n  const anyWindow: any = window;\n  if (!anyWindow.getOfflineSigner) {\n    throw new Error(\"Keplr extension is not available\");\n  }\n  return anyWindow.getOfflineSigner(chainId);\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const gasPrice = GasPrice.fromString(`${config.gasPrice}${config.feeToken}`);\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\n    upload: 1500000,\n    init: 600000,\n    exec: 400000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000,\n  };\n\n  return new SigningCosmWasmClient(config.httpUrl, firstAddress, signer, gasPrice, gasLimits);\n}\n\nexport function createStakingClient(apiUrl: string): LcdClient & StakingExtension {\n  return LcdClient.withExtensions({ apiUrl }, setupStakingExtension);\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { LcdClient, OfflineSigner, StakingExtension } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { createClient, createStakingClient } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly address: string;\n  readonly init: (signer: OfflineSigner) => Promise<void>;\n  readonly clear: () => void;\n  readonly getClient: () => SigningCosmWasmClient;\n  readonly getStakingClient: () => LcdClient & StakingExtension;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  address: \"\",\n  init: async () => {},\n  clear: () => {},\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n  getStakingClient: (): LcdClient & StakingExtension => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface SdkProviderProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly config: AppConfig;\n}\n\nexport function SdkProvider({ config, children }: SdkProviderProps): JSX.Element {\n  const contextWithInit = { ...defaultContext, init };\n  const [value, setValue] = useState<CosmWasmContextType>(contextWithInit);\n\n  function clear() {\n    setValue({ ...contextWithInit });\n  }\n\n  async function init(signer: OfflineSigner) {\n    const client = await createClient(config, signer);\n    const address = client.senderAddress;\n\n    // load from faucet if needed\n    if (config.faucetUrl) {\n      const acct = await client.getAccount();\n      if (!acct?.balance?.length) {\n        await fetch(config.faucetUrl, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ ticker: config.faucetToken, address }),\n        });\n      }\n    }\n\n    const stakingClient = createStakingClient(config.httpUrl);\n\n    setValue({\n      initialized: true,\n      address,\n      init: async () => {},\n      clear,\n      getClient: () => client,\n      getStakingClient: () => stakingClient,\n    });\n  }\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n","import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n","import React, { useState } from \"react\";\nimport { CW20Instance } from \"./cw20\";\n\ninterface ContractsContextType {\n  contracts: CW20Instance[];\n  readonly addContract: (newContract: CW20Instance) => void;\n}\n\nconst defaultContext: ContractsContextType = {\n  contracts: [],\n  addContract: function () {\n    return;\n  },\n};\n\nconst ContractsContext = React.createContext<ContractsContextType>(defaultContext);\n\nexport const useContracts = (): ContractsContextType => React.useContext(ContractsContext);\n\nexport function ContractsProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [contracts, setContracts] = useState<CW20Instance[]>(defaultContext.contracts);\n\n  function addContract(newContract: CW20Instance) {\n    setContracts((contracts) => {\n      const notPresent = !contracts.find(\n        (contract) => contract.contractAddress === newContract.contractAddress,\n      );\n\n      if (notPresent) return [...contracts, newContract];\n      return contracts;\n    });\n  }\n\n  const value: ContractsContextType = { contracts, addContract };\n\n  return <ContractsContext.Provider value={value}>{children}</ContractsContext.Provider>;\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Coin } from \"@cosmjs/launchpad\";\n\nexport type Expiration =\n  | { readonly at_height: number }\n  | { readonly at_time: number }\n  | { readonly never: unknown };\n\nexport interface AllowanceResponse {\n  readonly allowance: string; // integer as string\n  readonly expires: Expiration;\n}\n\nexport interface AllowanceInfo {\n  readonly allowance: string; // integer as string\n  readonly spender: string; // bech32 address\n  readonly expires: Expiration;\n}\n\nexport interface AllAllowancesResponse {\n  readonly allowances: readonly AllowanceInfo[];\n}\n\nexport interface TokenInfo {\n  readonly name: string;\n  readonly symbol: string;\n  readonly decimals: number;\n  readonly total_supply: string;\n}\n\nexport interface Investment {\n  readonly exit_tax: string;\n  readonly min_withdrawal: string;\n  readonly nominal_value: string;\n  readonly owner: string;\n  readonly staked_tokens: Coin;\n  readonly token_supply: string;\n  readonly validator: string;\n}\n\nexport interface Claim {\n  readonly amount: string;\n  readonly released: { readonly at_time: number };\n}\n\nexport interface Claims {\n  readonly claims: readonly Claim[];\n}\n\nexport interface AllAccountsResponse {\n  // list of bech32 address that have a balance\n  readonly accounts: readonly string[];\n}\n\nexport interface CW20Instance {\n  readonly contractAddress: string;\n\n  // queries\n  balance: (address?: string) => Promise<string>;\n  allowance: (owner: string, spender: string) => Promise<AllowanceResponse>;\n  allAllowances: (owner: string, startAfter?: string, limit?: number) => Promise<AllAllowancesResponse>;\n  allAccounts: (startAfter?: string, limit?: number) => Promise<readonly string[]>;\n  tokenInfo: () => Promise<TokenInfo>;\n  investment: () => Promise<Investment>;\n  claims: (address: string) => Promise<Claims>;\n  minter: () => Promise<any>;\n\n  // actions\n  mint: (recipient: string, amount: string) => Promise<string>;\n  transfer: (recipient: string, amount: string) => Promise<string>;\n  burn: (amount: string) => Promise<string>;\n  increaseAllowance: (recipient: string, amount: string) => Promise<string>;\n  decreaseAllowance: (recipient: string, amount: string) => Promise<string>;\n  transferFrom: (owner: string, recipient: string, amount: string) => Promise<string>;\n  bond: (coin: Coin) => Promise<string>;\n  unbond: (amount: string) => Promise<string>;\n  claim: () => Promise<string>;\n}\n\nexport interface CW20Contract {\n  use: (contractAddress: string) => CW20Instance;\n}\n\nexport const CW20 = (client: SigningCosmWasmClient): CW20Contract => {\n  const use = (contractAddress: string): CW20Instance => {\n    const balance = async (account?: string): Promise<string> => {\n      const address = account || client.senderAddress;\n      const result = await client.queryContractSmart(contractAddress, { balance: { address } });\n      return result.balance;\n    };\n\n    const allowance = async (owner: string, spender: string): Promise<AllowanceResponse> => {\n      return client.queryContractSmart(contractAddress, { allowance: { owner, spender } });\n    };\n\n    const allAllowances = async (\n      owner: string,\n      startAfter?: string,\n      limit?: number,\n    ): Promise<AllAllowancesResponse> => {\n      return client.queryContractSmart(contractAddress, {\n        all_allowances: { owner, start_after: startAfter, limit },\n      });\n    };\n\n    const allAccounts = async (startAfter?: string, limit?: number): Promise<readonly string[]> => {\n      const accounts: AllAccountsResponse = await client.queryContractSmart(contractAddress, {\n        all_accounts: { start_after: startAfter, limit },\n      });\n      return accounts.accounts;\n    };\n\n    const tokenInfo = async (): Promise<TokenInfo> => {\n      return client.queryContractSmart(contractAddress, { token_info: {} });\n    };\n\n    const investment = async (): Promise<Investment> => {\n      return client.queryContractSmart(contractAddress, { investment: {} });\n    };\n\n    const claims = async (address: string): Promise<Claims> => {\n      return client.queryContractSmart(contractAddress, { claims: { address } });\n    };\n\n    const minter = async (): Promise<any> => {\n      return client.queryContractSmart(contractAddress, { minter: {} });\n    };\n\n    // mints tokens, returns transactionHash\n    const mint = async (recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { mint: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // transfers tokens, returns transactionHash\n    const transfer = async (recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { transfer: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // burns tokens, returns transactionHash\n    const burn = async (amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { burn: { amount } });\n      return result.transactionHash;\n    };\n\n    const increaseAllowance = async (spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { increase_allowance: { spender, amount } });\n      return result.transactionHash;\n    };\n\n    const decreaseAllowance = async (spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { decrease_allowance: { spender, amount } });\n      return result.transactionHash;\n    };\n\n    const transferFrom = async (owner: string, recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { transfer_from: { owner, recipient, amount } });\n      return result.transactionHash;\n    };\n\n    const bond = async (coin: Coin): Promise<string> => {\n      const result = await client.execute(contractAddress, { bond: {} }, undefined, [coin]);\n      return result.transactionHash;\n    };\n\n    const unbond = async (amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { unbond: { amount } });\n      return result.transactionHash;\n    };\n\n    const claim = async (): Promise<string> => {\n      const result = await client.execute(contractAddress, { claim: {} });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      balance,\n      allowance,\n      allAllowances,\n      allAccounts,\n      tokenInfo,\n      investment,\n      claims,\n      minter,\n      mint,\n      transfer,\n      burn,\n      increaseAllowance,\n      decreaseAllowance,\n      transferFrom,\n      bond,\n      unbond,\n      claim,\n    };\n  };\n  return { use };\n};\n","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useSdk } from \"./wallet\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\ninterface ProtectedSwitchProps extends SwitchProps {\n  readonly authPath: string;\n}\n\nexport function ProtectedSwitch({ authPath, children, location }: ProtectedSwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: authPath,\n        state: location ? { redirectPathname: location.pathname, redirectState: location.state } : undefined,\n      }}\n    />\n  );\n}\n","import { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport interface MappedCoin {\n  readonly denom: string;\n  readonly fractionalDigits: number;\n}\n\nexport interface CoinMap {\n  readonly [key: string]: MappedCoin;\n}\n\nexport function nativeCoinToDisplay(coin: Coin, coinMap: CoinMap): Coin {\n  if (!coinMap) return coin;\n\n  const coinToDisplay = coinMap[coin.denom];\n  if (!coinToDisplay) return coin;\n\n  const amountToDisplay = Decimal.fromAtomics(coin.amount, coinToDisplay.fractionalDigits).toString();\n\n  return { denom: coinToDisplay.denom, amount: amountToDisplay };\n}\n\n// display amount is eg \"12.0346\", return is in native tokens\n// with 6 fractional digits, this would be eg. \"12034600\"\nexport function displayAmountToNative(\n  amountToDisplay: string,\n  coinMap: CoinMap,\n  nativeDenom: string,\n): string {\n  const fractionalDigits = coinMap[nativeDenom]?.fractionalDigits;\n  if (fractionalDigits) {\n    // use https://github.com/CosmWasm/cosmjs/blob/v0.22.2/packages/math/src/decimal.ts\n    const decimalAmount = Decimal.fromUserInput(amountToDisplay, fractionalDigits);\n    return decimalAmount.atomics;\n  }\n\n  return amountToDisplay;\n}\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error || stringStackTrace;\n}\n","import * as React from \"react\";\n\nexport interface CenterProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Center({ tag: Tag = \"div\", children, ...props }: CenterProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Center } from \"./component\";\n\nexport const StyledCenter = styled(Center)`\n  box-sizing: content-box;\n\n  max-width: var(--max-width, none);\n\n  margin-left: auto;\n  margin-right: auto;\n\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from \"react\";\n\nexport interface StackProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Stack({ tag: Tag = \"div\", children, ...props }: StackProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"./component\";\n\nexport const StyledStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  & > * {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  & > * + * {\n    margin-top: var(--gap, var(--s0));\n  }\n`;\n","import { Center, CenterProps } from \"../Center\";\nimport * as React from \"react\";\n\nexport function PageLayout({ children, ...props }: CenterProps): JSX.Element {\n  return (\n    <Center tag=\"main\" {...props}>\n      {children}\n    </Center>\n  );\n}\n","import styled from \"styled-components\";\nimport { PageLayout } from \"./component\";\n\nexport const StyledPageLayout = styled(PageLayout)`\n  --max-width: 22rem;\n  --gap: var(--s8);\n\n  padding: var(--s4);\n\n  /* Reduces padding when width < 380px, but uses em for better media query support */\n  @media (max-width: 23.6875em) {\n    padding: var(--s-1) 0 var(--s-2) 0;\n  }\n\n  [alt=\"Back arrow\"] {\n    align-self: flex-start;\n  }\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport interface BackButtonProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly icon: string;\n  readonly path?: string;\n  readonly state?: any;\n}\n\nexport function BackButton({ icon, path, state, ...props }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path, state) : history.goBack;\n\n  return <img src={icon} alt=\"Back arrow\" onClick={goBack} {...props} />;\n}\n","import styled from \"styled-components\";\nimport { BackButton } from \"./component\";\n\nexport const StyledBackButton = styled(BackButton)`\n  cursor: pointer;\n`;\n","import { Spin } from \"antd\";\nimport styled from \"styled-components\";\n\nexport const StyledSpin = styled(Spin)`\n  & > span + div {\n    margin-top: var(--s2);\n  }\n`;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport * as React from \"react\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { StyledSpin } from \"./style\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nexport function Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <PageLayout>\n      <StyledSpin indicator={spinIndicator} tip={tip} />\n    </PageLayout>\n  );\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s9);\n  }\n`;\n\nexport const WelcomeStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const LightText = styled(Text)`\n  display: block;\n  font-weight: lighter;\n`;\n\nexport const ErrorText = styled(Text)`\n  color: var(--color-red);\n`;\n","import {\n  AppConfig,\n  configKeplr,\n  loadKeplrWallet,\n  loadLedgerWallet,\n  loadOrCreateWallet,\n  RedirectLocation,\n  useAccount,\n  useError,\n  useSdk,\n  WalletLoader,\n} from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { Loading } from \"../../logic/Loading\";\nimport { ErrorText, LightText, MainStack, WelcomeStack } from \"./style\";\n\nconst { Title } = Typography;\n\nfunction disableLedgerLogin() {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n\nfunction disableKeplrLogin() {\n  // TODO find check that works on reload\n  //const anyWindow: any = window;\n  //return !(anyWindow.getOfflineSigner && anyWindow.keplr.experimentalSuggestChain);\n  return false;\n}\n\ninterface LoginProps {\n  readonly pathAfterLogin: string;\n  readonly appName: string;\n  readonly appLogo: string;\n  readonly config: AppConfig;\n}\n\nexport function Login({ config, pathAfterLogin, appName, appLogo }: LoginProps): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const { error, setError, clearError } = useError();\n  const sdk = useSdk();\n  const { refreshAccount, account } = useAccount();\n\n  const [initializing, setInitializing] = useState(false);\n\n  async function init(loadWallet: WalletLoader) {\n    setInitializing(true);\n    clearError();\n\n    try {\n      const signer = await loadWallet(config.chainId, config.addressPrefix);\n      await sdk.init(signer);\n    } catch (error) {\n      console.error(error);\n      setError(Error(error).message);\n      setInitializing(false);\n    }\n  }\n\n  async function initBrowser() {\n    await init(loadOrCreateWallet);\n  }\n\n  async function initLedger() {\n    await init(loadLedgerWallet);\n  }\n\n  async function initKeplr() {\n    const anyWindow: any = window;\n    try {\n      await anyWindow.keplr.experimentalSuggestChain(configKeplr(config));\n      await anyWindow.keplr.enable(config.chainId);\n      await init(loadKeplrWallet);\n    } catch (error) {\n      console.error(error);\n      setError(Error(error).message);\n    }\n  }\n\n  useEffect(() => {\n    if (sdk.initialized) {\n      refreshAccount();\n    }\n  }, [sdk.initialized, refreshAccount]);\n\n  useEffect(() => {\n    if (account) {\n      if (state) {\n        history.push(state.redirectPathname, state.redirectState);\n      } else {\n        history.push(pathAfterLogin);\n      }\n    }\n  }, [account, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <PageLayout>\n      <MainStack>\n        <img src={appLogo} alt=\"CosmWasm logo\" />\n        <WelcomeStack>\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <LightText>Welcome to your {appName}</LightText>\n            <LightText>Select one of the following options to start:</LightText>\n          </Typography>\n          {error && <ErrorText>{error}</ErrorText>}\n          <Button type=\"primary\" onClick={initBrowser}>\n            Browser (Demo)\n          </Button>\n          <Button type=\"primary\" disabled={disableLedgerLogin()} onClick={initLedger}>\n            Ledger (Secure, Chrome)\n          </Button>\n          <Button type=\"primary\" disabled={disableKeplrLogin()} onClick={initKeplr}>\n            Keplr (Secure)\n          </Button>\n        </WelcomeStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { CoinMap } from \"./utils\";\n\nexport interface KeplrCoin {\n  readonly coinDenom: string;\n  readonly coinMinimalDenom: string;\n  readonly coinDecimals: number;\n}\n\nexport interface KeplrConfig {\n  readonly chainId: string;\n  readonly chainName: string;\n  readonly rpc: string;\n  readonly rest: string;\n  readonly bech32Config: {\n    readonly bech32PrefixAccAddr: string;\n    readonly bech32PrefixAccPub: string;\n    readonly bech32PrefixValAddr: string;\n    readonly bech32PrefixValPub: string;\n    readonly bech32PrefixConsAddr: string;\n    readonly bech32PrefixConsPub: string;\n  };\n  readonly currencies: readonly KeplrCoin[];\n  readonly feeCurrencies: readonly KeplrCoin[];\n  readonly stakeCurrency: KeplrCoin;\n  readonly gasPriceStep: {\n    readonly low: number;\n    readonly average: number;\n    readonly high: number;\n  };\n  readonly bip44: { readonly coinType: number };\n  readonly coinType: number;\n}\n\nexport interface AppConfig {\n  readonly chainId: string;\n  readonly chainName: string;\n  readonly addressPrefix: string;\n  readonly rpcUrl: string;\n  readonly httpUrl: string;\n  readonly faucetUrl: string;\n  readonly feeToken: string;\n  readonly stakingToken: string;\n  readonly faucetToken: string;\n  readonly coinMap: CoinMap;\n  readonly gasPrice: number;\n  readonly codeId?: number;\n}\n\nexport function configKeplr(config: AppConfig): KeplrConfig {\n  return {\n    chainId: config.chainId,\n    chainName: config.chainName,\n    rpc: config.rpcUrl,\n    rest: config.httpUrl,\n    bech32Config: {\n      bech32PrefixAccAddr: `${config.addressPrefix}`,\n      bech32PrefixAccPub: `${config.addressPrefix}pub`,\n      bech32PrefixValAddr: `${config.addressPrefix}valoper`,\n      bech32PrefixValPub: `${config.addressPrefix}valoperpub`,\n      bech32PrefixConsAddr: `${config.addressPrefix}valcons`,\n      bech32PrefixConsPub: `${config.addressPrefix}valconspub`,\n    },\n    currencies: [\n      {\n        coinDenom: config.coinMap[config.feeToken].denom,\n        coinMinimalDenom: config.feeToken,\n        coinDecimals: config.coinMap[config.feeToken].fractionalDigits,\n      },\n      {\n        coinDenom: config.coinMap[config.stakingToken].denom,\n        coinMinimalDenom: config.stakingToken,\n        coinDecimals: config.coinMap[config.stakingToken].fractionalDigits,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: config.coinMap[config.feeToken].denom,\n        coinMinimalDenom: config.feeToken,\n        coinDecimals: config.coinMap[config.feeToken].fractionalDigits,\n      },\n    ],\n    stakeCurrency: {\n      coinDenom: config.coinMap[config.stakingToken].denom,\n      coinMinimalDenom: config.stakingToken,\n      coinDecimals: config.coinMap[config.stakingToken].fractionalDigits,\n    },\n    gasPriceStep: {\n      low: config.gasPrice / 2,\n      average: config.gasPrice,\n      high: config.gasPrice * 2,\n    },\n    bip44: { coinType: 118 },\n    coinType: 118,\n  };\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const ResultText = styled(Text)`\n  font-size: var(--s-1);\n\n  &[data-result=\"success\"] {\n    color: var(--color-green);\n  }\n\n  &[data-result=\"failure\"] {\n    color: var(--color-red);\n  }\n`;\n","import { Button } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { MainStack, ResultText } from \"./style\";\n\ninterface ResultContent {\n  readonly result: \"success\" | \"failure\";\n  readonly icon: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n  readonly customButtonActionState?: any;\n}\n\nexport interface OperationResultProps {\n  readonly defaultButtonAction: (history: History) => void;\n  readonly successIcon: string;\n  readonly failIcon: string;\n}\n\nexport function OperationResult({\n  defaultButtonAction,\n  successIcon,\n  failIcon,\n}: OperationResultProps): JSX.Element {\n  const history = useHistory();\n\n  const {\n    success,\n    message,\n    error,\n    customButtonText,\n    customButtonActionPath,\n    customButtonActionState,\n  } = history.location.state as OperationResultState;\n\n  function getResultContent(success: boolean): ResultContent {\n    if (success) {\n      return {\n        result: \"success\",\n        icon: successIcon,\n        buttonText: \"Home\",\n        buttonAction: () => defaultButtonAction(history),\n      };\n    }\n\n    return {\n      result: \"failure\",\n      icon: failIcon,\n      buttonText: \"Retry\",\n      buttonAction: history.goBack,\n    };\n  }\n\n  const { icon, result, buttonText, buttonAction } = getResultContent(success);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath, customButtonActionState)\n    : buttonAction;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <img src={icon} alt=\"Result icon\" />\n        <ResultText data-result={result}>{message}</ResultText>\n        {error && <ResultText data-result={result}>{error}</ResultText>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s-2);\n  }\n\n  h3,\n  div[role=\"separator\"] {\n    margin: 0;\n  }\n\n  span,\n  button {\n    overflow-wrap: anywhere;\n  }\n\n  span {\n    display: block;\n    font-size: var(--s-1);\n  }\n\n  span + span {\n    font-weight: bold;\n  }\n\n  button,\n  button span {\n    font-size: var(--s0);\n  }\n\n  button {\n    height: 100%;\n    white-space: normal;\n  }\n`;\n","import { printableBalance, useAccount } from \"@cosmicdapp/logic\";\nimport { Button, Divider, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport { StackProps } from \"../../layout/Stack\";\nimport { AccountStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface YourAccountProps extends StackProps {\n  readonly hideTitle?: boolean;\n  readonly hideBalance?: boolean;\n}\n\nexport function YourAccount({ tag, hideTitle, hideBalance }: YourAccountProps): JSX.Element {\n  const accountProvider = useAccount();\n  const { address, balance } = accountProvider.account ?? { address: \"\", balance: [] };\n\n  return (\n    <AccountStack tag={tag}>\n      {!hideTitle && (\n        <header>\n          <Title level={3}>Your Account</Title>\n          {!hideBalance && <Divider />}\n        </header>\n      )}\n      <Text>{address}</Text>\n      {!hideBalance && <Text>({printableBalance(balance)})</Text>}\n      <Button type=\"primary\" onClick={() => copyToClipboard(address)}>\n        Copy Account Address\n      </Button>\n    </AccountStack>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalAntOverride = createGlobalStyle`\n  .ant-btn:not(.ant-input-search-button) {\n    width: var(--max-width);\n    max-width: 100vw;\n  }\n  \n  .ant-form div[role=\"alert\"] li {\n    color: var(--form-error);\n    font-size: var(--s-1);\n    text-align: left;\n    margin: var(--s-1);\n  \n    &::before {\n      content: \"* \";\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalColors = createGlobalStyle`\n  :root {\n    --color-black: #333;\n    --color-gray-light: #f2f2f2;\n    --color-red: #eb5757;\n    --color-green: #27ae60;\n    --color-blue: #2f80ed;\n    --color-blue-light: #1890ff;\n\n    --color-primary: var(--color-blue);\n    --button-color: var(--color-blue-light);\n    --text-color: var(--color-primary);\n    --heading-color: var(--color-primary);\n    --form-error: var(--color-red);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalFonts = createGlobalStyle`\n  :root {\n    --ff-montserrat: Montserrat, sans-serif;\n    --ff-iceland: Iceland, serif;\n\n    --ff-text: var(--ff-montserrat);\n    --ff-heading: var(--ff-iceland);\n    \n    font-family: var(--ff-text);\n  }\n\n  p,\n  span {\n    font-family: var(--ff-text);\n    font-size: var(--s0);\n    overflow-wrap: anywhere;\n  }\n  \n  h1,\n  h2,\n  h3 {\n    font-family: var(--ff-heading);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalReset = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    min-height: 100vh;\n    line-height: 1.5;\n    text-rendering: optimizeSpeed;\n  }\n  \n  body,\n  h1,\n  h2,\n  p,\n  ul[class],\n  ol[class] {\n    margin: 0;\n  }\n  \n  ul[class],\n  ol[class] {\n    padding: 0;\n    list-style: none;\n  }\n  \n  button,\n  input,\n  select,\n  textarea {\n    font: inherit;\n  }\n  \n  img {\n    display: block;\n    max-width: 100%;\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01s !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01s !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalSpacing = createGlobalStyle`\n  :root {\n    --ratio: 1.25;\n\n    --s-6: calc(var(--s-5) / var(--ratio));\n    --s-5: calc(var(--s-4) / var(--ratio));\n    --s-4: calc(var(--s-3) / var(--ratio));\n    --s-3: calc(var(--s-2) / var(--ratio));\n    --s-2: calc(var(--s-1) / var(--ratio));\n    --s-1: calc(var(--s0) / var(--ratio));\n    --s0: 1rem;\n    --s1: calc(var(--s0) * var(--ratio));\n    --s2: calc(var(--s1) * var(--ratio));\n    --s3: calc(var(--s2) * var(--ratio));\n    --s4: calc(var(--s3) * var(--ratio));\n    --s5: calc(var(--s4) * var(--ratio));\n    --s6: calc(var(--s5) * var(--ratio));\n    --s7: calc(var(--s6) * var(--ratio));\n    --s8: calc(var(--s7) * var(--ratio));\n    --s9: calc(var(--s8) * var(--ratio));\n  }\n`;\n","import React from \"react\";\nimport { GlobalAntOverride } from \"./GlobalAntOverride\";\nimport { GlobalColors } from \"./GlobalColors\";\nimport { GlobalFonts } from \"./GlobalFonts\";\nimport { GlobalReset } from \"./GlobalReset\";\nimport { GlobalSpacing } from \"./GlobalSpacing\";\n\nexport function GlobalStyle(): JSX.Element {\n  return (\n    <>\n      <GlobalReset />\n      <GlobalSpacing />\n      <GlobalColors />\n      <GlobalFonts />\n      <GlobalAntOverride />\n    </>\n  );\n}\n","import { AppConfig } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  chainId: \"testing\",\n  chainName: \"Testing\",\n  addressPrefix: \"cosmos\",\n  rpcUrl: \"http://localhost:26657\",\n  httpUrl: \"http://localhost:1317\",\n  faucetUrl: \"http://localhost:8000/credit\",\n  feeToken: \"ucosm\",\n  stakingToken: \"uatom\",\n  faucetToken: \"COSM\",\n  coinMap: {\n    ucosm: { denom: \"COSM\", fractionalDigits: 6 },\n    uatom: { denom: \"ATOM\", fractionalDigits: 6 },\n  },\n  gasPrice: 0.025,\n  codeId: 40,\n};\n\nconst coralnet: AppConfig = {\n  chainId: \"cosmwasm-coral\",\n  chainName: \"Coral\",\n  addressPrefix: \"coral\",\n  rpcUrl: \"https://rpc.coralnet.cosmwasm.com\",\n  httpUrl: \"https://lcd.coralnet.cosmwasm.com\",\n  faucetUrl: \"https://faucet.coralnet.cosmwasm.com/credit\",\n  feeToken: \"ushell\",\n  stakingToken: \"ureef\",\n  faucetToken: \"SHELL\",\n  coinMap: {\n    ushell: { denom: \"SHELL\", fractionalDigits: 6 },\n    ureef: { denom: \"REEF\", fractionalDigits: 6 },\n  },\n  gasPrice: 0.025,\n  codeId: 40,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : coralnet;\n","import * as Yup from \"yup\";\nimport { config } from \"../../config\";\n\nconst regexStartsWithPrefix = new RegExp(`^${config.addressPrefix}`);\n\nexport const addressField = Yup.string()\n  .matches(regexStartsWithPrefix, `\"${config.addressPrefix}\" prefix required`)\n  .length(39 + config.addressPrefix.length, \"Address invalid\");\nexport const requiredAddressField = addressField.required(\"An address is required\");\nexport const amountField = Yup.number()\n  .required(\"An amount is required\")\n  .positive(\"Amount should be positive\");\n\nexport const contractValidationSchema = Yup.object().shape({\n  contract: Yup.lazy((value) => {\n    if (!Number.isNaN(Number(value))) return Yup.number().positive();\n    return requiredAddressField;\n  }),\n});\nexport const searchAddressValidationSchema = Yup.object().shape({ address: addressField });\nexport const sendAddressValidationSchema = Yup.object().shape({ address: requiredAddressField });\nexport const setAllowanceValidationSchema = Yup.object().shape({ newAmount: amountField });\nexport const addAllowanceValidationSchema = Yup.object().shape({\n  address: requiredAddressField,\n  amount: amountField,\n});\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n`;\n\nexport const FormFieldsStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  display: flex;\n  align-items: baseline;\n\n  span {\n    margin-left: var(--s1);\n    font-family: var(--ff-iceland);\n    font-size: var(--s1);\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, getErrorFromStackTrace, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { addAllowanceValidationSchema } from \"../../forms/validationSchemas\";\nimport { pathAllowances, pathOperationResult, pathTokens } from \"../../paths\";\nimport { Amount, FormFieldsStack, FormStack, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface FormAddAllowanceFields {\n  readonly address: string;\n  readonly amount: string;\n}\n\ninterface AllowanceAddParams {\n  readonly contractAddress: string;\n}\n\nfunction AllowanceAdd(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const { contractAddress }: AllowanceAddParams = useParams();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then((tokenInfo) => {\n      setTokenName(tokenInfo.symbol);\n      setTokenDecimals(tokenInfo.decimals);\n    });\n  }, [getClient, contractAddress]);\n\n  const submitAddAllowance = (values: FormAddAllowanceFields) => {\n    setLoading(true);\n\n    const { address: spenderAddress, amount: newAmount } = values;\n\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.allowance(account.address, spenderAddress).then(({ allowance }) => {\n      const decNewAmount = Decimal.fromUserInput(newAmount, tokenDecimals);\n      const decCurrentAmount = Decimal.fromAtomics(allowance, tokenDecimals);\n\n      try {\n        let allowanceOperation: Promise<string> = Promise.reject(\"\");\n\n        if (decNewAmount.isGreaterThan(decCurrentAmount)) {\n          allowanceOperation = cw20Contract.increaseAllowance(\n            spenderAddress,\n            decNewAmount.minus(decCurrentAmount).atomics,\n          );\n        } else {\n          allowanceOperation = cw20Contract.decreaseAllowance(\n            spenderAddress,\n            decCurrentAmount.minus(decNewAmount).atomics,\n          );\n        }\n\n        allowanceOperation.then(() => {\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `${newAmount} ${tokenName} allowance for ${spenderAddress} successfully added `,\n              customButtonText: \"Tokens\",\n            } as OperationResultState,\n          });\n        });\n      } catch (stackTrace) {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Could not set allowance:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: `${pathAllowances}/${contractAddress}`,\n          } as OperationResultState,\n        });\n      }\n    });\n  };\n\n  return (\n    (loading && <Loading loadingText={`Adding allowance...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <Title>Add Allowance</Title>\n          <Formik\n            initialValues={{ address: \"\", amount: \"\" }}\n            onSubmit={submitAddAllowance}\n            validationSchema={addAllowanceValidationSchema}\n          >\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormFieldsStack>\n                    <FormItem name=\"address\">\n                      <Input name=\"address\" placeholder=\"Enter address\" />\n                    </FormItem>\n                    <Amount>\n                      <FormItem name=\"amount\">\n                        <Input name=\"amount\" placeholder=\"Enter amount\" />\n                      </FormItem>\n                      <Text>{tokenName}</Text>\n                    </Amount>\n                  </FormFieldsStack>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!(formikProps.isValid && formikProps.dirty)}\n                  >\n                    Confirm\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default AllowanceAdd;\n","export const pathLogin = \"/login\";\nexport const pathTokens = \"/tokens\";\nexport const pathTokensAdd = \"/tokens/add\";\nexport const pathTokenDetail = \"/token/detail\";\nexport const pathTokenSend = \"/token/send\";\nexport const pathAllowances = \"/allowances\";\nexport const pathAllowanceAdd = \"/add\";\nexport const pathAllowanceEdit = \"/edit\";\nexport const pathOperationResult = \"/result\";\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n`;\n","import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { setAllowanceValidationSchema } from \"../../../forms/validationSchemas\";\nimport { FormStack } from \"./style\";\n\nexport interface FormChangeAmountFields {\n  readonly newAmount: string;\n}\n\ninterface FormChangeAmountProps {\n  readonly submitChangeAmount: (values: unknown) => void;\n}\n\nexport function FormChangeAmount({ submitChangeAmount }: FormChangeAmountProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ newAmount: \"\" }}\n      onSubmit={submitChangeAmount}\n      validationSchema={setAllowanceValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormItem name=\"newAmount\">\n              <Input name=\"newAmount\" placeholder=\"Enter new amount\" />\n            </FormItem>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Confirm\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  & > span {\n    font-size: var(--s-1);\n  }\n`;\n\nexport const Amount = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n\n  & > * + * {\n    margin-left: var(--s-1);\n  }\n\n  span {\n    font-size: var(--s-1);\n  }\n\n  span + span {\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, getErrorFromStackTrace, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowances, pathOperationResult, pathTokens } from \"../../paths\";\nimport { FormChangeAmount, FormChangeAmountFields } from \"./FormChangeAmount\";\nimport { Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface AllowanceEditParams {\n  readonly contractAddress: string;\n  readonly spenderAddress: string;\n}\n\nfunction AllowanceEdit(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const { contractAddress, spenderAddress }: AllowanceEditParams = useParams();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n  const [allowanceAmount, setAllowanceAmount] = useState(\"0\");\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then((tokenInfo) => {\n      setTokenName(tokenInfo.symbol);\n      setTokenDecimals(tokenInfo.decimals);\n    });\n    cw20Contract\n      .allowance(account.address, spenderAddress)\n      .then(({ allowance }) => setAllowanceAmount(allowance));\n  }, [getClient, contractAddress, account.address, spenderAddress]);\n\n  const submitChangeAmount = (values: FormChangeAmountFields) => {\n    setLoading(true);\n\n    const { newAmount } = values;\n\n    const decNewAmount = Decimal.fromUserInput(newAmount, tokenDecimals);\n    const decCurrentAmount = Decimal.fromAtomics(allowanceAmount, tokenDecimals);\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    try {\n      let allowanceOperation: Promise<string> = Promise.reject(\"\");\n\n      if (decNewAmount.isGreaterThan(decCurrentAmount)) {\n        allowanceOperation = cw20Contract.increaseAllowance(\n          spenderAddress,\n          decNewAmount.minus(decCurrentAmount).atomics,\n        );\n      } else {\n        allowanceOperation = cw20Contract.decreaseAllowance(\n          spenderAddress,\n          decCurrentAmount.minus(decNewAmount).atomics,\n        );\n      }\n\n      allowanceOperation.then(() => {\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `${tokenName} allowance successfully set to ${newAmount} for ${spenderAddress}`,\n            customButtonText: \"Tokens\",\n          } as OperationResultState,\n        });\n      });\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Could not set allowance:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: `${pathAllowances}/${contractAddress}`,\n        } as OperationResultState,\n      });\n    }\n  };\n\n  const amountToDisplay = Decimal.fromAtomics(allowanceAmount, tokenDecimals).toString();\n\n  return (\n    (loading && <Loading loadingText={`Changing allowance...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <Title>Allowance</Title>\n          <Text>{spenderAddress}</Text>\n          <Amount>\n            <Text>Current</Text>\n            <Text>{amountToDisplay}</Text>\n            <Text>{tokenName}</Text>\n          </Amount>\n          <FormChangeAmount submitChangeAmount={submitChangeAmount} />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default AllowanceEdit;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const TitleAmountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n\nexport const AllowancesStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n\nexport const AllowanceItem = styled.div`\n  max-width: var(--max-width);\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & > * + * {\n    margin-left: var(--s1);\n  }\n\n  & > span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n\n    font-size: var(--s-1);\n  }\n`;\n\nexport const AllowanceAmountCopy = styled.div`\n  display: flex;\n  align-items: center;\n\n  span + img {\n    margin-left: var(--s-2);\n  }\n\n  span {\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n\n  img {\n    cursor: pointer;\n    height: var(--s-1);\n  }\n`;\n","import { BackButton, PageLayout } from \"@cosmicdapp/design\";\nimport { AllowanceInfo, CW20, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Divider, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowanceAdd, pathAllowanceEdit, pathAllowances, pathTokens } from \"../../paths\";\nimport editIcon from \"./assets/edit.svg\";\nimport {\n  AllowanceAmountCopy,\n  AllowanceItem,\n  AllowancesStack,\n  Amount,\n  MainStack,\n  TitleAmountStack,\n} from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface AllowancesParams {\n  readonly contractAddress: string;\n}\n\nfunction Allowances(): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const { contractAddress }: AllowancesParams = useParams();\n\n  const [allowances, setAllowances] = useState<readonly AllowanceInfo[]>([]);\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [fractionalDigits, setFractionalDigits] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setFractionalDigits(decimals);\n    });\n    cw20Contract.balance(account.address).then((balance) => setTokenAmount(balance));\n    cw20Contract.allAllowances(account.address).then(({ allowances }) => setAllowances(allowances));\n  }, [getClient, contractAddress, account.address]);\n\n  function goToAllowancesEdit(spender: string) {\n    history.push(`${pathAllowances}/${contractAddress}${pathAllowanceEdit}/${spender}`);\n  }\n\n  function goToAllowancesAdd() {\n    history.push(`${pathAllowances}/${contractAddress}${pathAllowanceAdd}`);\n  }\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, fractionalDigits).toString();\n  const [amountInteger, maybeAmountDecimal] = amountToDisplay.split(\".\");\n  const amountDecimal = maybeAmountDecimal ?? \"\";\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <BackButton icon={backArrowIcon} path={pathTokens} />\n        <TitleAmountStack>\n          <Title>Allowances</Title>\n          <Amount>\n            <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n            <Text>\n              {amountDecimal} {tokenName}\n            </Text>\n            <Text>{\" tokens\"}</Text>\n          </Amount>\n        </TitleAmountStack>\n        <AllowancesStack>\n          {allowances.map((allowanceInfo, index) => {\n            const allowanceToDisplay = Decimal.fromAtomics(\n              allowanceInfo.allowance,\n              fractionalDigits,\n            ).toString();\n\n            return (\n              <>\n                {index > 0 && <Divider />}\n                <AllowanceItem>\n                  <Text>{allowanceInfo.spender}</Text>\n                  <AllowanceAmountCopy>\n                    <Text>{allowanceToDisplay}</Text>\n                    <img\n                      alt=\"Edit allowance\"\n                      src={editIcon}\n                      onClick={() => goToAllowancesEdit(allowanceInfo.spender)}\n                    />\n                  </AllowanceAmountCopy>\n                </AllowanceItem>\n              </>\n            );\n          })}\n        </AllowancesStack>\n        <Button type=\"primary\" onClick={goToAllowancesAdd}>\n          Add New\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default Allowances;\n","import { Login as LoginDesign } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport { config } from \"../../../config\";\nimport { pathTokens } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\n\nfunction Login(): JSX.Element {\n  return (\n    <LoginDesign pathAfterLogin={pathTokens} appName=\"CW20 Wallet\" appLogo={cosmWasmLogo} config={config} />\n  );\n}\n\nexport default Login;\n","import { OperationResult as OperationResultDesign } from \"@cosmicdapp/design\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { pathTokens } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\n\nfunction goToTokensList(history: History) {\n  history.push(pathTokens);\n}\n\nfunction OperationResult(): JSX.Element {\n  return (\n    <OperationResultDesign\n      defaultButtonAction={goToTokensList}\n      successIcon={successIcon}\n      failIcon={failIcon}\n    />\n  );\n}\n\nexport default OperationResult;\n","// Search form not present in form-antd: https://github.com/jannikbuschke/formik-antd/blob/master/src/input/index.tsx\nimport { Input as BaseInput } from \"antd\";\nimport { InputProps as BaseInputProps, SearchProps as BaseSearchProps } from \"antd/lib/input\";\nimport { FieldProps } from \"formik\";\nimport { Field } from \"formik-antd\";\nimport * as React from \"react\";\nimport Search from \"antd/lib/input/Search\";\n\ninterface FormikFieldProps {\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validate?: (value: any) => undefined | string | Promise<any>;\n  fast?: boolean;\n}\n\ntype InputProps = FormikFieldProps & BaseInputProps;\n\ninterface InputType\n  extends React.ForwardRefExoticComponent<\n    FormikFieldProps & BaseInputProps & React.RefAttributes<BaseInput>\n  > {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  Search: React.ForwardRefExoticComponent<FormikFieldProps & BaseSearchProps & React.RefAttributes<Search>>;\n}\n\n// eslint-disable-next-line react/display-name\nconst Input = React.forwardRef((\n  { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: InputProps,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  ref: React.Ref<Search>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({ field: { value, onChange, onBlur } }: FieldProps) => (\n      <BaseInput\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(event) => {\n          onChange(event);\n          $onChange && $onChange(event);\n        }}\n        onBlur={(event) => {\n          onBlur(event);\n          $onBlur && $onBlur(event);\n        }}\n        {...restProps}\n      />\n    )}\n  </Field>\n));\n\nconst TypedInput = (Input as unknown) as InputType;\ntype SearchProps = FormikFieldProps & BaseSearchProps;\n\n// eslint-disable-next-line react/display-name\nTypedInput.Search = React.forwardRef(\n  (\n    { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: SearchProps,\n    ref: React.Ref<BaseInput>,\n  ) => (\n    <Field name={name} validate={validate} fast={fast}>\n      {({ field: { value, onChange, onBlur } }: FieldProps) => (\n        <BaseInput.Search\n          ref={ref}\n          name={name}\n          value={value}\n          onChange={(event) => {\n            onChange(event);\n            $onChange && $onChange(event);\n          }}\n          onBlur={(event) => {\n            onBlur(event);\n            $onBlur && $onBlur(event);\n          }}\n          {...restProps}\n        />\n      )}\n    </Field>\n  ),\n);\n\nexport default TypedInput.Search;\n","import { Formik } from \"formik\";\nimport { Form, FormItem } from \"formik-antd\";\nimport React from \"react\";\nimport Search from \"../../../forms/Search\";\nimport { searchAddressValidationSchema } from \"../../../forms/validationSchemas\";\n\ninterface FormSearchAllowingProps {\n  readonly initialAddress?: string;\n  readonly setSearchedAddress: (value: React.SetStateAction<string>) => void;\n}\n\nfunction FormSearchAllowing({ initialAddress, setSearchedAddress }: FormSearchAllowingProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ address: initialAddress }}\n      validationSchema={searchAddressValidationSchema}\n      onSubmit={(values) => {\n        setSearchedAddress(values.address);\n      }}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"address\">\n            <Search\n              name=\"address\"\n              placeholder=\"Search\"\n              enterButton\n              onSearch={(value) => {\n                formikProps.isValid && setSearchedAddress(value);\n              }}\n            />\n          </FormItem>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default FormSearchAllowing;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n\nexport const AllowanceStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n\nexport const Allowance = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n  }\n\n  span + span {\n    font-family: var(--ff-montserrat);\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n`;\n","import { BackButton, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { CW20, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Divider, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowances, pathTokens, pathTokenSend } from \"../../paths\";\nimport FormSearchAllowing from \"./FormSearchAllowing\";\nimport { AccountStack, Allowance, AllowanceStack, Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface TokenDetailParams {\n  readonly contractAddress: string;\n  readonly allowingAddress?: string;\n}\n\nfunction TokenDetail(): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const { contractAddress, allowingAddress: allowingAddressParam }: TokenDetailParams = useParams();\n\n  const [allowingAddress, setAllowingAddress] = useState(allowingAddressParam);\n  const [allowance, setAllowance] = useState<string>();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [fractionalDigits, setFractionalDigits] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n    const tokenAddress = allowingAddress ?? account.address;\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setFractionalDigits(decimals);\n    });\n    cw20Contract.balance(tokenAddress).then((balance) => setTokenAmount(balance));\n  }, [getClient, contractAddress, allowingAddress, account.address]);\n\n  function updateAllowance(allowingAddress: string) {\n    if (!allowingAddress) {\n      setAllowingAddress(undefined);\n      setAllowance(undefined);\n      return;\n    }\n\n    setAllowingAddress(allowingAddress);\n\n    const cw20contract = CW20(getClient()).use(contractAddress);\n    cw20contract\n      .allowance(allowingAddress, account.address)\n      .then((response) => setAllowance(response.allowance));\n  }\n\n  function goToSend() {\n    const optionalAllowingAddress = allowingAddress ? allowingAddress : \"\";\n    history.push(`${pathTokenSend}/${contractAddress}/${optionalAllowingAddress}`);\n  }\n\n  function goToAllowances() {\n    history.push(`${pathAllowances}/${contractAddress}`);\n  }\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, fractionalDigits).toString();\n  const [amountInteger, amountDecimal] = amountToDisplay.split(\".\");\n\n  const allowanceToDisplay = Decimal.fromAtomics(allowance, fractionalDigits).toString();\n\n  const showCurrentAllowance = !!allowance && allowance !== \"0\";\n  const showSendButton = !allowance || allowance !== \"0\";\n  const isSendButtonDisabled = tokenAmount === \"0\";\n  const showAllowancesLink = !allowingAddress;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <BackButton icon={backArrowIcon} path={pathTokens} />\n        <AccountStack>\n          <Title>{tokenName}</Title>\n          <YourAccount hideTitle hideBalance />\n        </AccountStack>\n        <Amount>\n          <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n          {amountDecimal && <Text>{amountDecimal}</Text>}\n          <Text>{\" tokens\"}</Text>\n        </Amount>\n        <FormSearchAllowing initialAddress={allowingAddress} setSearchedAddress={updateAllowance} />\n        {showCurrentAllowance && (\n          <AllowanceStack>\n            <Divider />\n            <Allowance>\n              <Text>Your allowance</Text>\n              <Text>{allowanceToDisplay}</Text>\n            </Allowance>\n          </AllowanceStack>\n        )}\n        {showSendButton && (\n          <Button type=\"primary\" onClick={goToSend} disabled={isSendButtonDisabled}>\n            Send\n          </Button>\n        )}\n        {showAllowancesLink && (\n          <Button type=\"primary\" onClick={goToAllowances}>\n            My allowances\n          </Button>\n        )}\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default TokenDetail;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nconst TokenStack = styled(Stack)`\n  & > * {\n    --gap: 0;\n  }\n`;\n\nconst TokenItem = styled.div`\n  --v-padding: var(--s-2);\n  --border-size: 1px;\n\n  padding-top: var(--v-padding);\n  padding-bottom: var(--v-padding);\n\n  padding-left: var(--s4);\n  margin-left: calc(-1 * var(--s4));\n  padding-right: var(--s4);\n  margin-right: calc(-1 * var(--s4));\n\n  margin-bottom: calc(-1 * var(--border-size));\n\n  cursor: pointer;\n\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: var(--color-primary);\n\n    & * {\n      color: white;\n    }\n  }\n\n  &:first-child > * {\n    --border-size: 0;\n  }\n\n  & > * {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n\n    span:first-child {\n      font-family: var(--ff-iceland);\n      font-size: var(--s2);\n    }\n\n    span:not(:first-child) {\n      font-weight: bolder;\n      font-size: var(--s-1);\n    }\n  }\n`;\n\nconst BorderContainer = styled.div`\n  border-top: var(--border-size) solid var(--color-primary);\n  padding-top: var(--v-padding);\n  margin-top: calc(-1 * var(--v-padding));\n`;\n\nexport { TokenStack, TokenItem, BorderContainer };\n","import { CW20, CW20Instance, useContracts, useSdk } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../../../../config\";\nimport { pathTokenDetail } from \"../../../paths\";\nimport { BorderContainer, TokenItem, TokenStack } from \"./style\";\n\nconst { Text } = Typography;\n\ninterface TokenData {\n  readonly coin: Coin;\n  readonly fractionalDigits: number;\n  readonly address: string;\n}\n\nasync function getTokenData(contract: CW20Instance): Promise<TokenData> {\n  const { symbol: denom, decimals: fractionalDigits } = await contract.tokenInfo();\n  const address = contract.contractAddress;\n  const amount = await contract.balance();\n\n  return { coin: { denom, amount }, fractionalDigits, address };\n}\n\nfunction tokenCompare(a: TokenData, b: TokenData) {\n  if (a.coin.denom < b.coin.denom) {\n    return -1;\n  }\n  if (a.coin.denom > b.coin.denom) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction TokenList(): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { contracts: cw20Contracts, addContract } = useContracts();\n\n  const [tokens, setTokens] = useState<readonly TokenData[]>([]);\n\n  useEffect(() => {\n    const client = getClient();\n\n    client.getContracts(config.codeId).then((contracts) => {\n      contracts.forEach((contract) => {\n        const newCw20contract = CW20(client).use(contract.address);\n        addContract(newCw20contract);\n      });\n    });\n  }, [getClient, addContract]);\n\n  useEffect(() => {\n    const tokenPromises = cw20Contracts.map(getTokenData);\n    Promise.all(tokenPromises).then((tokens) => setTokens(tokens.sort(tokenCompare)));\n  }, [cw20Contracts]);\n\n  function goTokenDetail(tokenAddress: string) {\n    history.push(`${pathTokenDetail}/${tokenAddress}`);\n  }\n\n  return (\n    <TokenStack>\n      {tokens.map((token) => {\n        const amountToDisplay = Decimal.fromAtomics(token.coin.amount, token.fractionalDigits).toString();\n\n        return (\n          <TokenItem key={token.address} onClick={() => goTokenDetail(token.address)}>\n            <BorderContainer>\n              <Text>{token.coin.denom}</Text>\n              <Text>{amountToDisplay !== \"0\" ? amountToDisplay : \"No tokens\"}</Text>\n            </BorderContainer>\n          </TokenItem>\n        );\n      })}\n    </TokenStack>\n  );\n}\n\nexport default TokenList;\n","import { PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { Button, Typography } from \"antd\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathTokensAdd } from \"../../paths\";\nimport { MainStack } from \"./style\";\nimport TokenList from \"./TokenList\";\n\nconst { Title } = Typography;\n\nfunction Tokens(): JSX.Element {\n  return (\n    <PageLayout>\n      <MainStack>\n        <Title>Tokens</Title>\n        <TokenList />\n        <Link to={pathTokensAdd}>\n          <Button type=\"primary\">Add another</Button>\n        </Link>\n        <YourAccount hideBalance />\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default Tokens;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nconst MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-transfer {\n    width: 100%;\n\n    & > *:first-child {\n      width: 100%;\n    }\n\n    & > *:not(:first-child) {\n      display: none;\n    }\n\n    .ant-transfer-list {\n      height: auto;\n      max-height: 300px;\n    }\n\n    .ant-transfer-list-content-item-text {\n      text-align: left;\n    }\n  }\n`;\n\nconst FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport { MainStack, FormStack };\n","import { BackButton, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, getErrorFromStackTrace, useContracts, useError, useSdk } from \"@cosmicdapp/logic\";\nimport { Contract } from \"@cosmjs/cosmwasm\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input, Transfer } from \"formik-antd\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { contractValidationSchema } from \"../../forms/validationSchemas\";\nimport { pathOperationResult, pathTokens, pathTokensAdd } from \"../../paths\";\nimport { FormStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nfunction TokensAdd(): JSX.Element {\n  const { getClient } = useSdk();\n  const { setError } = useError();\n  const { addContract } = useContracts();\n  const history = useHistory();\n\n  const [codeId, setCodeId] = useState<number>();\n\n  const [contracts, setContracts] = useState<readonly Contract[]>([]);\n  const [selectedContractAddresses, setSelectedContractAddresses] = useState<string[]>([]);\n\n  function submitInputContract({ contract }) {\n    const codeId = !Number.isNaN(Number(contract)) && Number(contract);\n\n    if (codeId) {\n      getClient()\n        .getContracts(codeId)\n        .then((contracts) => {\n          setContracts(contracts);\n          setCodeId(codeId);\n        })\n        .catch(setError);\n    } else {\n      const contractAddress = String(contract);\n      const newCw20Contract = CW20(getClient()).use(contractAddress);\n\n      newCw20Contract\n        .tokenInfo()\n        .then(() => addContract(newCw20Contract))\n        .then(() =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `\"${contractAddress}\" was successfully added :)`,\n              customButtonText: \"Tokens\",\n            } as OperationResultState,\n          }),\n        )\n        .catch((stackTrace) =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: false,\n              message: \"Oh no... Something went wrong, please try again\",\n              error: getErrorFromStackTrace(stackTrace),\n              customButtonActionPath: pathTokensAdd,\n            } as OperationResultState,\n          }),\n        );\n    }\n  }\n\n  function handleChangeSelected(selectedAddresses: string[]) {\n    setSelectedContractAddresses(selectedAddresses);\n  }\n\n  function submitSelectContracts() {\n    selectedContractAddresses.forEach((address) => {\n      const newCw20Contract = CW20(getClient()).use(address);\n\n      newCw20Contract\n        .tokenInfo()\n        .then(() => addContract(newCw20Contract))\n        .catch((stackTrace) =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: false,\n              message: \"Oh no... Something went wrong, please try again\",\n              error: getErrorFromStackTrace(stackTrace),\n              customButtonActionPath: pathTokensAdd,\n            } as OperationResultState,\n          }),\n        );\n    });\n\n    history.push({\n      pathname: pathOperationResult,\n      state: {\n        success: true,\n        message: `\"Your CodeID: ${codeId}\" were successfully added :)`,\n        customButtonText: \"Tokens\",\n      } as OperationResultState,\n    });\n  }\n\n  function filterCaseInsensitive(input, option) {\n    return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n  }\n\n  const showInputContract = !codeId;\n  const showCodeIdForm = !showInputContract;\n\n  return (\n    <PageLayout>\n      <BackButton icon={backArrowIcon} path={pathTokens} />\n      <MainStack>\n        <Title>Add Other</Title>\n        {showInputContract && (\n          <Formik\n            initialValues={{ contract: \"\" }}\n            onSubmit={submitInputContract}\n            validationSchema={contractValidationSchema}\n          >\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormItem name=\"contract\">\n                    <Input name=\"contract\" placeholder=\"Enter a contract address or codeID\" />\n                  </FormItem>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!(formikProps.isValid && formikProps.dirty)}\n                  >\n                    Continue\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        )}\n        {showCodeIdForm && (\n          <Formik initialValues={{}} onSubmit={submitSelectContracts}>\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormItem name=\"contracts\">\n                    <Transfer\n                      name=\"contracts\"\n                      showSearch\n                      filterOption={filterCaseInsensitive}\n                      dataSource={contracts.map((contract) => {\n                        return { key: contract.address, title: contract.label };\n                      })}\n                      onSelectChange={handleChangeSelected}\n                      listStyle={{ listStyle: \"none\" }}\n                      render={(item) => item.title}\n                    />\n                  </FormItem>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!selectedContractAddresses.length}\n                  >\n                    Continue\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        )}\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default TokensAdd;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: baseline;\n\n  & > * + * {\n    margin-left: var(--s0);\n  }\n\n  .ant-form-item {\n    flex-grow: 1;\n  }\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n  }\n`;\n","import { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { amountField, sendAddressValidationSchema } from \"../../../forms/validationSchemas\";\nimport { FormField, FormStack } from \"./style\";\n\nconst { Text } = Typography;\n\nexport interface FormSendTokensFields {\n  readonly amount: string;\n  readonly address: string;\n}\n\ninterface FormSendTokensProps {\n  readonly tokenName: string;\n  readonly maxAmount: Decimal;\n  readonly sendTokensAction: (values: unknown) => void;\n}\n\nexport function FormSendTokens({ tokenName, maxAmount, sendTokensAction }: FormSendTokensProps): JSX.Element {\n  const sendAmountValidationSchema = Yup.object().shape({\n    amount: amountField.max(\n      maxAmount.toFloatApproximation(),\n      `Amount cannot be greater than ${maxAmount.toString()}`,\n    ),\n  });\n\n  const sendValidationSchema = sendAmountValidationSchema.concat(sendAddressValidationSchema);\n\n  return (\n    <Formik\n      initialValues={{ amount: \"\", address: \"\" }}\n      onSubmit={sendTokensAction}\n      validationSchema={sendValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormField>\n              <Text>Send</Text>\n              <FormItem name=\"amount\">\n                <Input name=\"amount\" placeholder=\"Enter amount\" />\n              </FormItem>\n              <Text>{tokenName}</Text>\n            </FormField>\n            <FormField>\n              <Text>to</Text>\n              <FormItem name=\"address\">\n                <Input name=\"address\" placeholder=\"Enter address\" />\n              </FormItem>\n            </FormField>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Send\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { CW20, getErrorFromStackTrace, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathOperationResult, pathTokenDetail, pathTokens } from \"../../paths\";\nimport { FormSendTokens, FormSendTokensFields } from \"./FormSendTokens\";\nimport { AccountStack, Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface TokenSendParams {\n  readonly contractAddress: string;\n  readonly allowingAddress?: string;\n}\n\nfunction TokenSend(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account, refreshAccount } = useAccount();\n\n  const { contractAddress, allowingAddress }: TokenSendParams = useParams();\n  const fullPathTokenDetail = `${pathTokenDetail}/${contractAddress}/${allowingAddress ?? \"\"}`;\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n    const tokenAddress = allowingAddress ?? account.address;\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setTokenDecimals(decimals);\n    });\n\n    if (allowingAddress) {\n      cw20Contract\n        .allowance(allowingAddress, account.address)\n        .then((response) => setTokenAmount(response.allowance));\n    } else {\n      cw20Contract.balance(tokenAddress).then((balance) => setTokenAmount(balance));\n    }\n  }, [getClient, contractAddress, allowingAddress, account.address]);\n\n  const sendTokensAction = (values: FormSendTokensFields) => {\n    setLoading(true);\n\n    const { address: recipientAddress, amount } = values;\n    const transferAmount = Decimal.fromUserInput(amount, tokenDecimals).atomics;\n\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    try {\n      if (allowingAddress) {\n        cw20Contract.transferFrom(allowingAddress, recipientAddress, transferAmount).then((txHash) => {\n          if (!txHash) {\n            return Promise.reject(\"Transfer from failed\");\n          }\n\n          refreshAccount();\n\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `${amount} ${tokenName} successfully sent to ${recipientAddress} with allowance from ${allowingAddress}`,\n              customButtonText: \"Token detail\",\n              customButtonActionPath: fullPathTokenDetail,\n            } as OperationResultState,\n          });\n        });\n      } else {\n        cw20Contract.transfer(recipientAddress, transferAmount).then((txHash) => {\n          if (!txHash) {\n            return Promise.reject(\"Transfer failed\");\n          }\n\n          refreshAccount();\n\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `${amount} ${tokenName} successfully sent to ${recipientAddress}`,\n              customButtonText: \"Token detail\",\n              customButtonActionPath: fullPathTokenDetail,\n            } as OperationResultState,\n          });\n        });\n      }\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Send transaction failed:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: fullPathTokenDetail,\n        } as OperationResultState,\n      });\n    }\n  };\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, tokenDecimals).toString();\n  const [amountInteger, amountDecimal] = amountToDisplay.split(\".\");\n\n  const maxAmount = Decimal.fromAtomics(tokenAmount, tokenDecimals);\n\n  return (\n    (loading && <Loading loadingText={`Sending ${tokenName}...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <AccountStack>\n            <Title>{tokenName}</Title>\n            <YourAccount hideTitle hideBalance />\n          </AccountStack>\n          <Amount>\n            <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n            {amountDecimal && <Text>{amountDecimal}</Text>}\n            <Text>{\" tokens\"}</Text>\n          </Amount>\n          <FormSendTokens tokenName={tokenName} maxAmount={maxAmount} sendTokensAction={sendTokensAction} />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default TokenSend;\n","import { GlobalStyle } from \"@cosmicdapp/design\";\nimport {\n  AccountProvider,\n  ContractsProvider,\n  ErrorProvider,\n  ProtectedSwitch,\n  SdkProvider,\n} from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport {\n  pathAllowanceAdd,\n  pathAllowanceEdit,\n  pathAllowances,\n  pathLogin,\n  pathOperationResult,\n  pathTokenDetail,\n  pathTokens,\n  pathTokensAdd,\n  pathTokenSend,\n} from \"./paths\";\nimport AllowanceAdd from \"./routes/AllowanceAdd\";\nimport AllowanceEdit from \"./routes/AllowanceEdit\";\nimport Allowances from \"./routes/Allowances\";\nimport Login from \"./routes/Login\";\nimport OperationResult from \"./routes/OperationResult\";\nimport TokenDetail from \"./routes/TokenDetail\";\nimport Tokens from \"./routes/Tokens\";\nimport TokensAdd from \"./routes/TokensAdd\";\nimport TokenSend from \"./routes/TokenSend\";\n\nfunction App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <SdkProvider config={config}>\n        <AccountProvider>\n          <ContractsProvider>\n            <GlobalStyle />\n            <Router basename={process.env.PUBLIC_URL}>\n              <Switch>\n                <Route exact path=\"/\" component={Login} />\n                <Route exact path={pathLogin} component={Login} />\n                <ProtectedSwitch authPath={pathLogin}>\n                  <Route exact path={pathTokens} component={Tokens} />\n                  <Route exact path={`${pathTokensAdd}/:codeId?`} component={TokensAdd} />\n                  <Route\n                    exact\n                    path={`${pathTokenDetail}/:contractAddress/:allowingAddress?`}\n                    component={TokenDetail}\n                  />\n                  <Route\n                    exact\n                    path={`${pathTokenSend}/:contractAddress/:allowingAddress?`}\n                    component={TokenSend}\n                  />\n                  <Route exact path={`${pathAllowances}/:contractAddress`} component={Allowances} />\n                  <Route\n                    exact\n                    path={`${pathAllowances}/:contractAddress${pathAllowanceAdd}`}\n                    component={AllowanceAdd}\n                  />\n                  <Route\n                    exact\n                    path={`${pathAllowances}/:contractAddress${pathAllowanceEdit}/:spenderAddress`}\n                    component={AllowanceEdit}\n                  />\n                  <Route exact path={pathOperationResult} component={OperationResult} />\n                </ProtectedSwitch>\n              </Switch>\n            </Router>\n          </ContractsProvider>\n        </AccountProvider>\n      </SdkProvider>\n    </ErrorProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}