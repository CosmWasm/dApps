{"version":3,"sources":["App/routes/Allowances/assets/edit.svg","App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","App/assets/backArrow.svg","../../src/service/error.tsx","../../src/utils/currency.ts","../../src/service/sdk.ts","../../src/service/wallet.tsx","../../src/service/account.tsx","../../src/service/ProtectedSwitch.tsx","../../src/utils/errors.ts","../../src/components/layout/Center/component.tsx","../../src/components/layout/Center/style.ts","../../src/components/layout/Stack/component.tsx","../../src/components/layout/Stack/style.ts","../../src/components/layout/PageLayout/component.tsx","../../src/components/layout/PageLayout/style.ts","../../src/components/logic/BackButton/component.tsx","../../src/components/logic/BackButton/style.ts","../../src/components/logic/Loading/style.ts","../../src/components/logic/Loading/index.tsx","../../src/components/logic/Login/style.ts","../../src/components/logic/Login/index.tsx","../../src/components/logic/OperationResult/style.ts","../../src/components/logic/OperationResult/index.tsx","../../src/components/logic/YourAccount/style.ts","../../src/components/logic/YourAccount/index.tsx","../../src/theme/GlobalStyle/GlobalAntOverride.ts","../../src/theme/GlobalStyle/GlobalColors.ts","../../src/theme/GlobalStyle/GlobalFonts.ts","../../src/theme/GlobalStyle/GlobalReset.ts","../../src/theme/GlobalStyle/GlobalSpacing.ts","../../src/theme/GlobalStyle/index.tsx","config.ts","App/forms/validationSchemas.ts","App/service/cw20.tsx","App/routes/AllowanceAdd/style.ts","App/routes/AllowanceAdd/index.tsx","App/paths.ts","App/routes/AllowanceEdit/FormChangeAmount/style.ts","App/routes/AllowanceEdit/FormChangeAmount/index.tsx","App/routes/AllowanceEdit/style.ts","App/routes/AllowanceEdit/index.tsx","App/routes/Allowances/style.ts","App/routes/Allowances/index.tsx","App/routes/Login/index.tsx","App/routes/OperationResult/index.tsx","App/forms/Search.tsx","App/routes/TokenDetail/FormSearchAllowing/index.tsx","App/routes/TokenDetail/style.ts","App/routes/TokenDetail/index.tsx","App/routes/Tokens/style.ts","App/service/contracts.tsx","App/routes/Tokens/TokenList/style.ts","App/routes/Tokens/TokenList/index.tsx","App/routes/Tokens/index.tsx","App/routes/TokensAdd/style.ts","App/routes/TokensAdd/index.tsx","App/routes/TokenSend/FormSendTokens/style.ts","App/routes/TokenSend/FormSendTokens/index.tsx","App/routes/TokenSend/style.ts","App/routes/TokenSend/index.tsx","App/index.tsx","index.tsx"],"names":["module","exports","defaultContext","setError","clearError","ErrorContext","React","useError","ErrorProvider","children","error","context","value","printableCoin","coin","ticker","Decimal","createClient","signer","firstAddress","feeTable","buildFeeTable","feeToken","gasPrice","stdFee","gas","amount","Math","denom","upload","init","exec","migrate","send","changeAdmin","config","e","loadOrCreateWallet","mnemonic","key","loaded","localStorage","generated","Bip39","Random","loadOrCreateMnemonic","hdPath","makeCosmoshubPath","Secp256k1Wallet","initialized","address","getClient","Error","CosmWasmContext","useSdk","SdkProvider","loadWallet","contextWithInit","setValue","client","faucetUrl","acct","fetch","method","headers","body","JSON","useState","BurnerWalletProvider","refreshAccount","AccountContext","useAccount","AccountProvider","sdk","account","ProtectedSwitch","authPath","location","to","pathname","state","redirectPathname","redirectState","undefined","getErrorFromStackTrace","stackTrace","match","stringStackTrace","Center","tag","Tag","props","StyledCenter","styled","Stack","StyledStack","PageLayout","StyledPageLayout","BackButton","icon","path","history","useHistory","goBack","src","alt","onClick","StyledBackButton","StyledSpin","spinIndicator","style","fontSize","spin","Loading","tip","loadingText","indicator","Text","Typography","MainStack","WelcomeStack","LightText","Title","Login","pathAfterLogin","appName","appLogo","initializing","setInitializing","useEffect","level","type","disabled","ResultText","OperationResult","defaultButtonAction","successIcon","failIcon","success","message","customButtonText","customButtonActionPath","customButtonActionState","result","buttonText","buttonAction","getResultContent","chosenButtonText","chosenButtonAction","AccountStack","YourAccount","hideTitle","hideBalance","balance","printableBalance","copyToClipboard","GlobalAntOverride","createGlobalStyle","GlobalColors","GlobalFonts","GlobalReset","GlobalSpacing","GlobalStyle","httpUrl","faucetToken","addressPrefix","coinMap","ushell","fractionalDigits","ureef","codeId","regexStartsWithPrefix","RegExp","addressField","Yup","matches","length","requiredAddressField","required","amountField","positive","contractValidationSchema","shape","contract","Number","isNaN","searchAddressValidationSchema","sendAddressValidationSchema","setAllowanceValidationSchema","newAmount","addAllowanceValidationSchema","CW20","use","contractAddress","async","senderAddress","queryContractSmart","allowance","owner","spender","allAllowances","startAfter","limit","all_allowances","start_after","allAccounts","all_accounts","accounts","tokenInfo","token_info","minter","mint","recipient","execute","transactionHash","transfer","burn","increaseAllowance","increase_allowance","decreaseAllowance","decrease_allowance","transferFrom","transfer_from","FormStack","FormFieldsStack","Amount","div","AllowanceAdd","loading","setLoading","useParams","tokenName","setTokenName","tokenDecimals","setTokenDecimals","then","symbol","decimals","backArrowIcon","initialValues","onSubmit","values","spenderAddress","cw20Contract","decNewAmount","fromUserInput","decCurrentAmount","fromAtomics","allowanceOperation","Promise","reject","isGreaterThan","minus","atomics","push","console","validationSchema","formikProps","name","placeholder","submitForm","isValid","dirty","FormChangeAmount","submitChangeAmount","AllowanceEdit","allowanceAmount","setAllowanceAmount","amountToDisplay","toString","TitleAmountStack","AllowancesStack","AllowanceItem","AllowanceAmountCopy","Allowances","allowances","setAllowances","tokenAmount","setTokenAmount","setFractionalDigits","amountInteger","maybeAmountDecimal","split","amountDecimal","map","allowanceInfo","index","allowanceToDisplay","editIcon","goToAllowancesEdit","cosmWasmLogo","goToTokensList","TypedInput","validate","fast","onChange","$onChange","onBlur","$onBlur","restProps","ref","field","event","Search","FormSearchAllowing","initialAddress","setSearchedAddress","enterButton","onSearch","AllowanceStack","Allowance","TokenDetail","allowingAddress","allowingAddressParam","setAllowingAddress","setAllowance","tokenAddress","showCurrentAllowance","showSendButton","isSendButtonDisabled","showAllowancesLink","response","optionalAllowingAddress","contracts","addContract","ContractsContext","createContext","useContracts","useContext","ContractsProvider","setContracts","newContract","find","Provider","TokenStack","TokenItem","BorderContainer","getTokenData","tokenCompare","a","b","TokenList","cw20Contracts","tokens","setTokens","getContracts","forEach","newCw20contract","tokenPromises","all","sort","token","goTokenDetail","Tokens","TokensAdd","setCodeId","selectedContractAddresses","setSelectedContractAddresses","handleChangeSelected","selectedAddresses","filterCaseInsensitive","input","option","title","toLowerCase","indexOf","showInputContract","showCodeIdForm","catch","String","newCw20Contract","showSearch","filterOption","dataSource","label","onSelectChange","listStyle","render","item","FormField","FormSendTokens","maxAmount","sendTokensAction","sendValidationSchema","max","toFloatApproximation","concat","TokenSend","fullPathTokenDetail","recipientAddress","transferAmount","txHash","App","basename","process","exact","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3801cee9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/edit.fdc29000.svg\";","module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n","import { FeeTable } from \"@cosmjs/cosmwasm\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { AppConfig } from \"../config\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function buildFeeTable({ feeToken, gasPrice }: AppConfig): FeeTable {\n  const stdFee = (gas: number, denom: string, price: number) => {\n    const amount = Math.floor(gas * price);\n    return {\n      amount: [{ amount: amount.toString(), denom: denom }],\n      gas: gas.toString(),\n    };\n  };\n\n  return {\n    upload: stdFee(1500000, feeToken, gasPrice),\n    init: stdFee(600000, feeToken, gasPrice),\n    exec: stdFee(200000, feeToken, gasPrice),\n    migrate: stdFee(600000, feeToken, gasPrice),\n    send: stdFee(80000, feeToken, gasPrice),\n    changeAdmin: stdFee(80000, feeToken, gasPrice),\n  };\n}\n\nexport interface MappedCoin {\n  readonly denom: string;\n  readonly fractionalDigits: number;\n}\n\nexport interface CoinMap {\n  readonly [key: string]: MappedCoin;\n}\n\nexport function nativeCoinToDisplay(coin: Coin, coinMap: CoinMap): Coin {\n  if (!coinMap) return coin;\n\n  const coinToDisplay = coinMap[coin.denom];\n  if (!coinToDisplay) return coin;\n\n  const amountToDisplay = Decimal.fromAtomics(coin.amount, coinToDisplay.fractionalDigits).toString();\n\n  return { denom: coinToDisplay.denom, amount: amountToDisplay };\n}\n\n// display amount is eg \"12.0346\", return is in native tokens\n// with 6 fractional digits, this would be eg. \"12034600\"\nexport function displayAmountToNative(\n  amountToDisplay: string,\n  coinMap: CoinMap,\n  nativeDenom: string,\n): string {\n  const fractionalDigits = coinMap[nativeDenom]?.fractionalDigits;\n  if (fractionalDigits) {\n    // use https://github.com/CosmWasm/cosmjs/blob/v0.22.2/packages/math/src/decimal.ts\n    const decimalAmount = Decimal.fromUserInput(amountToDisplay, fractionalDigits);\n    return decimalAmount.atomics;\n  }\n\n  return amountToDisplay;\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { makeCosmoshubPath, OfflineSigner, Secp256k1Wallet } from \"@cosmjs/launchpad\";\nimport { AppConfig } from \"../config\";\nimport { buildFeeTable } from \"../utils/currency\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport async function loadOrCreateWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const feeTable = buildFeeTable(config);\n  return new SigningCosmWasmClient(config.httpUrl, firstAddress, signer, feeTable);\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { OfflineSigner } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { createClient, loadOrCreateWallet } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly address: string;\n  readonly init: () => void;\n  readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  address: \"\",\n  init: () => {\n    return;\n  },\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface ConfigWalletProps extends ConfigProp {\n  readonly loadWallet: (addressPrefix: string) => Promise<OfflineSigner>;\n}\n\ntype SdkProviderProps = ConfigWalletProps & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function SdkProvider({ config, loadWallet, children }: SdkProviderProps): JSX.Element {\n  const contextWithInit = { ...defaultContext, init: init };\n  const [value, setValue] = useState(contextWithInit);\n\n  function init() {\n    loadWallet(config.addressPrefix)\n      .then((signer) => createClient(config, signer))\n      .then(async (client) => {\n        const address = client.senderAddress;\n        // load from faucet if needed\n        if (config.faucetUrl) {\n          const acct = await client.getAccount();\n          if (!acct?.balance?.length) {\n            await fetch(config.faucetUrl, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ ticker: config.faucetToken, address }),\n            });\n          }\n        }\n\n        setValue({\n          initialized: true,\n          address: address,\n          init: () => {\n            return;\n          },\n          getClient: () => client,\n        });\n      });\n  }\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n\ninterface ConfigProp {\n  readonly config: AppConfig;\n}\n\ntype BurnerWalletProviderProps = ConfigProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function BurnerWalletProvider({ config, children }: BurnerWalletProviderProps): JSX.Element {\n  return (\n    <SdkProvider config={config} loadWallet={loadOrCreateWallet}>\n      {children}\n    </SdkProvider>\n  );\n}\n","import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useSdk } from \"./wallet\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\ninterface ProtectedSwitchProps extends SwitchProps {\n  readonly authPath: string;\n}\n\nexport function ProtectedSwitch({ authPath, children, location }: ProtectedSwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: authPath,\n        state: location ? { redirectPathname: location.pathname, redirectState: location.state } : undefined,\n      }}\n    />\n  );\n}\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error;\n}\n","import * as React from \"react\";\n\nexport interface CenterProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Center({ tag: Tag = \"div\", children, ...props }: CenterProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Center } from \"./component\";\n\nexport const StyledCenter = styled(Center)`\n  box-sizing: content-box;\n\n  max-width: var(--max-width, none);\n\n  margin-left: auto;\n  margin-right: auto;\n\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from \"react\";\n\nexport interface StackProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Stack({ tag: Tag = \"div\", children, ...props }: StackProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"./component\";\n\nexport const StyledStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  & > * {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  & > * + * {\n    margin-top: var(--gap, var(--s0));\n  }\n`;\n","import { Center, CenterProps } from \"../Center\";\nimport * as React from \"react\";\n\nexport function PageLayout({ children, ...props }: CenterProps): JSX.Element {\n  return (\n    <Center tag=\"main\" {...props}>\n      {children}\n    </Center>\n  );\n}\n","import styled from \"styled-components\";\nimport { PageLayout } from \"./component\";\n\nexport const StyledPageLayout = styled(PageLayout)`\n  --max-width: 22rem;\n  --gap: var(--s8);\n\n  padding: var(--s4);\n\n  /* Reduces padding when width < 380px, but uses em for better media query support */\n  @media (max-width: 23.6875em) {\n    padding: var(--s-1) 0 var(--s-2) 0;\n  }\n\n  [alt=\"Back arrow\"] {\n    align-self: flex-start;\n  }\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface BackButtonProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly icon: string;\n  readonly path?: string;\n  readonly state?: any;\n}\n\nexport function BackButton({ icon, path, state, ...props }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path, state) : history.goBack;\n\n  return <img src={icon} alt=\"Back arrow\" onClick={goBack} {...props} />;\n}\n","import styled from \"styled-components\";\nimport { BackButton } from \"./component\";\n\nexport const StyledBackButton = styled(BackButton)`\n  cursor: pointer;\n`;\n","import { Spin } from \"antd\";\nimport styled from \"styled-components\";\n\nexport const StyledSpin = styled(Spin)`\n  & > span + div {\n    margin-top: var(--s2);\n  }\n`;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport * as React from \"react\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { StyledSpin } from \"./style\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nexport function Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <PageLayout>\n      <StyledSpin indicator={spinIndicator} tip={tip} />\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s9);\n  }\n`;\n\nexport const WelcomeStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const LightText = styled(Text)`\n  display: block;\n  font-weight: lighter;\n`;\n","import { RedirectLocation, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { Loading } from \"../../logic/Loading\";\nimport { LightText, MainStack, WelcomeStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface LoginProps {\n  readonly pathAfterLogin: string;\n  readonly appName: string;\n  readonly appLogo: string;\n}\n\nexport function Login({ pathAfterLogin, appName, appLogo }: LoginProps): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const sdk = useSdk();\n  const { refreshAccount, account } = useAccount();\n\n  const [initializing, setInitializing] = useState(false);\n\n  function init() {\n    setInitializing(true);\n    sdk.init();\n  }\n\n  useEffect(() => {\n    if (sdk.initialized) {\n      refreshAccount();\n    }\n  }, [sdk.initialized, refreshAccount]);\n\n  useEffect(() => {\n    if (account) {\n      if (state) {\n        history.push(state.redirectPathname, state.redirectState);\n      } else {\n        history.push(pathAfterLogin);\n      }\n    }\n  }, [account, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <PageLayout>\n      <MainStack>\n        <img src={appLogo} alt=\"CosmWasm logo\" />\n        <WelcomeStack>\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <LightText>Welcome to your {appName}</LightText>\n            <LightText>Select one of the following options to start:</LightText>\n          </Typography>\n          <Button type=\"primary\" onClick={init}>\n            Browser (Demo)\n          </Button>\n          <Button disabled type=\"primary\">\n            Keplr (Secure)\n          </Button>\n        </WelcomeStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const ResultText = styled(Text)`\n  font-size: var(--s-1);\n\n  &[data-result=\"success\"] {\n    color: var(--color-green);\n  }\n\n  &[data-result=\"failure\"] {\n    color: var(--color-red);\n  }\n`;\n","import { Button } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { MainStack, ResultText } from \"./style\";\n\ninterface ResultContent {\n  readonly result: \"success\" | \"failure\";\n  readonly icon: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n  readonly customButtonActionState?: any;\n}\n\nexport interface OperationResultProps {\n  readonly defaultButtonAction: (history: History) => void;\n  readonly successIcon: string;\n  readonly failIcon: string;\n}\n\nexport function OperationResult({\n  defaultButtonAction,\n  successIcon,\n  failIcon,\n}: OperationResultProps): JSX.Element {\n  const history = useHistory();\n\n  const {\n    success,\n    message,\n    error,\n    customButtonText,\n    customButtonActionPath,\n    customButtonActionState,\n  } = history.location.state as OperationResultState;\n\n  function getResultContent(success: boolean): ResultContent {\n    if (success) {\n      return {\n        result: \"success\",\n        icon: successIcon,\n        buttonText: \"Home\",\n        buttonAction: () => defaultButtonAction(history),\n      };\n    }\n\n    return {\n      result: \"failure\",\n      icon: failIcon,\n      buttonText: \"Retry\",\n      buttonAction: history.goBack,\n    };\n  }\n\n  const { icon, result, buttonText, buttonAction } = getResultContent(success);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath, customButtonActionState)\n    : buttonAction;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <img src={icon} alt=\"Result icon\" />\n        <ResultText data-result={result}>{message}</ResultText>\n        {error && <ResultText data-result={result}>{error}</ResultText>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s-2);\n  }\n\n  h3,\n  div[role=\"separator\"] {\n    margin: 0;\n  }\n\n  span,\n  button {\n    overflow-wrap: anywhere;\n  }\n\n  span {\n    display: block;\n    font-size: var(--s-1);\n  }\n\n  span + span {\n    font-weight: bold;\n  }\n\n  button,\n  button span {\n    font-size: var(--s0);\n  }\n\n  button {\n    height: 100%;\n    white-space: normal;\n  }\n`;\n","import { printableBalance, useAccount } from \"@cosmicdapp/logic\";\nimport { Button, Divider, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport { StackProps } from \"../../layout/Stack\";\nimport { AccountStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface YourAccountProps extends StackProps {\n  readonly hideTitle?: boolean;\n  readonly hideBalance?: boolean;\n}\n\nexport function YourAccount({ tag, hideTitle, hideBalance }: YourAccountProps): JSX.Element {\n  const accountProvider = useAccount();\n  const { address, balance } = accountProvider.account ?? { address: \"\", balance: [] };\n\n  return (\n    <AccountStack tag={tag}>\n      {!hideTitle && (\n        <header>\n          <Title level={3}>Your Account</Title>\n          {!hideBalance && <Divider />}\n        </header>\n      )}\n      <Text>{address}</Text>\n      {!hideBalance && <Text>({printableBalance(balance)})</Text>}\n      <Button type=\"primary\" onClick={() => copyToClipboard(address)}>\n        Copy Account Address\n      </Button>\n    </AccountStack>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalAntOverride = createGlobalStyle`\n  .ant-btn:not(.ant-input-search-button) {\n    width: var(--max-width);\n    max-width: 100vw;\n  }\n  \n  .ant-form div[role=\"alert\"] li {\n    color: var(--form-error);\n    font-size: var(--s-1);\n    text-align: left;\n    margin: var(--s-1);\n  \n    &::before {\n      content: \"* \";\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalColors = createGlobalStyle`\n  :root {\n    --color-black: #333;\n    --color-red: #eb5757;\n    --color-green: #27ae60;\n    --color-blue: #2f80ed;\n    --color-blue-light: #1890ff;\n\n    --color-primary: var(--color-blue);\n    --button-color: var(--color-blue-light);\n    --text-color: var(--color-primary);\n    --heading-color: var(--color-primary);\n    --form-error: var(--color-red);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalFonts = createGlobalStyle`\n  :root {\n    --ff-montserrat: Montserrat, sans-serif;\n    --ff-iceland: Iceland, serif;\n\n    --ff-text: var(--ff-montserrat);\n    --ff-heading: var(--ff-iceland);\n    \n    font-family: var(--ff-text);\n  }\n\n  p,\n  span {\n    font-family: var(--ff-text);\n    font-size: var(--s0);\n    overflow-wrap: anywhere;\n  }\n  \n  h1,\n  h2,\n  h3 {\n    font-family: var(--ff-heading);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalReset = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    min-height: 100vh;\n    line-height: 1.5;\n    text-rendering: optimizeSpeed;\n  }\n  \n  body,\n  h1,\n  h2,\n  p,\n  ul[class],\n  ol[class] {\n    margin: 0;\n  }\n  \n  ul[class],\n  ol[class] {\n    padding: 0;\n    list-style: none;\n  }\n  \n  button,\n  input,\n  select,\n  textarea {\n    font: inherit;\n  }\n  \n  img {\n    display: block;\n    max-width: 100%;\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01s !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01s !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalSpacing = createGlobalStyle`\n  :root {\n    --ratio: 1.25;\n\n    --s-6: calc(var(--s-5) / var(--ratio));\n    --s-5: calc(var(--s-4) / var(--ratio));\n    --s-4: calc(var(--s-3) / var(--ratio));\n    --s-3: calc(var(--s-2) / var(--ratio));\n    --s-2: calc(var(--s-1) / var(--ratio));\n    --s-1: calc(var(--s0) / var(--ratio));\n    --s0: 1rem;\n    --s1: calc(var(--s0) * var(--ratio));\n    --s2: calc(var(--s1) * var(--ratio));\n    --s3: calc(var(--s2) * var(--ratio));\n    --s4: calc(var(--s3) * var(--ratio));\n    --s5: calc(var(--s4) * var(--ratio));\n    --s6: calc(var(--s5) * var(--ratio));\n    --s7: calc(var(--s6) * var(--ratio));\n    --s8: calc(var(--s7) * var(--ratio));\n    --s9: calc(var(--s8) * var(--ratio));\n  }\n`;\n","import React from \"react\";\nimport { GlobalAntOverride } from \"./GlobalAntOverride\";\nimport { GlobalColors } from \"./GlobalColors\";\nimport { GlobalFonts } from \"./GlobalFonts\";\nimport { GlobalReset } from \"./GlobalReset\";\nimport { GlobalSpacing } from \"./GlobalSpacing\";\n\nexport function GlobalStyle(): JSX.Element {\n  return (\n    <>\n      <GlobalReset />\n      <GlobalSpacing />\n      <GlobalColors />\n      <GlobalFonts />\n      <GlobalAntOverride />\n    </>\n  );\n}\n","import { AppConfig, CoinMap } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  httpUrl: \"http://localhost:1317\",\n  feeToken: \"ucosm\",\n  gasPrice: 0.025,\n  faucetUrl: \"http://localhost:8000/credit\",\n  faucetToken: \"COSM\",\n  addressPrefix: \"cosmos\",\n};\n\nconst coinMap: CoinMap = {\n  ushell: { denom: \"SHELL\", fractionalDigits: 6 },\n  ureef: { denom: \"REEF\", fractionalDigits: 6 },\n};\n\nconst coralnet: AppConfig = {\n  httpUrl: \"https://lcd.coralnet.cosmwasm.com\",\n  feeToken: \"ushell\",\n  gasPrice: 0.025,\n  faucetUrl: \"https://faucet.coralnet.cosmwasm.com/credit\",\n  faucetToken: \"SHELL\",\n  addressPrefix: \"coral\",\n  coinMap: coinMap,\n  codeId: 40,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : coralnet;\n","import * as Yup from \"yup\";\nimport { config } from \"../../config\";\n\nconst regexStartsWithPrefix = new RegExp(`^${config.addressPrefix}`);\n\nexport const addressField = Yup.string()\n  .matches(regexStartsWithPrefix, `\"${config.addressPrefix}\" prefix required`)\n  .length(39 + config.addressPrefix.length, \"Address invalid\");\nexport const requiredAddressField = addressField.required(\"An address is required\");\nexport const amountField = Yup.number()\n  .required(\"An amount is required\")\n  .positive(\"Amount should be positive\");\n\nexport const contractValidationSchema = Yup.object().shape({\n  contract: Yup.lazy((value) => {\n    if (!Number.isNaN(Number(value))) return Yup.number().positive();\n    return requiredAddressField;\n  }),\n});\nexport const searchAddressValidationSchema = Yup.object().shape({ address: addressField });\nexport const sendAddressValidationSchema = Yup.object().shape({ address: requiredAddressField });\nexport const setAllowanceValidationSchema = Yup.object().shape({ newAmount: amountField });\nexport const addAllowanceValidationSchema = Yup.object().shape({\n  address: requiredAddressField,\n  amount: amountField,\n});\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\n\ntype Expiration = { readonly at_height: number } | { readonly at_time: number } | { readonly never: unknown };\n\ninterface AllowanceResponse {\n  readonly allowance: string; // integer as string\n  readonly expires: Expiration;\n}\n\nexport interface AllowanceInfo {\n  readonly allowance: string; // integer as string\n  readonly spender: string; // bech32 address\n  readonly expires: Expiration;\n}\n\ninterface AllAllowancesResponse {\n  readonly allowances: readonly AllowanceInfo[];\n}\n\ninterface TokenInfo {\n  readonly name: string;\n  readonly symbol: string;\n  readonly decimals: number;\n  readonly total_supply: string;\n}\n\ninterface AllAccountsResponse {\n  // list of bech32 address that have a balance\n  readonly accounts: readonly string[];\n}\n\ninterface CW20Instance {\n  readonly contractAddress: string;\n\n  // queries\n  balance: (address?: string) => Promise<string>;\n  allowance: (owner: string, spender: string) => Promise<AllowanceResponse>;\n  allAllowances: (owner: string, startAfter?: string, limit?: number) => Promise<AllAllowancesResponse>;\n  allAccounts: (startAfter?: string, limit?: number) => Promise<readonly string[]>;\n  tokenInfo: () => Promise<TokenInfo>;\n  minter: () => Promise<any>;\n\n  // actions\n  mint: (recipient: string, amount: string) => Promise<string>;\n  transfer: (recipient: string, amount: string) => Promise<string>;\n  burn: (amount: string) => Promise<string>;\n  increaseAllowance: (recipient: string, amount: string) => Promise<string>;\n  decreaseAllowance: (recipient: string, amount: string) => Promise<string>;\n  transferFrom: (owner: string, recipient: string, amount: string) => Promise<string>;\n}\n\ninterface CW20Contract {\n  use: (contractAddress: string) => CW20Instance;\n}\n\nconst CW20 = (client: SigningCosmWasmClient): CW20Contract => {\n  const use = (contractAddress: string): CW20Instance => {\n    const balance = async (account?: string): Promise<string> => {\n      const address = account || client.senderAddress;\n      const result = await client.queryContractSmart(contractAddress, { balance: { address } });\n      return result.balance;\n    };\n\n    const allowance = async (owner: string, spender: string): Promise<AllowanceResponse> => {\n      return client.queryContractSmart(contractAddress, { allowance: { owner, spender } });\n    };\n\n    const allAllowances = async (\n      owner: string,\n      startAfter?: string,\n      limit?: number,\n    ): Promise<AllAllowancesResponse> => {\n      return client.queryContractSmart(contractAddress, {\n        all_allowances: { owner, start_after: startAfter, limit },\n      });\n    };\n\n    const allAccounts = async (startAfter?: string, limit?: number): Promise<readonly string[]> => {\n      const accounts: AllAccountsResponse = await client.queryContractSmart(contractAddress, {\n        all_accounts: { start_after: startAfter, limit },\n      });\n      return accounts.accounts;\n    };\n\n    const tokenInfo = async (): Promise<any> => {\n      return client.queryContractSmart(contractAddress, { token_info: {} });\n    };\n\n    const minter = async (): Promise<any> => {\n      return client.queryContractSmart(contractAddress, { minter: {} });\n    };\n\n    // mints tokens, returns transactionHash\n    const mint = async (recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { mint: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // transfers tokens, returns transactionHash\n    const transfer = async (recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { transfer: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // burns tokens, returns transactionHash\n    const burn = async (amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { burn: { amount } });\n      return result.transactionHash;\n    };\n\n    const increaseAllowance = async (spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { increase_allowance: { spender, amount } });\n      return result.transactionHash;\n    };\n\n    const decreaseAllowance = async (spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { decrease_allowance: { spender, amount } });\n      return result.transactionHash;\n    };\n\n    const transferFrom = async (owner: string, recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { transfer_from: { owner, recipient, amount } });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      balance,\n      allowance,\n      allAllowances,\n      allAccounts,\n      tokenInfo,\n      minter,\n      mint,\n      transfer,\n      burn,\n      increaseAllowance,\n      decreaseAllowance,\n      transferFrom,\n    };\n  };\n  return { use };\n};\n\nexport type { CW20Instance };\nexport { CW20 };\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n`;\n\nexport const FormFieldsStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  display: flex;\n  align-items: baseline;\n\n  span {\n    margin-left: var(--s1);\n    font-family: var(--ff-iceland);\n    font-size: var(--s1);\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { getErrorFromStackTrace, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { addAllowanceValidationSchema } from \"../../forms/validationSchemas\";\nimport { pathAllowances, pathOperationResult, pathTokens } from \"../../paths\";\nimport { CW20 } from \"../../service/cw20\";\nimport { Amount, FormFieldsStack, FormStack, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface FormAddAllowanceFields {\n  readonly address: string;\n  readonly amount: string;\n}\n\ninterface AllowanceAddParams {\n  readonly contractAddress: string;\n}\n\nfunction AllowanceAdd(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const { contractAddress }: AllowanceAddParams = useParams();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then((tokenInfo) => {\n      setTokenName(tokenInfo.symbol);\n      setTokenDecimals(tokenInfo.decimals);\n    });\n  }, [getClient, contractAddress]);\n\n  const submitAddAllowance = (values: FormAddAllowanceFields) => {\n    setLoading(true);\n\n    const { address: spenderAddress, amount: newAmount } = values;\n\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.allowance(account.address, spenderAddress).then(({ allowance }) => {\n      const decNewAmount = Decimal.fromUserInput(newAmount, tokenDecimals);\n      const decCurrentAmount = Decimal.fromAtomics(allowance, tokenDecimals);\n\n      try {\n        let allowanceOperation: Promise<string> = Promise.reject(\"\");\n\n        if (decNewAmount.isGreaterThan(decCurrentAmount)) {\n          allowanceOperation = cw20Contract.increaseAllowance(\n            spenderAddress,\n            decNewAmount.minus(decCurrentAmount).atomics,\n          );\n        } else {\n          allowanceOperation = cw20Contract.decreaseAllowance(\n            spenderAddress,\n            decCurrentAmount.minus(decNewAmount).atomics,\n          );\n        }\n\n        allowanceOperation.then(() => {\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `${newAmount} ${tokenName} allowance for ${spenderAddress} successfully added `,\n              customButtonText: \"Tokens\",\n            } as OperationResultState,\n          });\n        });\n      } catch (stackTrace) {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Could not set allowance:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: `${pathAllowances}/${contractAddress}`,\n          } as OperationResultState,\n        });\n      }\n    });\n  };\n\n  return (\n    (loading && <Loading loadingText={`Adding allowance...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <Title>Add Allowance</Title>\n          <Formik\n            initialValues={{ address: \"\", amount: \"\" }}\n            onSubmit={submitAddAllowance}\n            validationSchema={addAllowanceValidationSchema}\n          >\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormFieldsStack>\n                    <FormItem name=\"address\">\n                      <Input name=\"address\" placeholder=\"Enter address\" />\n                    </FormItem>\n                    <Amount>\n                      <FormItem name=\"amount\">\n                        <Input name=\"amount\" placeholder=\"Enter amount\" />\n                      </FormItem>\n                      <Text>{tokenName}</Text>\n                    </Amount>\n                  </FormFieldsStack>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!(formikProps.isValid && formikProps.dirty)}\n                  >\n                    Confirm\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default AllowanceAdd;\n","export const pathLogin = \"/login\";\nexport const pathTokens = \"/tokens\";\nexport const pathTokensAdd = \"/tokens/add\";\nexport const pathTokenDetail = \"/token/detail\";\nexport const pathTokenSend = \"/token/send\";\nexport const pathAllowances = \"/allowances\";\nexport const pathAllowanceAdd = \"/add\";\nexport const pathAllowanceEdit = \"/edit\";\nexport const pathOperationResult = \"/result\";\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n`;\n","import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { setAllowanceValidationSchema } from \"../../../forms/validationSchemas\";\nimport { FormStack } from \"./style\";\n\nexport interface FormChangeAmountFields {\n  readonly newAmount: string;\n}\n\ninterface FormChangeAmountProps {\n  readonly submitChangeAmount: (values: unknown) => void;\n}\n\nexport function FormChangeAmount({ submitChangeAmount }: FormChangeAmountProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ newAmount: \"\" }}\n      onSubmit={submitChangeAmount}\n      validationSchema={setAllowanceValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormItem name=\"newAmount\">\n              <Input name=\"newAmount\" placeholder=\"Enter new amount\" />\n            </FormItem>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Confirm\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  & > span {\n    font-size: var(--s-1);\n  }\n`;\n\nexport const Amount = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n\n  & > * + * {\n    margin-left: var(--s-1);\n  }\n\n  span {\n    font-size: var(--s-1);\n  }\n\n  span + span {\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { getErrorFromStackTrace, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowances, pathOperationResult, pathTokens } from \"../../paths\";\nimport { CW20 } from \"../../service/cw20\";\nimport { FormChangeAmount, FormChangeAmountFields } from \"./FormChangeAmount\";\nimport { Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface AllowanceEditParams {\n  readonly contractAddress: string;\n  readonly spenderAddress: string;\n}\n\nfunction AllowanceEdit(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const { contractAddress, spenderAddress }: AllowanceEditParams = useParams();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n  const [allowanceAmount, setAllowanceAmount] = useState(\"0\");\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then((tokenInfo) => {\n      setTokenName(tokenInfo.symbol);\n      setTokenDecimals(tokenInfo.decimals);\n    });\n    cw20Contract\n      .allowance(account.address, spenderAddress)\n      .then(({ allowance }) => setAllowanceAmount(allowance));\n  }, [getClient, contractAddress, account.address, spenderAddress]);\n\n  const submitChangeAmount = (values: FormChangeAmountFields) => {\n    setLoading(true);\n\n    const { newAmount } = values;\n\n    const decNewAmount = Decimal.fromUserInput(newAmount, tokenDecimals);\n    const decCurrentAmount = Decimal.fromAtomics(allowanceAmount, tokenDecimals);\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    try {\n      let allowanceOperation: Promise<string> = Promise.reject(\"\");\n\n      if (decNewAmount.isGreaterThan(decCurrentAmount)) {\n        allowanceOperation = cw20Contract.increaseAllowance(\n          spenderAddress,\n          decNewAmount.minus(decCurrentAmount).atomics,\n        );\n      } else {\n        allowanceOperation = cw20Contract.decreaseAllowance(\n          spenderAddress,\n          decCurrentAmount.minus(decNewAmount).atomics,\n        );\n      }\n\n      allowanceOperation.then(() => {\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `${tokenName} allowance successfully set to ${newAmount} for ${spenderAddress}`,\n            customButtonText: \"Tokens\",\n          } as OperationResultState,\n        });\n      });\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Could not set allowance:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: `${pathAllowances}/${contractAddress}`,\n        } as OperationResultState,\n      });\n    }\n  };\n\n  const amountToDisplay = Decimal.fromAtomics(allowanceAmount, tokenDecimals).toString();\n\n  return (\n    (loading && <Loading loadingText={`Changing allowance...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <Title>Allowance</Title>\n          <Text>{spenderAddress}</Text>\n          <Amount>\n            <Text>Current</Text>\n            <Text>{amountToDisplay}</Text>\n            <Text>{tokenName}</Text>\n          </Amount>\n          <FormChangeAmount submitChangeAmount={submitChangeAmount} />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default AllowanceEdit;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const TitleAmountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n\nexport const AllowancesStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n\nexport const AllowanceItem = styled.div`\n  max-width: var(--max-width);\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & > * + * {\n    margin-left: var(--s1);\n  }\n\n  & > span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n\n    font-size: var(--s-1);\n  }\n`;\n\nexport const AllowanceAmountCopy = styled.div`\n  display: flex;\n  align-items: center;\n\n  span + img {\n    margin-left: var(--s-2);\n  }\n\n  span {\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n\n  img {\n    cursor: pointer;\n    height: var(--s-1);\n  }\n`;\n","import { BackButton, PageLayout } from \"@cosmicdapp/design\";\nimport { useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Divider, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowanceAdd, pathAllowanceEdit, pathAllowances, pathTokens } from \"../../paths\";\nimport { AllowanceInfo, CW20 } from \"../../service/cw20\";\nimport editIcon from \"./assets/edit.svg\";\nimport {\n  AllowanceAmountCopy,\n  AllowanceItem,\n  AllowancesStack,\n  Amount,\n  MainStack,\n  TitleAmountStack,\n} from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface AllowancesParams {\n  readonly contractAddress: string;\n}\n\nfunction Allowances(): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const { contractAddress }: AllowancesParams = useParams();\n\n  const [allowances, setAllowances] = useState<readonly AllowanceInfo[]>([]);\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [fractionalDigits, setFractionalDigits] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setFractionalDigits(decimals);\n    });\n    cw20Contract.balance(account.address).then((balance) => setTokenAmount(balance));\n    cw20Contract.allAllowances(account.address).then(({ allowances }) => setAllowances(allowances));\n  }, [getClient, contractAddress, account.address]);\n\n  function goToAllowancesEdit(spender: string) {\n    history.push(`${pathAllowances}/${contractAddress}${pathAllowanceEdit}/${spender}`);\n  }\n\n  function goToAllowancesAdd() {\n    history.push(`${pathAllowances}/${contractAddress}${pathAllowanceAdd}`);\n  }\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, fractionalDigits).toString();\n  const [amountInteger, maybeAmountDecimal] = amountToDisplay.split(\".\");\n  const amountDecimal = maybeAmountDecimal ?? \"\";\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <BackButton icon={backArrowIcon} path={pathTokens} />\n        <TitleAmountStack>\n          <Title>Allowances</Title>\n          <Amount>\n            <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n            <Text>\n              {amountDecimal} {tokenName}\n            </Text>\n            <Text>{\" tokens\"}</Text>\n          </Amount>\n        </TitleAmountStack>\n        <AllowancesStack>\n          {allowances.map((allowanceInfo, index) => {\n            const allowanceToDisplay = Decimal.fromAtomics(\n              allowanceInfo.allowance,\n              fractionalDigits,\n            ).toString();\n\n            return (\n              <>\n                {index > 0 && <Divider />}\n                <AllowanceItem>\n                  <Text>{allowanceInfo.spender}</Text>\n                  <AllowanceAmountCopy>\n                    <Text>{allowanceToDisplay}</Text>\n                    <img\n                      alt=\"Edit allowance\"\n                      src={editIcon}\n                      onClick={() => goToAllowancesEdit(allowanceInfo.spender)}\n                    />\n                  </AllowanceAmountCopy>\n                </AllowanceItem>\n              </>\n            );\n          })}\n        </AllowancesStack>\n        <Button type=\"primary\" onClick={goToAllowancesAdd}>\n          Add New\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default Allowances;\n","import { Login as LoginDesign } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport { pathTokens } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\n\nfunction Login(): JSX.Element {\n  return <LoginDesign pathAfterLogin={pathTokens} appName=\"CW20 Wallet\" appLogo={cosmWasmLogo} />;\n}\n\nexport default Login;\n","import { OperationResult as OperationResultDesign } from \"@cosmicdapp/design\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { pathTokens } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\n\nfunction goToTokensList(history: History) {\n  history.push(pathTokens);\n}\n\nfunction OperationResult(): JSX.Element {\n  return (\n    <OperationResultDesign\n      defaultButtonAction={goToTokensList}\n      successIcon={successIcon}\n      failIcon={failIcon}\n    />\n  );\n}\n\nexport default OperationResult;\n","// Search form not present in form-antd: https://github.com/jannikbuschke/formik-antd/blob/master/src/input/index.tsx\nimport { Input as BaseInput } from \"antd\";\nimport { InputProps as BaseInputProps, SearchProps as BaseSearchProps } from \"antd/lib/input\";\nimport { FieldProps } from \"formik\";\nimport { Field } from \"formik-antd\";\nimport * as React from \"react\";\nimport Search from \"antd/lib/input/Search\";\n\ninterface FormikFieldProps {\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validate?: (value: any) => undefined | string | Promise<any>;\n  fast?: boolean;\n}\n\ntype InputProps = FormikFieldProps & BaseInputProps;\n\ninterface InputType\n  extends React.ForwardRefExoticComponent<\n    FormikFieldProps & BaseInputProps & React.RefAttributes<BaseInput>\n  > {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  Search: React.ForwardRefExoticComponent<FormikFieldProps & BaseSearchProps & React.RefAttributes<Search>>;\n}\n\n// eslint-disable-next-line react/display-name\nconst Input = React.forwardRef((\n  { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: InputProps,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  ref: React.Ref<Search>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({ field: { value, onChange, onBlur } }: FieldProps) => (\n      <BaseInput\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(event) => {\n          onChange(event);\n          $onChange && $onChange(event);\n        }}\n        onBlur={(event) => {\n          onBlur(event);\n          $onBlur && $onBlur(event);\n        }}\n        {...restProps}\n      />\n    )}\n  </Field>\n));\n\nconst TypedInput = (Input as unknown) as InputType;\ntype SearchProps = FormikFieldProps & BaseSearchProps;\n\n// eslint-disable-next-line react/display-name\nTypedInput.Search = React.forwardRef(\n  (\n    { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: SearchProps,\n    ref: React.Ref<BaseInput>,\n  ) => (\n    <Field name={name} validate={validate} fast={fast}>\n      {({ field: { value, onChange, onBlur } }: FieldProps) => (\n        <BaseInput.Search\n          ref={ref}\n          name={name}\n          value={value}\n          onChange={(event) => {\n            onChange(event);\n            $onChange && $onChange(event);\n          }}\n          onBlur={(event) => {\n            onBlur(event);\n            $onBlur && $onBlur(event);\n          }}\n          {...restProps}\n        />\n      )}\n    </Field>\n  ),\n);\n\nexport default TypedInput.Search;\n","import { Formik } from \"formik\";\nimport { Form, FormItem } from \"formik-antd\";\nimport React from \"react\";\nimport Search from \"../../../forms/Search\";\nimport { searchAddressValidationSchema } from \"../../../forms/validationSchemas\";\n\ninterface FormSearchAllowingProps {\n  readonly initialAddress?: string;\n  readonly setSearchedAddress: (value: React.SetStateAction<string>) => void;\n}\n\nfunction FormSearchAllowing({ initialAddress, setSearchedAddress }: FormSearchAllowingProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ address: initialAddress }}\n      validationSchema={searchAddressValidationSchema}\n      onSubmit={(values) => {\n        setSearchedAddress(values.address);\n      }}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"address\">\n            <Search\n              name=\"address\"\n              placeholder=\"Search\"\n              enterButton\n              onSearch={(value) => {\n                formikProps.isValid && setSearchedAddress(value);\n              }}\n            />\n          </FormItem>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default FormSearchAllowing;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n\nexport const AllowanceStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n\nexport const Allowance = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n  }\n\n  span + span {\n    font-family: var(--ff-montserrat);\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n`;\n","import { BackButton, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography, Divider } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowances, pathTokens, pathTokenSend } from \"../../paths\";\nimport { CW20 } from \"../../service/cw20\";\nimport FormSearchAllowing from \"./FormSearchAllowing\";\nimport { AccountStack, Amount, MainStack, Allowance, AllowanceStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface TokenDetailParams {\n  readonly contractAddress: string;\n  readonly allowingAddress?: string;\n}\n\nfunction TokenDetail(): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const { contractAddress, allowingAddress: allowingAddressParam }: TokenDetailParams = useParams();\n\n  const [allowingAddress, setAllowingAddress] = useState(allowingAddressParam);\n  const [allowance, setAllowance] = useState<string>();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [fractionalDigits, setFractionalDigits] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n    const tokenAddress = allowingAddress ?? account.address;\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setFractionalDigits(decimals);\n    });\n    cw20Contract.balance(tokenAddress).then((balance) => setTokenAmount(balance));\n  }, [getClient, contractAddress, allowingAddress, account.address]);\n\n  function updateAllowance(allowingAddress: string) {\n    if (!allowingAddress) {\n      setAllowingAddress(undefined);\n      setAllowance(undefined);\n      return;\n    }\n\n    setAllowingAddress(allowingAddress);\n\n    const cw20contract = CW20(getClient()).use(contractAddress);\n    cw20contract\n      .allowance(allowingAddress, account.address)\n      .then((response) => setAllowance(response.allowance));\n  }\n\n  function goToSend() {\n    const optionalAllowingAddress = allowingAddress ? allowingAddress : \"\";\n    history.push(`${pathTokenSend}/${contractAddress}/${optionalAllowingAddress}`);\n  }\n\n  function goToAllowances() {\n    history.push(`${pathAllowances}/${contractAddress}`);\n  }\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, fractionalDigits).toString();\n  const [amountInteger, amountDecimal] = amountToDisplay.split(\".\");\n\n  const allowanceToDisplay = Decimal.fromAtomics(allowance, fractionalDigits).toString();\n\n  const showCurrentAllowance = !!allowance && allowance !== \"0\";\n  const showSendButton = !allowance || allowance !== \"0\";\n  const isSendButtonDisabled = tokenAmount === \"0\";\n  const showAllowancesLink = !allowingAddress;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <BackButton icon={backArrowIcon} path={pathTokens} />\n        <AccountStack>\n          <Title>{tokenName}</Title>\n          <YourAccount hideTitle hideBalance />\n        </AccountStack>\n        <Amount>\n          <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n          {amountDecimal && <Text>{amountDecimal}</Text>}\n          <Text>{\" tokens\"}</Text>\n        </Amount>\n        <FormSearchAllowing initialAddress={allowingAddress} setSearchedAddress={updateAllowance} />\n        {showCurrentAllowance && (\n          <AllowanceStack>\n            <Divider />\n            <Allowance>\n              <Text>Your allowance</Text>\n              <Text>{allowanceToDisplay}</Text>\n            </Allowance>\n          </AllowanceStack>\n        )}\n        {showSendButton && (\n          <Button type=\"primary\" onClick={goToSend} disabled={isSendButtonDisabled}>\n            Send\n          </Button>\n        )}\n        {showAllowancesLink && (\n          <Button type=\"primary\" onClick={goToAllowances}>\n            My allowances\n          </Button>\n        )}\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default TokenDetail;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { CW20Instance } from \"./cw20\";\n\ninterface ContractsContextType {\n  contracts: CW20Instance[];\n  readonly addContract: (newContract: CW20Instance) => void;\n}\n\nconst defaultContext: ContractsContextType = {\n  contracts: [],\n  addContract: function () {\n    return;\n  },\n};\n\nconst ContractsContext = React.createContext<ContractsContextType>(defaultContext);\n\nconst useContracts = (): ContractsContextType => React.useContext(ContractsContext);\n\nfunction ContractsProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [contracts, setContracts] = useState<CW20Instance[]>(defaultContext.contracts);\n\n  function addContract(newContract: CW20Instance) {\n    setContracts((contracts) => {\n      const notPresent = !contracts.find(\n        (contract) => contract.contractAddress === newContract.contractAddress,\n      );\n\n      if (notPresent) return [...contracts, newContract];\n      return contracts;\n    });\n  }\n\n  const value: ContractsContextType = { contracts, addContract };\n\n  return <ContractsContext.Provider value={value}>{children}</ContractsContext.Provider>;\n}\n\nexport { ContractsProvider, useContracts };\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nconst TokenStack = styled(Stack)`\n  & > * {\n    --gap: 0;\n  }\n`;\n\nconst TokenItem = styled.div`\n  --v-padding: var(--s-2);\n  --border-size: 1px;\n\n  padding-top: var(--v-padding);\n  padding-bottom: var(--v-padding);\n\n  padding-left: var(--s4);\n  margin-left: calc(-1 * var(--s4));\n  padding-right: var(--s4);\n  margin-right: calc(-1 * var(--s4));\n\n  margin-bottom: calc(-1 * var(--border-size));\n\n  cursor: pointer;\n\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: var(--color-primary);\n\n    & * {\n      color: white;\n    }\n  }\n\n  &:first-child > * {\n    --border-size: 0;\n  }\n\n  & > * {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n\n    span:first-child {\n      font-family: var(--ff-iceland);\n      font-size: var(--s2);\n    }\n\n    span:not(:first-child) {\n      font-weight: bolder;\n      font-size: var(--s-1);\n    }\n  }\n`;\n\nconst BorderContainer = styled.div`\n  border-top: var(--border-size) solid var(--color-primary);\n  padding-top: var(--v-padding);\n  margin-top: calc(-1 * var(--v-padding));\n`;\n\nexport { TokenStack, TokenItem, BorderContainer };\n","import { useSdk } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../../../../config\";\nimport { pathTokenDetail } from \"../../../paths\";\nimport { useContracts } from \"../../../service/contracts\";\nimport { CW20, CW20Instance } from \"../../../service/cw20\";\nimport { BorderContainer, TokenItem, TokenStack } from \"./style\";\n\nconst { Text } = Typography;\n\ninterface TokenData {\n  readonly coin: Coin;\n  readonly fractionalDigits: number;\n  readonly address: string;\n}\n\nasync function getTokenData(contract: CW20Instance): Promise<TokenData> {\n  const { symbol: denom, decimals: fractionalDigits } = await contract.tokenInfo();\n  const address = contract.contractAddress;\n  const amount = await contract.balance();\n\n  return { coin: { denom, amount }, fractionalDigits, address };\n}\n\nfunction tokenCompare(a: TokenData, b: TokenData) {\n  if (a.coin.denom < b.coin.denom) {\n    return -1;\n  }\n  if (a.coin.denom > b.coin.denom) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction TokenList(): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { contracts: cw20Contracts, addContract } = useContracts();\n\n  const [tokens, setTokens] = useState<readonly TokenData[]>([]);\n\n  useEffect(() => {\n    const client = getClient();\n\n    client.getContracts(config.codeId).then((contracts) => {\n      contracts.forEach((contract) => {\n        const newCw20contract = CW20(client).use(contract.address);\n        addContract(newCw20contract);\n      });\n    });\n  }, [getClient, addContract]);\n\n  useEffect(() => {\n    const tokenPromises = cw20Contracts.map(getTokenData);\n    Promise.all(tokenPromises).then((tokens) => setTokens(tokens.sort(tokenCompare)));\n  }, [cw20Contracts]);\n\n  function goTokenDetail(tokenAddress: string) {\n    history.push(`${pathTokenDetail}/${tokenAddress}`);\n  }\n\n  return (\n    <TokenStack>\n      {tokens.map((token) => {\n        const amountToDisplay = Decimal.fromAtomics(token.coin.amount, token.fractionalDigits).toString();\n\n        return (\n          <TokenItem key={token.address} onClick={() => goTokenDetail(token.address)}>\n            <BorderContainer>\n              <Text>{token.coin.denom}</Text>\n              <Text>{amountToDisplay !== \"0\" ? amountToDisplay : \"No tokens\"}</Text>\n            </BorderContainer>\n          </TokenItem>\n        );\n      })}\n    </TokenStack>\n  );\n}\n\nexport default TokenList;\n","import { PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { Button, Typography } from \"antd\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathTokensAdd } from \"../../paths\";\nimport { MainStack } from \"./style\";\nimport TokenList from \"./TokenList\";\n\nconst { Title } = Typography;\n\nfunction Tokens(): JSX.Element {\n  return (\n    <PageLayout>\n      <MainStack>\n        <Title>Tokens</Title>\n        <TokenList />\n        <Link to={pathTokensAdd}>\n          <Button type=\"primary\">Add another</Button>\n        </Link>\n        <YourAccount hideBalance />\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default Tokens;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nconst MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-transfer {\n    width: 100%;\n\n    & > *:first-child {\n      width: 100%;\n    }\n\n    & > *:not(:first-child) {\n      display: none;\n    }\n\n    .ant-transfer-list {\n      height: auto;\n      max-height: 300px;\n    }\n\n    .ant-transfer-list-content-item-text {\n      text-align: left;\n    }\n  }\n`;\n\nconst FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport { MainStack, FormStack };\n","import { BackButton, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { getErrorFromStackTrace, useError, useSdk } from \"@cosmicdapp/logic\";\nimport { Contract } from \"@cosmjs/cosmwasm\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input, Transfer } from \"formik-antd\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { contractValidationSchema } from \"../../forms/validationSchemas\";\nimport { pathOperationResult, pathTokens, pathTokensAdd } from \"../../paths\";\nimport { useContracts } from \"../../service/contracts\";\nimport { CW20 } from \"../../service/cw20\";\nimport { FormStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nfunction TokensAdd(): JSX.Element {\n  const { getClient } = useSdk();\n  const { setError } = useError();\n  const { addContract } = useContracts();\n  const history = useHistory();\n\n  const [codeId, setCodeId] = useState<number>();\n\n  const [contracts, setContracts] = useState<readonly Contract[]>([]);\n  const [selectedContractAddresses, setSelectedContractAddresses] = useState<string[]>([]);\n\n  function submitInputContract({ contract }) {\n    const codeId = !Number.isNaN(Number(contract)) && Number(contract);\n\n    if (codeId) {\n      getClient()\n        .getContracts(codeId)\n        .then((contracts) => {\n          setContracts(contracts);\n          setCodeId(codeId);\n        })\n        .catch(setError);\n    } else {\n      const contractAddress = String(contract);\n      const newCw20Contract = CW20(getClient()).use(contractAddress);\n\n      newCw20Contract\n        .tokenInfo()\n        .then(() => addContract(newCw20Contract))\n        .then(() =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `\"${contractAddress}\" was successfully added :)`,\n              customButtonText: \"Tokens\",\n            } as OperationResultState,\n          }),\n        )\n        .catch((stackTrace) =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: false,\n              message: \"Oh no... Something went wrong, please try again\",\n              error: getErrorFromStackTrace(stackTrace),\n              customButtonActionPath: pathTokensAdd,\n            } as OperationResultState,\n          }),\n        );\n    }\n  }\n\n  function handleChangeSelected(selectedAddresses: string[]) {\n    setSelectedContractAddresses(selectedAddresses);\n  }\n\n  function submitSelectContracts() {\n    selectedContractAddresses.forEach((address) => {\n      const newCw20Contract = CW20(getClient()).use(address);\n\n      newCw20Contract\n        .tokenInfo()\n        .then(() => addContract(newCw20Contract))\n        .catch((stackTrace) =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: false,\n              message: \"Oh no... Something went wrong, please try again\",\n              error: getErrorFromStackTrace(stackTrace),\n              customButtonActionPath: pathTokensAdd,\n            } as OperationResultState,\n          }),\n        );\n    });\n\n    history.push({\n      pathname: pathOperationResult,\n      state: {\n        success: true,\n        message: `\"Your CodeID: ${codeId}\" were successfully added :)`,\n        customButtonText: \"Tokens\",\n      } as OperationResultState,\n    });\n  }\n\n  function filterCaseInsensitive(input, option) {\n    return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n  }\n\n  const showInputContract = !codeId;\n  const showCodeIdForm = !showInputContract;\n\n  return (\n    <PageLayout>\n      <BackButton icon={backArrowIcon} path={pathTokens} />\n      <MainStack>\n        <Title>Add Other</Title>\n        {showInputContract && (\n          <Formik\n            initialValues={{ contract: \"\" }}\n            onSubmit={submitInputContract}\n            validationSchema={contractValidationSchema}\n          >\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormItem name=\"contract\">\n                    <Input name=\"contract\" placeholder=\"Enter a contract address or codeID\" />\n                  </FormItem>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!(formikProps.isValid && formikProps.dirty)}\n                  >\n                    Continue\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        )}\n        {showCodeIdForm && (\n          <Formik initialValues={{}} onSubmit={submitSelectContracts}>\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormItem name=\"contracts\">\n                    <Transfer\n                      name=\"contracts\"\n                      showSearch\n                      filterOption={filterCaseInsensitive}\n                      dataSource={contracts.map((contract) => {\n                        return { key: contract.address, title: contract.label };\n                      })}\n                      onSelectChange={handleChangeSelected}\n                      listStyle={{ listStyle: \"none\" }}\n                      render={(item) => item.title}\n                    />\n                  </FormItem>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!selectedContractAddresses.length}\n                  >\n                    Continue\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        )}\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default TokensAdd;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: baseline;\n\n  & > * + * {\n    margin-left: var(--s0);\n  }\n\n  .ant-form-item {\n    flex-grow: 1;\n  }\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n  }\n`;\n","import { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { amountField, sendAddressValidationSchema } from \"../../../forms/validationSchemas\";\nimport { FormField, FormStack } from \"./style\";\n\nconst { Text } = Typography;\n\nexport interface FormSendTokensFields {\n  readonly amount: string;\n  readonly address: string;\n}\n\ninterface FormSendTokensProps {\n  readonly tokenName: string;\n  readonly maxAmount: Decimal;\n  readonly sendTokensAction: (values: unknown) => void;\n}\n\nexport function FormSendTokens({ tokenName, maxAmount, sendTokensAction }: FormSendTokensProps): JSX.Element {\n  const sendAmountValidationSchema = Yup.object().shape({\n    amount: amountField.max(\n      maxAmount.toFloatApproximation(),\n      `Amount cannot be greater than ${maxAmount.toString()}`,\n    ),\n  });\n\n  const sendValidationSchema = sendAmountValidationSchema.concat(sendAddressValidationSchema);\n\n  return (\n    <Formik\n      initialValues={{ amount: \"\", address: \"\" }}\n      onSubmit={sendTokensAction}\n      validationSchema={sendValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormField>\n              <Text>Send</Text>\n              <FormItem name=\"amount\">\n                <Input name=\"amount\" placeholder=\"Enter amount\" />\n              </FormItem>\n              <Text>{tokenName}</Text>\n            </FormField>\n            <FormField>\n              <Text>to</Text>\n              <FormItem name=\"address\">\n                <Input name=\"address\" placeholder=\"Enter address\" />\n              </FormItem>\n            </FormField>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Send\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { getErrorFromStackTrace, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathOperationResult, pathTokenDetail, pathTokens } from \"../../paths\";\nimport { CW20 } from \"../../service/cw20\";\nimport { FormSendTokens, FormSendTokensFields } from \"./FormSendTokens\";\nimport { AccountStack, Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface TokenSendParams {\n  readonly contractAddress: string;\n  readonly allowingAddress?: string;\n}\n\nfunction TokenSend(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { account, refreshAccount } = useAccount();\n\n  const { contractAddress, allowingAddress }: TokenSendParams = useParams();\n  const fullPathTokenDetail = `${pathTokenDetail}/${contractAddress}/${allowingAddress ?? \"\"}`;\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n    const tokenAddress = allowingAddress ?? account.address;\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setTokenDecimals(decimals);\n    });\n\n    if (allowingAddress) {\n      cw20Contract\n        .allowance(allowingAddress, account.address)\n        .then((response) => setTokenAmount(response.allowance));\n    } else {\n      cw20Contract.balance(tokenAddress).then((balance) => setTokenAmount(balance));\n    }\n  }, [getClient, contractAddress, allowingAddress, account.address]);\n\n  const sendTokensAction = (values: FormSendTokensFields) => {\n    setLoading(true);\n\n    const { address: recipientAddress, amount } = values;\n    const transferAmount = Decimal.fromUserInput(amount, tokenDecimals).atomics;\n\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    try {\n      if (allowingAddress) {\n        cw20Contract.transferFrom(allowingAddress, recipientAddress, transferAmount).then((txHash) => {\n          if (!txHash) {\n            return Promise.reject(\"Transfer from failed\");\n          }\n\n          refreshAccount();\n\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `${amount} ${tokenName} successfully sent to ${recipientAddress} with allowance from ${allowingAddress}`,\n              customButtonText: \"Token detail\",\n              customButtonActionPath: fullPathTokenDetail,\n            } as OperationResultState,\n          });\n        });\n      } else {\n        cw20Contract.transfer(recipientAddress, transferAmount).then((txHash) => {\n          if (!txHash) {\n            return Promise.reject(\"Transfer failed\");\n          }\n\n          refreshAccount();\n\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `${amount} ${tokenName} successfully sent to ${recipientAddress}`,\n              customButtonText: \"Token detail\",\n              customButtonActionPath: fullPathTokenDetail,\n            } as OperationResultState,\n          });\n        });\n      }\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Send transaction failed:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: fullPathTokenDetail,\n        } as OperationResultState,\n      });\n    }\n  };\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, tokenDecimals).toString();\n  const [amountInteger, amountDecimal] = amountToDisplay.split(\".\");\n\n  const maxAmount = Decimal.fromAtomics(tokenAmount, tokenDecimals);\n\n  return (\n    (loading && <Loading loadingText={`Sending ${tokenName}...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <AccountStack>\n            <Title>{tokenName}</Title>\n            <YourAccount hideTitle hideBalance />\n          </AccountStack>\n          <Amount>\n            <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n            {amountDecimal && <Text>{amountDecimal}</Text>}\n            <Text>{\" tokens\"}</Text>\n          </Amount>\n          <FormSendTokens tokenName={tokenName} maxAmount={maxAmount} sendTokensAction={sendTokensAction} />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default TokenSend;\n","import { GlobalStyle } from \"@cosmicdapp/design\";\nimport { AccountProvider, BurnerWalletProvider, ErrorProvider, ProtectedSwitch } from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport {\n  pathAllowanceAdd,\n  pathAllowanceEdit,\n  pathAllowances,\n  pathLogin,\n  pathOperationResult,\n  pathTokenDetail,\n  pathTokens,\n  pathTokensAdd,\n  pathTokenSend,\n} from \"./paths\";\nimport AllowanceAdd from \"./routes/AllowanceAdd\";\nimport AllowanceEdit from \"./routes/AllowanceEdit\";\nimport Allowances from \"./routes/Allowances\";\nimport Login from \"./routes/Login\";\nimport OperationResult from \"./routes/OperationResult\";\nimport TokenDetail from \"./routes/TokenDetail\";\nimport Tokens from \"./routes/Tokens\";\nimport TokensAdd from \"./routes/TokensAdd\";\nimport TokenSend from \"./routes/TokenSend\";\nimport { ContractsProvider } from \"./service/contracts\";\n\nfunction App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <BurnerWalletProvider config={config}>\n        <AccountProvider>\n          <ContractsProvider>\n            <GlobalStyle />\n            <Router basename={process.env.PUBLIC_URL}>\n              <Switch>\n                <Route exact path=\"/\" component={Login} />\n                <Route exact path={pathLogin} component={Login} />\n                <ProtectedSwitch authPath={pathLogin}>\n                  <Route exact path={pathTokens} component={Tokens} />\n                  <Route exact path={`${pathTokensAdd}/:codeId?`} component={TokensAdd} />\n                  <Route\n                    exact\n                    path={`${pathTokenDetail}/:contractAddress/:allowingAddress?`}\n                    component={TokenDetail}\n                  />\n                  <Route\n                    exact\n                    path={`${pathTokenSend}/:contractAddress/:allowingAddress?`}\n                    component={TokenSend}\n                  />\n                  <Route exact path={`${pathAllowances}/:contractAddress`} component={Allowances} />\n                  <Route\n                    exact\n                    path={`${pathAllowances}/:contractAddress${pathAllowanceAdd}`}\n                    component={AllowanceAdd}\n                  />\n                  <Route\n                    exact\n                    path={`${pathAllowances}/:contractAddress${pathAllowanceEdit}/:spenderAddress`}\n                    component={AllowanceEdit}\n                  />\n                  <Route exact path={pathOperationResult} component={OperationResult} />\n                </ProtectedSwitch>\n              </Switch>\n            </Router>\n          </ContractsProvider>\n        </AccountProvider>\n      </BurnerWalletProvider>\n    </ErrorProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}