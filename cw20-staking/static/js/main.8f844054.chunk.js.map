{"version":3,"sources":["App/assets/backArrow.svg","App/components/AccountMenu/assets/avatar.svg","App/components/AccountMenu/assets/copy.svg","App/components/AccountMenu/assets/cross.svg","App/components/AccountMenu/assets/hamburger.svg","App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","App/routes/Withdraw/assets/confirmIcon.svg","../../src/service/contracts.tsx","../../src/service/cw20.tsx","../../src/service/error.tsx","../../src/service/sdk.ts","../../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/service/wallet.tsx","../../src/service/ProtectedSwitch.tsx","../../src/utils/currency.ts","../../src/utils/errors.ts","../../src/components/layout/Center/component.tsx","../../src/components/layout/Center/style.ts","../../src/components/layout/Stack/component.tsx","../../src/components/layout/Stack/style.ts","../../src/components/layout/PageLayout/component.tsx","../../src/components/layout/PageLayout/style.ts","../../src/components/logic/BackButton/component.tsx","../../src/components/logic/BackButton/style.ts","../../src/components/logic/Loading/style.ts","../../src/components/logic/Loading/index.tsx","../../src/components/logic/Login/style.ts","../../src/components/logic/Login/index.tsx","../../src/config.ts","../../src/components/logic/OperationResult/style.ts","../../src/components/logic/OperationResult/index.tsx","../../src/components/logic/YourAccount/index.tsx","../../src/theme/GlobalStyle/GlobalAntOverride.ts","../../src/theme/GlobalStyle/GlobalColors.ts","../../src/theme/GlobalStyle/GlobalFonts.ts","../../src/theme/GlobalStyle/GlobalReset.ts","../../src/theme/GlobalStyle/GlobalSpacing.ts","../../src/theme/GlobalStyle/index.tsx","config.ts","App/components/AccountMenu/style.ts","App/components/AccountMenu/index.tsx","App/components/HeaderBackMenu/style.ts","App/components/HeaderBackMenu/index.tsx","App/components/DataList/style.ts","App/components/DataList/index.tsx","App/routes/Claims/components/ClaimDetail/style.ts","App/routes/Claims/components/ClaimDetail/index.tsx","App/routes/Claims/components/ClaimList/style.ts","App/routes/Claims/components/ClaimList/index.tsx","App/routes/Claims/style.ts","App/routes/Claims/index.tsx","App/paths.ts","App/routes/Login/index.tsx","App/routes/OperationResult/index.tsx","App/routes/Purchase/FormBuyShares/style.ts","App/routes/Purchase/FormBuyShares/index.tsx","App/routes/Purchase/style.ts","App/routes/Purchase/index.tsx","App/routes/ValidatorDetail/style.ts","App/routes/ValidatorDetail/index.tsx","App/routes/ValidatorHome/style.ts","App/routes/ValidatorHome/index.tsx","App/routes/Validators/style.ts","App/routes/Validators/index.tsx","App/routes/Wallet/style.ts","App/routes/Wallet/index.tsx","App/routes/Withdraw/FormWithdrawBalance/style.ts","App/routes/Withdraw/FormWithdrawBalance/index.tsx","App/routes/Withdraw/style.ts","App/routes/Withdraw/index.tsx","App/index.tsx","index.tsx"],"names":["module","exports","defaultContext","contracts","addContract","ContractsContext","React","ContractsProvider","children","useState","setContracts","value","contract","newContract","CW20","client","use","contractAddress","balance","address","result","allowance","owner","spender","allAllowances","all_allowances","start_after","limit","allAccounts","all_accounts","accounts","tokenInfo","token_info","investment","claims","minter","mint","recipient","amount","transfer","burn","increaseAllowance","increase_allowance","decreaseAllowance","decrease_allowance","transferFrom","transfer_from","bond","unbond","claim","setError","clearError","ErrorContext","useError","ErrorProvider","error","context","loadKeplrWallet","anyWindow","Error","signer","Promise","e","loadLedgerWallet","TransportWebUSB","ledgerTransport","hdPaths","makeCosmoshubPath","prefix","addressPrefix","loadOrCreateWallet","mnemonic","key","loaded","localStorage","generated","Bip39","Random","loadOrCreateMnemonic","hdPath","Secp256k1HdWallet","_Pact","state","this","callback","_settle","_this","onFulfilled","onRejected","pact","observer","_forIn","target","body","check","keys","array","i","thenable","reject","_cycle","_forTo","Symbol","_catch","recover","throwNotInitialized","initialized","init","clear","config","changeConfig","refreshBalance","hitFaucet","getSigner","changeSigner","getClient","getStakingClient","CosmWasmContext","useSdk","SdkProvider","faucet","console","coinMap","denom","configProp","setConfig","setSigner","setClient","contextWithInit","setValue","useEffect","gasPrice","GasPrice","gasLimits","upload","exec","migrate","send","changeAdmin","createClient","TendermintClient","tmClient","QueryClient","createStakingClient","stakingClient","coin","ProtectedSwitch","authPath","location","to","pathname","redirectPathname","redirectState","undefined","displayAmountToNative","amountToDisplay","nativeDenom","fractionalDigits","Decimal","getErrorFromStackTrace","stackTrace","stringStackTrace","match","Center","tag","Tag","props","StyledCenter","styled","Stack","StyledStack","PageLayout","StyledPageLayout","BackButton","icon","path","history","useHistory","goBack","src","alt","onClick","StyledBackButton","StyledSpin","spinIndicator","style","fontSize","spin","Loading","tip","loadingText","indicator","Text","Typography","MainStack","WelcomeStack","LightText","ErrorText","Title","disableLedgerLogin","anyNavigator","Login","loadWallet","setInitializing","sdk","pathAfterLogin","appName","appLogo","restProps","initializing","level","type","initBrowser","disabled","initLedger","initKeplr","chainId","chainName","rpc","rest","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","coinDenom","coinMinimalDenom","coinDecimals","feeCurrencies","stakeCurrency","gasPriceStep","low","average","high","bip44","coinType","configKeplr","ResultText","OperationResult","defaultButtonAction","successIcon","failIcon","success","message","customButtonText","customButtonActionPath","customButtonActionState","buttonText","buttonAction","getResultContent","chosenButtonText","chosenButtonAction","GlobalAntOverride","createGlobalStyle","GlobalColors","GlobalFonts","GlobalReset","GlobalSpacing","GlobalStyle","configs","getAppConfig","local","rpcUrl","httpUrl","faucetUrl","feeToken","stakingToken","ucosm","uatom","codeId","musselnet","umayo","ufrites","OpenMenuButton","img","CloseMenuButton","MenuCenter","MenuStack","CloseAccountStack","AvatarName","div","NameText","AddressCopyBox","AddressText","AddressCopy","AccountMenu","name","open","setOpen","accountName","openMenuButton","closeMenuButton","avatarIcon","copyIcon","copyToClipboard","Header","header","HeaderBackMenu","backArrowIcon","ListStack","DataRow","KeyText","ValueText","DataList","dataMap","Object","entries","map","index","Fragment","charAt","toUpperCase","slice","ButtonStack","ClaimDetail","claimsData","claimIndex","setClaimIndex","claimDataList","date","toLocaleDateString","disableNext","length","disablePrevious","ClaimList","balanceToClaim","claimAll","claimData","now","Date","valueOf","every","disableClaimAll","HeaderTitleStack","Claims","loading","setLoading","validatorAddress","useParams","validatorName","setValidatorName","setClaimsData","setBalanceToClaim","getContract","cw20Contract","all","release_at","at_time","decimals","fromAtomics","toString","sort","a","b","filter","reduce","previous","current","plus","showClaimList","showClaimDetail","async","push","cosmWasmLogo","goToValidators","FormStack","StakePerToken","FormField","FormBuyShares","validatorData","submitBuyShares","stakingBalance","find","stakingDecimals","maxAmount","toFloatApproximation","buySharesValidationSchema","Yup","shape","required","positive","max","initialValues","onSubmit","validationSchema","formikProps","formDisabled","isValid","dirty","nominal_value","placeholder","submitForm","Purchase","setCw20Contract","setValidatorData","nativeAmountCoin","ValidatorDetail","total_supply","Commission","parseFloat","exit_tax","getValidatorDataMap","TitleNavStack","NavCenter","coinToDisplay","nativeCoinToDisplay","staked_tokens","ValidatorHome","MenuHeader","ValidatorStack","ValidatorItem","BorderContainer","getValidatorData","validatorCompare","Validators","cw20Contracts","validatorsData","setValidatorsData","getContracts","newCw20contract","validatorsDataPromises","validator","goToValidator","Wallet","numClaims","Balance","FormWithdrawBalance","submitWithdrawBalance","balanceDecimal","fromUserInput","withdrawBalanceValidationSchema","ConfirmStack","ConfirmText","View","Withdraw","view","setView","Form","setAmount","Confirm","acceptConfirm","nativeAmountString","declineConfirm","renderForm","confirmIcon","App","basename","process","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f844054.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.e6ceb267.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.173891ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/cross.ccb4620e.svg\";","module.exports = __webpack_public_path__ + \"static/media/hamburger.87d19430.svg\";","module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/confirmIcon.5ecaf28a.svg\";","import React, { useState } from \"react\";\nimport { CW20Instance } from \"./cw20\";\n\ninterface ContractsContextType {\n  contracts: CW20Instance[];\n  readonly addContract: (newContract: CW20Instance) => void;\n}\n\nconst defaultContext: ContractsContextType = {\n  contracts: [],\n  addContract: function () {\n    return;\n  },\n};\n\nconst ContractsContext = React.createContext<ContractsContextType>(defaultContext);\n\nexport const useContracts = (): ContractsContextType => React.useContext(ContractsContext);\n\nexport function ContractsProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [contracts, setContracts] = useState<CW20Instance[]>(defaultContext.contracts);\n\n  function addContract(newContract: CW20Instance) {\n    setContracts((contracts) => {\n      const notPresent = !contracts.find(\n        (contract) => contract.contractAddress === newContract.contractAddress,\n      );\n\n      if (notPresent) return [...contracts, newContract];\n      return contracts;\n    });\n  }\n\n  const value: ContractsContextType = { contracts, addContract };\n\n  return <ContractsContext.Provider value={value}>{children}</ContractsContext.Provider>;\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin } from \"@cosmjs/launchpad\";\n\nexport type Expiration =\n  | { readonly at_height: number }\n  | { readonly at_time: number }\n  | { readonly never: unknown };\n\nexport interface AllowanceResponse {\n  readonly allowance: string; // integer as string\n  readonly expires: Expiration;\n}\n\nexport interface AllowanceInfo {\n  readonly allowance: string; // integer as string\n  readonly spender: string; // bech32 address\n  readonly expires: Expiration;\n}\n\nexport interface AllAllowancesResponse {\n  readonly allowances: readonly AllowanceInfo[];\n}\n\nexport interface TokenInfo {\n  readonly name: string;\n  readonly symbol: string;\n  readonly decimals: number;\n  readonly total_supply: string;\n}\n\nexport interface Investment {\n  readonly exit_tax: string;\n  readonly min_withdrawal: string;\n  readonly nominal_value: string;\n  readonly owner: string;\n  readonly staked_tokens: Coin;\n  readonly token_supply: string;\n  readonly validator: string;\n}\n\nexport interface Claim {\n  readonly amount: string;\n  readonly release_at: { readonly at_time: number };\n}\n\nexport interface Claims {\n  readonly claims: readonly Claim[];\n}\n\nexport interface AllAccountsResponse {\n  // list of bech32 address that have a balance\n  readonly accounts: readonly string[];\n}\n\nexport interface CW20Instance {\n  readonly contractAddress: string;\n\n  // queries\n  balance: (address: string) => Promise<string>;\n  allowance: (owner: string, spender: string) => Promise<AllowanceResponse>;\n  allAllowances: (owner: string, startAfter?: string, limit?: number) => Promise<AllAllowancesResponse>;\n  allAccounts: (startAfter?: string, limit?: number) => Promise<readonly string[]>;\n  tokenInfo: () => Promise<TokenInfo>;\n  investment: () => Promise<Investment>;\n  claims: (address: string) => Promise<Claims>;\n  minter: (sender: string) => Promise<any>;\n\n  // actions\n  mint: (sender: string, recipient: string, amount: string) => Promise<string>;\n  transfer: (sender: string, recipient: string, amount: string) => Promise<string>;\n  burn: (sender: string, amount: string) => Promise<string>;\n  increaseAllowance: (sender: string, recipient: string, amount: string) => Promise<string>;\n  decreaseAllowance: (sender: string, recipient: string, amount: string) => Promise<string>;\n  transferFrom: (sender: string, owner: string, recipient: string, amount: string) => Promise<string>;\n  bond: (sender: string, coin: Coin) => Promise<string>;\n  unbond: (sender: string, amount: string) => Promise<string>;\n  claim: (sender: string) => Promise<string>;\n}\n\nexport interface CW20Contract {\n  use: (contractAddress: string) => CW20Instance;\n}\n\nexport const CW20 = (client: SigningCosmWasmClient): CW20Contract => {\n  const use = (contractAddress: string): CW20Instance => {\n    const balance = async (address: string): Promise<string> => {\n      const result = await client.queryContractSmart(contractAddress, { balance: { address } });\n      return result.balance;\n    };\n\n    const allowance = async (owner: string, spender: string): Promise<AllowanceResponse> => {\n      return client.queryContractSmart(contractAddress, { allowance: { owner, spender } });\n    };\n\n    const allAllowances = async (\n      owner: string,\n      startAfter?: string,\n      limit?: number,\n    ): Promise<AllAllowancesResponse> => {\n      return client.queryContractSmart(contractAddress, {\n        all_allowances: { owner, start_after: startAfter, limit },\n      });\n    };\n\n    const allAccounts = async (startAfter?: string, limit?: number): Promise<readonly string[]> => {\n      const accounts: AllAccountsResponse = await client.queryContractSmart(contractAddress, {\n        all_accounts: { start_after: startAfter, limit },\n      });\n      return accounts.accounts;\n    };\n\n    const tokenInfo = async (): Promise<TokenInfo> => {\n      return client.queryContractSmart(contractAddress, { token_info: {} });\n    };\n\n    const investment = async (): Promise<Investment> => {\n      return client.queryContractSmart(contractAddress, { investment: {} });\n    };\n\n    const claims = async (address: string): Promise<Claims> => {\n      return client.queryContractSmart(contractAddress, { claims: { address } });\n    };\n\n    const minter = async (): Promise<any> => {\n      return client.queryContractSmart(contractAddress, { minter: {} });\n    };\n\n    // mints tokens, returns transactionHash\n    const mint = async (sender: string, recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { mint: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // transfers tokens, returns transactionHash\n    const transfer = async (sender: string, recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { transfer: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // burns tokens, returns transactionHash\n    const burn = async (sender: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { burn: { amount } });\n      return result.transactionHash;\n    };\n\n    const increaseAllowance = async (sender: string, spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, {\n        increase_allowance: { spender, amount },\n      });\n      return result.transactionHash;\n    };\n\n    const decreaseAllowance = async (sender: string, spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, {\n        decrease_allowance: { spender, amount },\n      });\n      return result.transactionHash;\n    };\n\n    const transferFrom = async (\n      sender: string,\n      owner: string,\n      recipient: string,\n      amount: string,\n    ): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, {\n        transfer_from: { owner, recipient, amount },\n      });\n      return result.transactionHash;\n    };\n\n    const bond = async (sender: string, coin: Coin): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { bond: {} }, undefined, [coin]);\n      return result.transactionHash;\n    };\n\n    const unbond = async (sender: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { unbond: { amount } });\n      return result.transactionHash;\n    };\n\n    const claim = async (sender: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { claim: {} });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      balance,\n      allowance,\n      allAllowances,\n      allAccounts,\n      tokenInfo,\n      investment,\n      claims,\n      minter,\n      mint,\n      transfer,\n      burn,\n      increaseAllowance,\n      decreaseAllowance,\n      transferFrom,\n      bond,\n      unbond,\n      claim,\n    };\n  };\n  return { use };\n};\n","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n","import { CosmWasmFeeTable } from \"@cosmjs/cosmwasm-launchpad\";\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { GasLimits, GasPrice, makeCosmoshubPath, OfflineSigner, Secp256k1HdWallet } from \"@cosmjs/launchpad\";\nimport { LedgerSigner } from \"@cosmjs/ledger-amino\";\nimport {\n  DistributionExtension,\n  QueryClient,\n  setupDistributionExtension,\n  setupStakingExtension,\n  StakingExtension,\n} from \"@cosmjs/stargate\";\nimport { adaptor34, Client as TendermintClient } from \"@cosmjs/tendermint-rpc\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { AppConfig } from \"../config\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport type WalletLoader = (chainId: string, addressPrefix?: string) => Promise<OfflineSigner>;\n\nexport async function loadOrCreateWallet(_chainId: string, addressPrefix?: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\nexport async function loadLedgerWallet(_chainId: string, addressPrefix?: string): Promise<OfflineSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\nexport async function loadKeplrWallet(chainId: string): Promise<OfflineSigner> {\n  const anyWindow: any = window;\n  if (!anyWindow.getOfflineSigner) {\n    throw new Error(\"Keplr extension is not available\");\n  }\n\n  const signer = anyWindow.getOfflineSigner(chainId);\n  signer.signAmino = signer.signAmino ?? signer.sign;\n\n  return Promise.resolve(signer);\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\n    upload: 1500000,\n    init: 600000,\n    exec: 400000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000,\n  };\n\n  return SigningCosmWasmClient.connectWithSigner(config.rpcUrl, signer, {\n    prefix: config.addressPrefix,\n    gasPrice: GasPrice.fromString(`${config.gasPrice}${config.feeToken}`),\n    gasLimits: gasLimits,\n  });\n}\n\nexport async function createStakingClient(\n  apiUrl: string,\n): Promise<QueryClient & StakingExtension & DistributionExtension> {\n  const tmClient = await TendermintClient.connect(apiUrl, adaptor34);\n  return QueryClient.withExtensions(tmClient, setupStakingExtension, setupDistributionExtension);\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { FaucetClient } from \"@cosmjs/faucet-client\";\nimport { Coin, OfflineSigner } from \"@cosmjs/launchpad\";\nimport { QueryClient, StakingExtension, DistributionExtension } from \"@cosmjs/stargate\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { useError } from \"./error\";\nimport { createClient, createStakingClient } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly init: (signer: OfflineSigner) => void;\n  readonly clear: () => void;\n  readonly config: Partial<AppConfig>;\n  readonly changeConfig: (updates: Partial<AppConfig>) => void;\n  readonly address: string;\n  readonly balance: readonly Coin[];\n  readonly refreshBalance: () => Promise<void>;\n  readonly hitFaucet: () => Promise<void>;\n  readonly getSigner: () => OfflineSigner;\n  readonly changeSigner: (newSigner: OfflineSigner) => void;\n  readonly getClient: () => SigningCosmWasmClient;\n  readonly getStakingClient: () => QueryClient & StakingExtension & DistributionExtension;\n}\n\nfunction throwNotInitialized(): any {\n  throw new Error(\"Not yet initialized\");\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  init: throwNotInitialized,\n  clear: throwNotInitialized,\n  config: {},\n  changeConfig: throwNotInitialized,\n  address: \"\",\n  balance: [],\n  refreshBalance: throwNotInitialized,\n  hitFaucet: throwNotInitialized,\n  getSigner: throwNotInitialized,\n  changeSigner: throwNotInitialized,\n  getClient: throwNotInitialized,\n  getStakingClient: throwNotInitialized,\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface SdkProviderProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly config: AppConfig;\n}\n\nexport function SdkProvider({ config: configProp, children }: SdkProviderProps): JSX.Element {\n  const { setError } = useError();\n\n  const [config, setConfig] = useState(configProp);\n  const [signer, setSigner] = useState<OfflineSigner>();\n  const [client, setClient] = useState<SigningCosmWasmClient>();\n\n  const contextWithInit = { ...defaultContext, init: setSigner };\n  const [value, setValue] = useState<CosmWasmContextType>(contextWithInit);\n\n  function clear(): void {\n    setValue({ ...contextWithInit });\n    setClient(undefined);\n    setSigner(undefined);\n    setConfig(configProp);\n  }\n\n  function changeConfig(updates: Partial<AppConfig>): void {\n    setConfig((config) => ({ ...config, ...updates }));\n  }\n\n  // Get balance for each coin specified in config.coinMap\n  async function refreshBalance(address: string, balance: Coin[]): Promise<void> {\n    if (!client) return;\n\n    balance.length = 0;\n    for (const denom in config.coinMap) {\n      const coin = await client.getBalance(address, denom);\n      if (coin) balance.push(coin);\n    }\n  }\n\n  // Get feeToken balance from faucet\n  async function hitFaucet(address: string): Promise<void> {\n    if (!config.faucetUrl || !config.feeToken) return;\n\n    try {\n      const faucet = new FaucetClient(config.faucetUrl);\n      await faucet.credit(address, config.feeToken);\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    }\n  }\n\n  useEffect(() => {\n    if (!signer) return;\n\n    (async function updateClient(): Promise<void> {\n      try {\n        const client = await createClient(config, signer);\n        setClient(client);\n      } catch (error) {\n        setError(error.message);\n      }\n    })();\n  }, [signer, config]);\n\n  useEffect(() => {\n    if (!signer || !client) return;\n\n    const balance: Coin[] = [];\n\n    (async function updateValue(): Promise<void> {\n      const address = (await signer.getAccounts())[0].address;\n\n      await refreshBalance(address, balance);\n      if (!balance.find((coin) => coin.denom === config.feeToken)) {\n        await hitFaucet(address);\n      }\n      await refreshBalance(address, balance);\n\n      const stakingClient = await createStakingClient(config.rpcUrl);\n\n      setValue({\n        initialized: true,\n        init: () => {},\n        clear,\n        config,\n        changeConfig,\n        address,\n        balance,\n        refreshBalance: refreshBalance.bind(null, address, balance),\n        hitFaucet: hitFaucet.bind(null, address),\n        getSigner: () => signer,\n        changeSigner: setSigner,\n        getClient: () => client,\n        getStakingClient: () => stakingClient,\n      });\n    })();\n  }, [client]);\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useSdk } from \"./wallet\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\ninterface ProtectedSwitchProps extends SwitchProps {\n  readonly authPath: string;\n}\n\nexport function ProtectedSwitch({ authPath, children, location }: ProtectedSwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: authPath,\n        state: location ? { redirectPathname: location.pathname, redirectState: location.state } : undefined,\n      }}\n    />\n  );\n}\n","import { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport interface MappedCoin {\n  readonly denom: string;\n  readonly fractionalDigits: number;\n}\n\nexport interface CoinMap {\n  readonly [key: string]: MappedCoin;\n}\n\nexport function nativeCoinToDisplay(coin: Coin, coinMap: CoinMap): Coin {\n  if (!coinMap) return coin;\n\n  const coinToDisplay = coinMap[coin.denom];\n  if (!coinToDisplay) return coin;\n\n  const amountToDisplay = Decimal.fromAtomics(coin.amount, coinToDisplay.fractionalDigits).toString();\n\n  return { denom: coinToDisplay.denom, amount: amountToDisplay };\n}\n\n// display amount is eg \"12.0346\", return is in native tokens\n// with 6 fractional digits, this would be eg. \"12034600\"\nexport function displayAmountToNative(\n  amountToDisplay: string,\n  coinMap: CoinMap,\n  nativeDenom: string,\n): string {\n  const fractionalDigits = coinMap[nativeDenom]?.fractionalDigits;\n  if (fractionalDigits) {\n    // use https://github.com/CosmWasm/cosmjs/blob/v0.22.2/packages/math/src/decimal.ts\n    const decimalAmount = Decimal.fromUserInput(amountToDisplay, fractionalDigits);\n    return decimalAmount.atomics;\n  }\n\n  return amountToDisplay;\n}\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error || stringStackTrace;\n}\n","import * as React from \"react\";\n\nexport interface CenterProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Center({ tag: Tag = \"div\", children, ...props }: CenterProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Center } from \"./component\";\n\nexport const StyledCenter = styled(Center)`\n  box-sizing: content-box;\n\n  max-width: var(--max-width, none);\n\n  margin-left: auto;\n  margin-right: auto;\n\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from \"react\";\n\nexport interface StackProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Stack({ tag: Tag = \"div\", children, ...props }: StackProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"./component\";\n\nexport const StyledStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  & > * {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  & > * + * {\n    margin-top: var(--gap, var(--s0));\n  }\n`;\n","import { Center, CenterProps } from \"../Center\";\nimport * as React from \"react\";\n\nexport function PageLayout({ children, ...props }: CenterProps): JSX.Element {\n  return (\n    <Center tag=\"main\" {...props}>\n      {children}\n    </Center>\n  );\n}\n","import styled from \"styled-components\";\nimport { PageLayout } from \"./component\";\n\nexport const StyledPageLayout = styled(PageLayout)`\n  --max-width: 22rem;\n  --gap: var(--s8);\n\n  padding: var(--s4);\n\n  /* Reduces padding when width < 380px, but uses em for better media query support */\n  @media (max-width: 23.6875em) {\n    padding: var(--s-1) 0 var(--s-2) 0;\n  }\n\n  [alt=\"Back arrow\"] {\n    align-self: flex-start;\n  }\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport interface BackButtonProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly icon: string;\n  readonly path?: string;\n  readonly state?: any;\n}\n\nexport function BackButton({ icon, path, state, ...props }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path, state) : history.goBack;\n\n  return <img src={icon} alt=\"Back arrow\" onClick={goBack} {...props} />;\n}\n","import styled from \"styled-components\";\nimport { BackButton } from \"./component\";\n\nexport const StyledBackButton = styled(BackButton)`\n  cursor: pointer;\n`;\n","import { Spin } from \"antd\";\nimport styled from \"styled-components\";\n\nexport const StyledSpin = styled(Spin)`\n  & > span + div {\n    margin-top: var(--s2);\n  }\n`;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport * as React from \"react\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { StyledSpin } from \"./style\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nexport function Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <PageLayout>\n      <StyledSpin indicator={spinIndicator} tip={tip} />\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s9);\n  }\n`;\n\nexport const WelcomeStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const LightText = styled(Text)`\n  display: block;\n  font-weight: lighter;\n`;\n\nexport const ErrorText = styled(Text)`\n  color: var(--color-red);\n`;\n","import {\n  AppConfig,\n  configKeplr,\n  loadKeplrWallet,\n  loadLedgerWallet,\n  loadOrCreateWallet,\n  RedirectLocation,\n  useError,\n  useSdk,\n  WalletLoader,\n} from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { Loading } from \"../../logic/Loading\";\nimport { ErrorText, LightText, MainStack, WelcomeStack } from \"./style\";\n\nconst { Title } = Typography;\n\nfunction disableLedgerLogin() {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n\nfunction disableKeplrLogin() {\n  // TODO find check that works on reload\n  //const anyWindow: any = window;\n  //return !(anyWindow.getOfflineSigner && anyWindow.keplr.experimentalSuggestChain);\n  return false;\n}\n\ninterface LoginProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly pathAfterLogin: string;\n  readonly appName: string;\n  readonly appLogo: string;\n  readonly config: AppConfig;\n}\n\nexport function Login({ config, pathAfterLogin, appName, appLogo, ...restProps }: LoginProps): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const { error, setError, clearError } = useError();\n  const sdk = useSdk();\n\n  const [initializing, setInitializing] = useState(false);\n\n  async function init(loadWallet: WalletLoader) {\n    setInitializing(true);\n    clearError();\n\n    try {\n      const signer = await loadWallet(config.chainId, config.addressPrefix);\n      sdk.init(signer);\n    } catch (error) {\n      console.error(error);\n      setError(Error(error).message);\n      setInitializing(false);\n    }\n  }\n\n  async function initBrowser() {\n    await init(loadOrCreateWallet);\n  }\n\n  async function initLedger() {\n    await init(loadLedgerWallet);\n  }\n\n  async function initKeplr() {\n    const anyWindow: any = window;\n    try {\n      await anyWindow.keplr.experimentalSuggestChain(configKeplr(config));\n      await anyWindow.keplr.enable(config.chainId);\n      await init(loadKeplrWallet);\n    } catch (error) {\n      console.error(error);\n      setError(Error(error).message);\n    }\n  }\n\n  useEffect(() => {\n    if (!sdk.initialized) return;\n\n    if (state) {\n      history.push(state.redirectPathname, state.redirectState);\n    } else {\n      history.push(pathAfterLogin);\n    }\n  }, [sdk.initialized, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <PageLayout {...restProps}>\n      <MainStack>\n        <img src={appLogo} alt=\"CosmWasm logo\" />\n        <WelcomeStack>\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <LightText>Welcome to your {appName}</LightText>\n            <LightText>Select one of the following options to start:</LightText>\n          </Typography>\n          {error && <ErrorText>{error}</ErrorText>}\n          <Button type=\"primary\" onClick={initBrowser}>\n            Browser (Demo)\n          </Button>\n          <Button type=\"primary\" disabled={disableLedgerLogin()} onClick={initLedger}>\n            Ledger (Secure, Chrome)\n          </Button>\n          <Button type=\"primary\" disabled={disableKeplrLogin()} onClick={initKeplr}>\n            Keplr (Secure)\n          </Button>\n        </WelcomeStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { CoinMap } from \"./utils\";\n\nexport interface KeplrCoin {\n  readonly coinDenom: string;\n  readonly coinMinimalDenom: string;\n  readonly coinDecimals: number;\n}\n\nexport interface KeplrConfig {\n  readonly chainId: string;\n  readonly chainName: string;\n  readonly rpc: string;\n  readonly rest: string;\n  readonly bech32Config: {\n    readonly bech32PrefixAccAddr: string;\n    readonly bech32PrefixAccPub: string;\n    readonly bech32PrefixValAddr: string;\n    readonly bech32PrefixValPub: string;\n    readonly bech32PrefixConsAddr: string;\n    readonly bech32PrefixConsPub: string;\n  };\n  readonly currencies: readonly KeplrCoin[];\n  readonly feeCurrencies: readonly KeplrCoin[];\n  readonly stakeCurrency: KeplrCoin;\n  readonly gasPriceStep: {\n    readonly low: number;\n    readonly average: number;\n    readonly high: number;\n  };\n  readonly bip44: { readonly coinType: number };\n  readonly coinType: number;\n}\n\nexport interface AppConfig {\n  readonly chainId: string;\n  readonly chainName: string;\n  readonly addressPrefix: string;\n  readonly rpcUrl: string;\n  readonly httpUrl: string;\n  readonly faucetUrl: string;\n  readonly feeToken: string;\n  readonly stakingToken: string;\n  readonly coinMap: CoinMap;\n  readonly gasPrice: number;\n  readonly codeId?: number;\n}\n\nexport interface NetworkConfigs {\n  readonly local: AppConfig;\n  readonly [key: string]: AppConfig;\n}\n\nexport function getAppConfig(configs: NetworkConfigs): AppConfig {\n  const network = process.env.REACT_APP_NETWORK;\n  if (!network) return configs.local;\n\n  const config = configs[network];\n  if (!config) {\n    throw new Error(`No configuration found for network ${network}`);\n  }\n\n  return config;\n}\n\nexport function configKeplr(config: AppConfig): KeplrConfig {\n  return {\n    chainId: config.chainId,\n    chainName: config.chainName,\n    rpc: config.rpcUrl,\n    rest: config.httpUrl,\n    bech32Config: {\n      bech32PrefixAccAddr: `${config.addressPrefix}`,\n      bech32PrefixAccPub: `${config.addressPrefix}pub`,\n      bech32PrefixValAddr: `${config.addressPrefix}valoper`,\n      bech32PrefixValPub: `${config.addressPrefix}valoperpub`,\n      bech32PrefixConsAddr: `${config.addressPrefix}valcons`,\n      bech32PrefixConsPub: `${config.addressPrefix}valconspub`,\n    },\n    currencies: [\n      {\n        coinDenom: config.coinMap[config.feeToken].denom,\n        coinMinimalDenom: config.feeToken,\n        coinDecimals: config.coinMap[config.feeToken].fractionalDigits,\n      },\n      {\n        coinDenom: config.coinMap[config.stakingToken].denom,\n        coinMinimalDenom: config.stakingToken,\n        coinDecimals: config.coinMap[config.stakingToken].fractionalDigits,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: config.coinMap[config.feeToken].denom,\n        coinMinimalDenom: config.feeToken,\n        coinDecimals: config.coinMap[config.feeToken].fractionalDigits,\n      },\n    ],\n    stakeCurrency: {\n      coinDenom: config.coinMap[config.stakingToken].denom,\n      coinMinimalDenom: config.stakingToken,\n      coinDecimals: config.coinMap[config.stakingToken].fractionalDigits,\n    },\n    gasPriceStep: {\n      low: config.gasPrice / 2,\n      average: config.gasPrice,\n      high: config.gasPrice * 2,\n    },\n    bip44: { coinType: 118 },\n    coinType: 118,\n  };\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const ResultText = styled(Text)`\n  font-size: var(--s-1);\n\n  &[data-result=\"success\"] {\n    color: var(--color-green);\n  }\n\n  &[data-result=\"failure\"] {\n    color: var(--color-red);\n  }\n`;\n","import { Button } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { MainStack, ResultText } from \"./style\";\n\ninterface ResultContent {\n  readonly result: \"success\" | \"failure\";\n  readonly icon: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n  readonly customButtonActionState?: any;\n}\n\nexport interface OperationResultProps {\n  readonly defaultButtonAction: (history: History) => void;\n  readonly successIcon: string;\n  readonly failIcon: string;\n}\n\nexport function OperationResult({\n  defaultButtonAction,\n  successIcon,\n  failIcon,\n}: OperationResultProps): JSX.Element {\n  const history = useHistory();\n\n  const {\n    success,\n    message,\n    error,\n    customButtonText,\n    customButtonActionPath,\n    customButtonActionState,\n  } = history.location.state as OperationResultState;\n\n  function getResultContent(success: boolean): ResultContent {\n    if (success) {\n      return {\n        result: \"success\",\n        icon: successIcon,\n        buttonText: \"Home\",\n        buttonAction: () => defaultButtonAction(history),\n      };\n    }\n\n    return {\n      result: \"failure\",\n      icon: failIcon,\n      buttonText: \"Retry\",\n      buttonAction: history.goBack,\n    };\n  }\n\n  const { icon, result, buttonText, buttonAction } = getResultContent(success);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath, customButtonActionState)\n    : buttonAction;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <img src={icon} alt=\"Result icon\" />\n        <ResultText data-result={result}>{message}</ResultText>\n        {error && <ResultText data-result={result}>{error}</ResultText>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { printableBalance, useSdk } from \"@cosmicdapp/logic\";\nimport { Button, Divider, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport { StackProps } from \"../../layout/Stack\";\nimport { AccountStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface YourAccountProps extends StackProps {\n  readonly hideTitle?: boolean;\n  readonly hideBalance?: boolean;\n}\n\nexport function YourAccount({ tag, hideTitle, hideBalance }: YourAccountProps): JSX.Element {\n  const { address, balance } = useSdk();\n\n  return (\n    <AccountStack tag={tag}>\n      {!hideTitle && (\n        <header>\n          <Title level={3}>Your Account</Title>\n          {!hideBalance && <Divider />}\n        </header>\n      )}\n      <Text>{address}</Text>\n      {!hideBalance && <Text>({printableBalance(balance)})</Text>}\n      <Button type=\"primary\" onClick={() => copyToClipboard(address)}>\n        Copy Account Address\n      </Button>\n    </AccountStack>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalAntOverride = createGlobalStyle`\n  .ant-btn:not(.ant-input-search-button) {\n    width: var(--max-width);\n    max-width: 100vw;\n  }\n  \n  .ant-form div[role=\"alert\"] li {\n    color: var(--form-error);\n    font-size: var(--s-1);\n    text-align: left;\n    margin: var(--s-1);\n  \n    &::before {\n      content: \"* \";\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalColors = createGlobalStyle`\n  :root {\n    --color-black: #333;\n    --color-gray-light: #f2f2f2;\n    --color-red: #eb5757;\n    --color-green: #27ae60;\n    --color-blue: #2f80ed;\n    --color-blue-light: #1890ff;\n\n    --color-primary: var(--color-blue);\n    --button-color: var(--color-blue-light);\n    --text-color: var(--color-primary);\n    --heading-color: var(--color-primary);\n    --form-error: var(--color-red);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalFonts = createGlobalStyle`\n  :root {\n    --ff-montserrat: Montserrat, sans-serif;\n    --ff-iceland: Iceland, serif;\n\n    --ff-text: var(--ff-montserrat);\n    --ff-heading: var(--ff-iceland);\n    \n    font-family: var(--ff-text);\n  }\n\n  p,\n  span {\n    font-family: var(--ff-text);\n    font-size: var(--s0);\n    overflow-wrap: anywhere;\n  }\n  \n  h1,\n  h2,\n  h3 {\n    font-family: var(--ff-heading);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalReset = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    min-height: 100vh;\n    line-height: 1.5;\n    text-rendering: optimizeSpeed;\n  }\n  \n  body,\n  h1,\n  h2,\n  p,\n  ul[class],\n  ol[class] {\n    margin: 0;\n  }\n  \n  ul[class],\n  ol[class] {\n    padding: 0;\n    list-style: none;\n  }\n  \n  button,\n  input,\n  select,\n  textarea {\n    font: inherit;\n  }\n  \n  img {\n    display: block;\n    max-width: 100%;\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01s !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01s !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalSpacing = createGlobalStyle`\n  :root {\n    --ratio: 1.25;\n\n    --s-6: calc(var(--s-5) / var(--ratio));\n    --s-5: calc(var(--s-4) / var(--ratio));\n    --s-4: calc(var(--s-3) / var(--ratio));\n    --s-3: calc(var(--s-2) / var(--ratio));\n    --s-2: calc(var(--s-1) / var(--ratio));\n    --s-1: calc(var(--s0) / var(--ratio));\n    --s0: 1rem;\n    --s1: calc(var(--s0) * var(--ratio));\n    --s2: calc(var(--s1) * var(--ratio));\n    --s3: calc(var(--s2) * var(--ratio));\n    --s4: calc(var(--s3) * var(--ratio));\n    --s5: calc(var(--s4) * var(--ratio));\n    --s6: calc(var(--s5) * var(--ratio));\n    --s7: calc(var(--s6) * var(--ratio));\n    --s8: calc(var(--s7) * var(--ratio));\n    --s9: calc(var(--s8) * var(--ratio));\n  }\n`;\n","import React from \"react\";\nimport { GlobalAntOverride } from \"./GlobalAntOverride\";\nimport { GlobalColors } from \"./GlobalColors\";\nimport { GlobalFonts } from \"./GlobalFonts\";\nimport { GlobalReset } from \"./GlobalReset\";\nimport { GlobalSpacing } from \"./GlobalSpacing\";\n\nexport function GlobalStyle(): JSX.Element {\n  return (\n    <>\n      <GlobalReset />\n      <GlobalSpacing />\n      <GlobalColors />\n      <GlobalFonts />\n      <GlobalAntOverride />\n    </>\n  );\n}\n","import { AppConfig, getAppConfig, NetworkConfigs } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  chainId: \"testing\",\n  chainName: \"Testing\",\n  addressPrefix: \"wasm\",\n  rpcUrl: \"http://localhost:26659\",\n  httpUrl: \"http://localhost:1317\",\n  faucetUrl: \"http://localhost:8000\",\n  feeToken: \"ucosm\",\n  stakingToken: \"uatom\",\n  coinMap: {\n    ucosm: { denom: \"COSM\", fractionalDigits: 6 },\n    uatom: { denom: \"ATOM\", fractionalDigits: 6 },\n  },\n  gasPrice: 0.025,\n  // TODO make sure it's correct\n  codeId: 129,\n};\n\nconst musselnet: AppConfig = {\n  chainId: \"musselnet-2\",\n  chainName: \"Musselnet\",\n  addressPrefix: \"wasm\",\n  rpcUrl: \"https://rpc.musselnet.cosmwasm.com\",\n  httpUrl: \"https://lcd.musselnet.cosmwasm.com\",\n  faucetUrl: \"https://faucet.musselnet.cosmwasm.com\",\n  feeToken: \"umayo\",\n  stakingToken: \"ufrites\",\n  coinMap: {\n    umayo: { denom: \"MAYO\", fractionalDigits: 6 },\n    ufrites: { denom: \"FRITES\", fractionalDigits: 6 },\n  },\n  gasPrice: 0.025,\n  codeId: 5,\n};\n\nconst configs: NetworkConfigs = { local, musselnet };\nexport const config = getAppConfig(configs);\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport { Typography } from \"antd\";\nimport styled from \"styled-components\";\n\nconst { Text } = Typography;\n\nexport const OpenMenuButton = styled.img`\n  cursor: pointer;\n  width: 2.625rem;\n`;\n\nexport const CloseMenuButton = styled.img`\n  cursor: pointer;\n  width: 1.75rem;\n`;\n\nexport const MenuCenter = styled(Center)`\n  box-sizing: border-box;\n  position: absolute;\n  z-index: 1;\n\n  min-width: var(--max-width);\n  padding: var(--s0);\n  background-color: var(--color-blue);\n`;\n\nexport const MenuStack = styled(Stack)`\n  width: 100%;\n  color: var(--color-gray-light);\n\n  & > * {\n    --gap: var(--s4);\n  }\n`;\n\nexport const CloseAccountStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  width: 100%;\n\n  & > * {\n    --gap: var(--s0);\n  }\n\n  & > img {\n    align-self: flex-end;\n  }\n`;\n\nexport const AvatarName = styled.div`\n  display: flex;\n`;\n\nexport const NameText = styled(Text)`\n  margin-left: var(--s-1);\n  font-size: var(--s2);\n  color: inherit;\n`;\n\nexport const AddressCopyBox = styled.div`\n  width: 100%;\n  padding: var(--s-4) 0;\n  border-radius: 2px;\n  background-color: var(--color-gray-light);\n\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n`;\n\nexport const AddressText = styled(Text)`\n  font-size: var(--s-2);\n`;\n\nexport const AddressCopy = styled.img`\n  cursor: pointer;\n`;\n\nexport const LinksStack = styled(Stack)`\n  & > * {\n    --gap: var(--s-3);\n  }\n`;\n\nexport const LinkText = styled(Text)`\n  cursor: pointer;\n\n  font-family: var(--ff-iceland);\n  font-size: var(--s5);\n\n  color: inherit;\n`;\n","import { useSdk } from \"@cosmicdapp/logic\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React, { useState } from \"react\";\nimport avatarIcon from \"./assets/avatar.svg\";\nimport copyIcon from \"./assets/copy.svg\";\nimport closeMenuButton from \"./assets/cross.svg\";\nimport openMenuButton from \"./assets/hamburger.svg\";\nimport {\n  AddressCopy,\n  AddressCopyBox,\n  AddressText,\n  AvatarName,\n  CloseAccountStack,\n  CloseMenuButton,\n  MenuCenter,\n  MenuStack,\n  NameText,\n  OpenMenuButton,\n} from \"./style\";\n\nexport interface AccountMenuProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly name?: string;\n}\n\nexport function AccountMenu({ name, ...props }: AccountMenuProps): JSX.Element {\n  const { address } = useSdk();\n\n  // NOTE Link functionality not clear, removing for now\n  /* const history = useHistory();\n   function goToHelp() {\n    //TODO: set path to help\n    history.push(pathValidator);\n  }\n  function goToLogout() {\n    //TODO: set path to logout\n    history.push(pathValidator);\n  } */\n\n  const [open, setOpen] = useState(false);\n  const openMenu = () => setOpen(true);\n  const closeMenu = () => setOpen(false);\n\n  const accountName = name ? `${name}'s` : \"Your\";\n\n  return (\n    <>\n      <OpenMenuButton src={openMenuButton} alt=\"Open account menu\" onClick={openMenu} {...props} />\n      {open && (\n        <MenuCenter {...props}>\n          <MenuStack>\n            <CloseAccountStack>\n              <CloseMenuButton src={closeMenuButton} alt=\"Close account menu\" onClick={closeMenu} />\n              <AvatarName>\n                <img src={avatarIcon} alt=\"Avatar\" />\n                <NameText>{accountName} account</NameText>\n              </AvatarName>\n              <AddressCopyBox>\n                <AddressText>{address}</AddressText>\n                <AddressCopy\n                  src={copyIcon}\n                  alt=\"Copy address icon\"\n                  onClick={() => {\n                    copyToClipboard(address);\n                  }}\n                />\n              </AddressCopyBox>\n            </CloseAccountStack>\n            {\n              // NOTE Link functionality not clear, removing for now\n              /* <LinksStack>\n              <div onClick={goToHelp}>\n                <LinkText>Help</LinkText>\n              </div>\n              <div onClick={goToLogout}>\n                <LinkText>Logout</LinkText>\n              </div>\n            </LinksStack> */\n            }\n          </MenuStack>\n        </MenuCenter>\n      )}\n    </>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const Header = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n","import { BackButton, BackButtonProps } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { AccountMenu, AccountMenuProps } from \"../AccountMenu\";\nimport { Header } from \"./style\";\n\ntype HeaderBackMenu = Omit<BackButtonProps, \"icon\"> & AccountMenuProps;\n\nexport function HeaderBackMenu({ path, state, name, ...props }: HeaderBackMenu): JSX.Element {\n  return (\n    <Header {...props}>\n      <BackButton icon={backArrowIcon} path={path} state={state} />\n      <AccountMenu name={name} />\n    </Header>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport { Typography } from \"antd\";\nimport styled from \"styled-components\";\n\nconst { Text } = Typography;\n\nexport const ListStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  div[role=\"separator\"] {\n    margin-bottom: 0;\n  }\n`;\n\nexport const DataRow = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n`;\n\nexport const KeyText = styled(Text)`\n  font-family: var(--ff-iceland);\n  font-size: var(--s2);\n  line-height: var(--s2);\n`;\n\nexport const ValueText = styled(Text)`\n  font-family: var(--ff-montserrat);\n  font-weight: bolder;\n  font-size: var(--s4);\n  line-height: var(--s4);\n`;\n","import { Divider } from \"antd\";\nimport React from \"react\";\nimport { DataRow, KeyText, ListStack, ValueText } from \"./style\";\n\nexport interface DataListProps {\n  readonly [key: string]: string;\n}\n\nexport function DataList(dataMap: DataListProps): JSX.Element {\n  return (\n    <ListStack>\n      {Object.entries(dataMap).map(([key, value], index) => (\n        <React.Fragment key={key}>\n          {index > 0 && <Divider />}\n          <DataRow>\n            <KeyText>{key.charAt(0).toUpperCase() + key.slice(1)}</KeyText>\n            <ValueText>{value}</ValueText>\n          </DataRow>\n        </React.Fragment>\n      ))}\n    </ListStack>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { ClaimData } from \"../..\";\nimport { DataList } from \"../../../../components/DataList\";\nimport { ButtonStack } from \"./style\";\n\ninterface ClaimDetailParams {\n  readonly claimsData: readonly ClaimData[];\n  readonly claimIndex: number;\n  readonly setClaimIndex: React.Dispatch<React.SetStateAction<number>>;\n}\n\nexport function ClaimDetail({ claimsData, claimIndex, setClaimIndex }: ClaimDetailParams): JSX.Element {\n  const claimDataList =\n    claimIndex === undefined\n      ? {}\n      : {\n          ...claimsData[claimIndex],\n          date: claimsData[claimIndex].date.toLocaleDateString(),\n        };\n\n  const disableNext = claimIndex === claimsData.length - 1;\n  const disablePrevious = claimIndex === 0;\n\n  return (\n    <>\n      <DataList {...claimDataList} />\n      <ButtonStack>\n        <Button\n          type=\"primary\"\n          disabled={disableNext}\n          onClick={() => {\n            !disableNext && setClaimIndex((claimIndex) => claimIndex + 1);\n          }}\n        >\n          Next\n        </Button>\n        <Button\n          type=\"primary\"\n          disabled={disablePrevious}\n          onClick={() => {\n            !disablePrevious && setClaimIndex((claimIndex) => claimIndex - 1);\n          }}\n        >\n          Previous\n        </Button>\n      </ButtonStack>\n    </>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { ClaimData } from \"../..\";\nimport { ButtonStack } from \"./style\";\n\ninterface ClaimListParams {\n  readonly claimsData: readonly ClaimData[];\n  readonly setClaimIndex: React.Dispatch<React.SetStateAction<number>>;\n  readonly balanceToClaim: string;\n  readonly claimAll: () => Promise<void>;\n}\n\nexport function ClaimList({\n  claimsData,\n  setClaimIndex,\n  balanceToClaim,\n  claimAll,\n}: ClaimListParams): JSX.Element {\n  function disableClaimAll() {\n    if (!claimsData.length) return true;\n\n    const now = new Date().valueOf();\n    return claimsData.every((claim) => claim.date.valueOf() > now);\n  }\n\n  return (\n    <>\n      <ButtonStack>\n        {claimsData.map((claimData, index) => (\n          <Button\n            key={index}\n            type=\"primary\"\n            onClick={() => {\n              setClaimIndex(index);\n            }}\n          >\n            {`${claimData.date.toLocaleDateString()} - ${claimData.balance} tokens`}\n          </Button>\n        ))}\n      </ButtonStack>\n      <Button disabled={disableClaimAll()} type=\"primary\" onClick={claimAll}>\n        Claim {balanceToClaim}\n      </Button>\n    </>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s6);\n  }\n\n  width: 100%;\n`;\n\nexport const HeaderTitleStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  h1.ant-typography,\n  h2.ant-typography {\n    margin: 0;\n    margin-top: var(--gap);\n  }\n\n  h1 {\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n\n  h2 {\n    font-size: var(--s5);\n    line-height: var(--s5);\n  }\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n","import { Loading, PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, displayAmountToNative, getErrorFromStackTrace, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { pathClaims, pathOperationResult, pathWallet } from \"../../paths\";\nimport { ClaimDetail } from \"./components/ClaimDetail\";\nimport { ClaimList } from \"./components/ClaimList\";\nimport { HeaderTitleStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nexport interface ClaimData {\n  readonly date: Date;\n  readonly balance: string;\n}\n\ninterface ClaimsParams {\n  readonly validatorAddress: string;\n}\n\nexport function Claims(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n  const [claimIndex, setClaimIndex] = useState<number>();\n\n  const history = useHistory();\n  const { validatorAddress } = useParams<ClaimsParams>();\n  const { getClient, address, refreshBalance } = useSdk();\n\n  const [validatorName, setValidatorName] = useState(\"\");\n  const [claimsData, setClaimsData] = useState<readonly ClaimData[]>([]);\n  const [balanceToClaim, setBalanceToClaim] = useState(\"0\");\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateNameAndClaims() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [{ name }, { claims }] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.claims(address),\n      ]);\n\n      setValidatorName(name);\n\n      const claimsData: ClaimData[] = claims.map((claim) => {\n        const date = new Date(claim.release_at.at_time * 1000);\n\n        const decimals = config.coinMap[config.stakingToken].fractionalDigits;\n        const balance = Decimal.fromAtomics(claim.amount, decimals).toString();\n\n        return { date, balance };\n      });\n\n      setClaimsData(claimsData.sort((a, b) => a.date.valueOf() - b.date.valueOf()));\n    })();\n  }, [getClient, validatorAddress, address]);\n\n  useEffect(() => {\n    const decimals = config.coinMap[config.stakingToken].fractionalDigits;\n    const now = new Date().valueOf();\n\n    const readyClaims = claimsData.filter((claim) => claim.date.valueOf() < now);\n\n    const balances = readyClaims.map((claim) =>\n      Decimal.fromAtomics(\n        displayAmountToNative(claim.balance, config.coinMap, config.stakingToken),\n        decimals,\n      ),\n    );\n\n    const balanceToClaim = balances.reduce(\n      (previous, current) => previous.plus(current),\n      Decimal.fromAtomics(\"0\", decimals),\n    );\n    setBalanceToClaim(balanceToClaim.toString());\n  }, [claimsData]);\n\n  async function claimAll() {\n    setLoading(true);\n\n    const client = getClient();\n    const contract = await client.getContract(validatorAddress);\n    const cw20Contract = CW20(client).use(contract.address);\n\n    try {\n      const txHash = await cw20Contract.claim(address);\n      if (!txHash) {\n        throw Error(\"Claim failed\");\n      }\n\n      refreshBalance();\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: true,\n          message: `Successfully claimed`,\n          customButtonText: \"Wallet\",\n          customButtonActionPath: `${pathWallet}/${validatorAddress}`,\n        },\n      });\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Claim transaction failed:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: `${pathClaims}/${validatorAddress}`,\n        },\n      });\n    }\n  }\n\n  const showClaimList = claimIndex === undefined;\n  const showClaimDetail = claimIndex !== undefined;\n\n  return (\n    (loading && <Loading loadingText={`Claiming...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <HeaderTitleStack>\n            <HeaderBackMenu path={`${pathWallet}/${validatorAddress}`} />\n            <Title>Pending Claims</Title>\n            <Title level={2}>{validatorName}</Title>\n          </HeaderTitleStack>\n          {showClaimList && (\n            <ClaimList\n              claimsData={claimsData}\n              setClaimIndex={setClaimIndex}\n              balanceToClaim={balanceToClaim}\n              claimAll={claimAll}\n            />\n          )}\n          {showClaimDetail && (\n            <ClaimDetail claimsData={claimsData} claimIndex={claimIndex} setClaimIndex={setClaimIndex} />\n          )}\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n","export const pathLogin = \"/login\";\nexport const pathValidators = \"/validators\";\nexport const pathValidator = \"/validator\";\nexport const pathDetail = \"/detail\";\nexport const pathWallet = \"/wallet\";\nexport const pathPurchase = \"/purchase\";\nexport const pathWithdraw = \"/withdraw\";\nexport const pathClaims = \"/claims\";\nexport const pathOperationResult = \"/result\";\n","import { Login as LoginDesign } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport { config } from \"../../../config\";\nimport { pathValidators } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\n\nexport function Login(): JSX.Element {\n  return (\n    <LoginDesign\n      pathAfterLogin={pathValidators}\n      appName=\"Staking service\"\n      appLogo={cosmWasmLogo}\n      config={config}\n    />\n  );\n}\n","import { OperationResult as OperationResultDesign } from \"@cosmicdapp/design\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { pathValidators } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\n\nfunction goToValidators(history: History) {\n  history.push(pathValidators);\n}\n\nexport function OperationResult(): JSX.Element {\n  return (\n    <OperationResultDesign\n      defaultButtonAction={goToValidators}\n      successIcon={successIcon}\n      failIcon={failIcon}\n    />\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport const StakePerToken = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n\n  span + span {\n    margin-left: var(--s2);\n\n    font-family: var(--ff-montserrat);\n    font-weight: bolder;\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & > * + * {\n    margin-left: var(--s0);\n  }\n\n  .ant-typography {\n    flex-grow: 0;\n    flex-shrink: 1;\n    text-align: left;\n  }\n\n  .ant-form-item {\n    flex-grow: 1;\n    flex-shrink: 0;\n    max-width: 13.5rem;\n  }\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n`;\n","import { useSdk } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { ValidatorData } from \"..\";\nimport { config } from \"../../../../config\";\nimport { FormField, FormStack, StakePerToken } from \"./style\";\n\nconst { Text } = Typography;\n\nexport interface FormBuySharesFields {\n  readonly amount: string;\n}\n\ninterface FormBuySharesProps {\n  readonly validatorData: ValidatorData;\n  readonly submitBuyShares: (values: FormBuySharesFields) => Promise<void>;\n}\n\nexport function FormBuyShares({ validatorData, submitBuyShares }: FormBuySharesProps): JSX.Element {\n  const { balance } = useSdk();\n\n  const stakingBalance: Coin = balance.find((coin) => coin.denom === config.stakingToken);\n  const stakingDecimals = config.coinMap[config.stakingToken].fractionalDigits;\n  const maxAmount = stakingBalance\n    ? Decimal.fromAtomics(stakingBalance.amount, stakingDecimals).toFloatApproximation()\n    : 0;\n\n  const buySharesValidationSchema = Yup.object().shape({\n    amount: Yup.number()\n      .required(\"An amount is required\")\n      .positive(\"Amount should be positive\")\n      .max(maxAmount),\n  });\n\n  return (\n    <Formik\n      initialValues={{ amount: \"\" }}\n      onSubmit={submitBuyShares}\n      validationSchema={buySharesValidationSchema}\n    >\n      {(formikProps) => {\n        const formDisabled = !(formikProps.isValid && formikProps.dirty);\n\n        return (\n          <Form>\n            <FormStack>\n              <StakePerToken>\n                <Text>Stake/Token:</Text>\n                <Text>{validatorData?.investment.nominal_value}</Text>\n              </StakePerToken>\n              <FormField>\n                <Text>{config.coinMap[config.stakingToken].denom}</Text>\n                <FormItem name=\"amount\">\n                  <Input name=\"amount\" placeholder=\"Enter amount\" />\n                </FormItem>\n              </FormField>\n              <Button type=\"primary\" onClick={formikProps.submitForm} disabled={formDisabled}>\n                Buy\n              </Button>\n            </FormStack>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s6);\n  }\n`;\n\nexport const HeaderTitleStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  h1.ant-typography,\n  h2.ant-typography {\n    margin: 0;\n    margin-top: var(--gap);\n  }\n\n  h1 {\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n\n  h2 {\n    font-size: var(--s5);\n    line-height: var(--s5);\n  }\n`;\n\nexport const NavCenter = styled(Center)`\n  --max-width: none;\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n","import { Loading, PageLayout } from \"@cosmicdapp/design\";\nimport {\n  CW20,\n  CW20Instance,\n  displayAmountToNative,\n  getErrorFromStackTrace,\n  Investment,\n  TokenInfo,\n  useSdk,\n} from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { pathOperationResult, pathPurchase, pathValidator, pathWallet } from \"../../paths\";\nimport { FormBuyShares, FormBuySharesFields } from \"./FormBuyShares\";\nimport { HeaderTitleStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nexport interface ValidatorData {\n  readonly tokenInfo: TokenInfo;\n  readonly investment: Investment;\n}\n\ninterface PurchaseParams {\n  readonly validatorAddress: string;\n}\n\nexport function Purchase(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { validatorAddress } = useParams<PurchaseParams>();\n  const { getClient, address, refreshBalance } = useSdk();\n\n  const [cw20Contract, setCw20Contract] = useState<CW20Instance>();\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateCw20Contract() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n      setCw20Contract(cw20Contract);\n    })();\n  }, [getClient, validatorAddress]);\n\n  useEffect(() => {\n    if (!cw20Contract) return;\n\n    (async function updateValidatorData() {\n      const [tokenInfo, investment] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.investment(),\n      ]);\n\n      setValidatorData({ tokenInfo, investment });\n    })();\n  }, [cw20Contract]);\n\n  async function submitBuyShares({ amount }: FormBuySharesFields) {\n    setLoading(true);\n\n    const nativeAmountString = displayAmountToNative(amount, config.coinMap, config.stakingToken);\n    const nativeAmountCoin: Coin = { amount: nativeAmountString, denom: config.stakingToken };\n\n    try {\n      const txHash = await cw20Contract.bond(address, nativeAmountCoin);\n      if (!txHash) {\n        throw Error(\"Purchase failed\");\n      }\n\n      refreshBalance();\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: true,\n          message: `${amount} ${config.stakingToken} successfully bonded`,\n          customButtonText: \"Wallet\",\n          customButtonActionPath: `${pathWallet}/${validatorAddress}`,\n        },\n      });\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Bond transaction failed:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: `${pathPurchase}/${validatorAddress}`,\n        },\n      });\n    }\n  }\n\n  return (\n    (loading && <Loading loadingText={`Bonding...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <HeaderTitleStack>\n            <HeaderBackMenu path={`${pathValidator}/${validatorAddress}`} />\n            <Title>Purchase</Title>\n            <Title level={2}>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n          </HeaderTitleStack>\n          <FormBuyShares validatorData={validatorData} submitBuyShares={submitBuyShares} />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  width: 100%;\n\n  & > * {\n    --gap: var(--s5);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, Investment, TokenInfo, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { DataList } from \"../../components/DataList\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { pathValidator } from \"../../paths\";\nimport { MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface ValidatorData {\n  readonly tokenInfo: TokenInfo;\n  readonly investment: Investment;\n}\n\nfunction getValidatorDataMap(validatorData?: ValidatorData) {\n  if (!validatorData) return {};\n\n  const totalSupply = Decimal.fromAtomics(\n    validatorData.tokenInfo.total_supply,\n    validatorData.tokenInfo.decimals,\n  ).toString();\n  const commissionPercent = `${parseFloat(validatorData.investment.exit_tax)} %`;\n\n  return { \"Total Supply\": totalSupply, Commission: commissionPercent };\n}\n\ninterface ValidatorDetailParams {\n  readonly validatorAddress: string;\n}\n\nexport function ValidatorDetail(): JSX.Element {\n  const { validatorAddress } = useParams<ValidatorDetailParams>();\n  const { getClient } = useSdk();\n\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateValidatorData() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [tokenInfo, investment] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.investment(),\n      ]);\n\n      setValidatorData({ tokenInfo, investment });\n    })();\n  }, [getClient, validatorAddress]);\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderBackMenu path={`${pathValidator}/${validatorAddress}`} />\n        <Title>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n        <DataList {...getValidatorDataMap(validatorData)} />\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s5);\n  }\n`;\n\nexport const TitleNavStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const NavCenter = styled(Center)`\n  --max-width: none;\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, Investment, nativeCoinToDisplay, TokenInfo, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { DataList } from \"../../components/DataList\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport {\n  pathClaims,\n  pathDetail,\n  pathPurchase,\n  pathValidator,\n  pathValidators,\n  pathWallet,\n  pathWithdraw,\n} from \"../../paths\";\nimport { ButtonStack, MainStack, NavCenter, TitleNavStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface ValidatorData {\n  readonly tokenInfo: TokenInfo;\n  readonly investment: Investment;\n}\n\nfunction getValidatorDataMap(validatorData: ValidatorData) {\n  if (!validatorData) return {};\n\n  const totalSupply = Decimal.fromAtomics(\n    validatorData.tokenInfo.total_supply,\n    validatorData.tokenInfo.decimals,\n  ).toString();\n  const stakedCoin = validatorData.investment.staked_tokens;\n  const stakedAmount = nativeCoinToDisplay(stakedCoin, config.coinMap).amount;\n  const stakePerToken = validatorData.investment.nominal_value;\n\n  return { \"Total Supply\": totalSupply, \"Staked Tokens\": stakedAmount, \"Stake/Token\": stakePerToken };\n}\n\ninterface ValidatorHomeParams {\n  readonly validatorAddress: string;\n}\n\nexport function ValidatorHome(): JSX.Element {\n  const history = useHistory();\n  const { validatorAddress } = useParams<ValidatorHomeParams>();\n  const { getClient } = useSdk();\n\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateValidatorData() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [tokenInfo, investment] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.investment(),\n      ]);\n\n      setValidatorData({ tokenInfo, investment });\n    })();\n  }, [getClient, validatorAddress]);\n\n  function goToWallet() {\n    history.push(`${pathWallet}/${validatorAddress}`);\n  }\n\n  function goToValidatorDetail() {\n    history.push(`${pathValidator}/${validatorAddress}${pathDetail}`);\n  }\n\n  function goToPurchase() {\n    history.push(`${pathPurchase}/${validatorAddress}`);\n  }\n\n  function goToWithdraw() {\n    history.push(`${pathWithdraw}/${validatorAddress}`);\n  }\n\n  function goToClaims() {\n    history.push(`${pathClaims}/${validatorAddress}`);\n  }\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderBackMenu path={pathValidators} />\n        <TitleNavStack>\n          <Title>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n          <NavCenter>\n            <ButtonStack>\n              <Button type=\"primary\" onClick={goToWallet}>\n                Wallet\n              </Button>\n              <Button type=\"primary\" onClick={goToValidatorDetail}>\n                View Details\n              </Button>\n            </ButtonStack>\n          </NavCenter>\n        </TitleNavStack>\n        <DataList {...getValidatorDataMap(validatorData)} />\n        <ButtonStack>\n          <Button type=\"primary\" onClick={goToPurchase}>\n            Buy\n          </Button>\n          <Button type=\"primary\" onClick={goToWithdraw}>\n            Withdraw\n          </Button>\n          <Button type=\"primary\" onClick={goToClaims}>\n            Claims\n          </Button>\n        </ButtonStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  width: 100%;\n\n  & > * {\n    --gap: var(--s5);\n  }\n`;\n\nexport const MenuHeader = styled.header`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const ValidatorStack = styled(Stack)`\n  & > * {\n    --gap: 0;\n  }\n`;\n\nexport const ValidatorItem = styled.div`\n  --v-padding: var(--s-2);\n  --border-size: 1px;\n\n  padding-top: var(--v-padding);\n  padding-bottom: var(--v-padding);\n\n  padding-left: var(--s4);\n  margin-left: calc(-1 * var(--s4));\n  padding-right: var(--s4);\n  margin-right: calc(-1 * var(--s4));\n\n  margin-bottom: calc(-1 * var(--border-size));\n\n  cursor: pointer;\n\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: var(--color-primary);\n\n    & * {\n      color: white;\n    }\n  }\n\n  &:first-child > * {\n    --border-size: 0;\n  }\n\n  & > * {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n\n    span:first-child {\n      font-family: var(--ff-iceland);\n      font-size: var(--s2);\n    }\n\n    span:not(:first-child) {\n      font-weight: bolder;\n      font-size: var(--s-1);\n    }\n  }\n`;\n\nexport const BorderContainer = styled.div`\n  border-top: var(--border-size) solid var(--color-primary);\n  padding-top: var(--v-padding);\n  margin-top: calc(-1 * var(--v-padding));\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, CW20Instance, useContracts, useSdk } from \"@cosmicdapp/logic\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { AccountMenu } from \"../../components/AccountMenu\";\nimport { pathValidator } from \"../../paths\";\nimport { BorderContainer, MainStack, MenuHeader, ValidatorItem, ValidatorStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface ValidatorData {\n  readonly name: string;\n  readonly address: string;\n}\n\nasync function getValidatorData(contract: CW20Instance): Promise<ValidatorData> {\n  const { name } = await contract.tokenInfo();\n  const address = contract.contractAddress;\n\n  return { name, address };\n}\n\nfunction validatorCompare(a: ValidatorData, b: ValidatorData) {\n  if (a.name < b.name) {\n    return -1;\n  }\n  if (a.name > b.name) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function Validators(): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { contracts: cw20Contracts, addContract } = useContracts();\n\n  const [validatorsData, setValidatorsData] = useState<ValidatorData[]>([]);\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateContracts() {\n      const contracts = await client.getContracts(config.codeId);\n\n      for (const contract of contracts) {\n        const newCw20contract = CW20(client).use(contract.address);\n        addContract(newCw20contract);\n      }\n    })();\n  }, [getClient, addContract]);\n\n  useEffect(() => {\n    const validatorsDataPromises = cw20Contracts.map(getValidatorData);\n\n    (async function updateValidatorsData() {\n      const validatorsData = await Promise.all(validatorsDataPromises);\n      setValidatorsData(validatorsData.sort(validatorCompare));\n    })();\n  }, [cw20Contracts]);\n\n  function goToValidator(address: string) {\n    history.push(`${pathValidator}/${address}`);\n  }\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <MenuHeader>\n          <AccountMenu />\n        </MenuHeader>\n        <Title>Validators</Title>\n        <ValidatorStack>\n          {validatorsData.map((validator) => (\n            <ValidatorItem key={validator.name} onClick={() => goToValidator(validator.address)}>\n              <BorderContainer>\n                <Text>{validator.name}</Text>\n              </BorderContainer>\n            </ValidatorItem>\n          ))}\n        </ValidatorStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s5);\n  }\n`;\n\nexport const TitleNavStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const NavCenter = styled(Center)`\n  --max-width: none;\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, Investment, TokenInfo, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DataList } from \"../../components/DataList\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { pathClaims, pathDetail, pathPurchase, pathValidator, pathWithdraw } from \"../../paths\";\nimport { ButtonStack, MainStack, NavCenter, TitleNavStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface ValidatorData {\n  readonly tokenInfo: TokenInfo;\n  readonly investment: Investment;\n  readonly balance: string;\n  readonly numClaims: number;\n}\n\nfunction getValidatorDataMap(validatorData: ValidatorData) {\n  if (!validatorData) return {};\n\n  const stakePerToken = validatorData.investment.nominal_value;\n  const balance = Decimal.fromAtomics(validatorData.balance, validatorData.tokenInfo.decimals).toString();\n  const claims = validatorData.numClaims.toString();\n\n  return { \"Stake/Token\": stakePerToken, Balance: balance, Claims: claims };\n}\n\ninterface WalletParams {\n  readonly validatorAddress: string;\n}\n\nexport function Wallet(): JSX.Element {\n  const history = useHistory();\n  const { validatorAddress } = useParams<WalletParams>();\n  const { getClient, address } = useSdk();\n\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateValidatorData() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [tokenInfo, investment, balance, { claims }] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.investment(),\n        cw20Contract.balance(address),\n        cw20Contract.claims(address),\n      ]);\n\n      setValidatorData({ tokenInfo, investment, balance, numClaims: claims.length });\n    })();\n  }, [getClient, validatorAddress, address]);\n\n  function goToValidatorDetail() {\n    history.push(`${pathValidator}/${validatorAddress}${pathDetail}`);\n  }\n\n  function goToPurchase() {\n    history.push(`${pathPurchase}/${validatorAddress}`);\n  }\n\n  function goToWithdraw() {\n    history.push(`${pathWithdraw}/${validatorAddress}`);\n  }\n\n  function goToClaims() {\n    history.push(`${pathClaims}/${validatorAddress}`);\n  }\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderBackMenu path={`${pathValidator}/${validatorAddress}`} />\n        <TitleNavStack>\n          <Title>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n          <NavCenter>\n            <Button type=\"primary\" onClick={goToValidatorDetail}>\n              View Details\n            </Button>\n          </NavCenter>\n        </TitleNavStack>\n        <DataList {...getValidatorDataMap(validatorData)} />\n        <ButtonStack>\n          <Button type=\"primary\" onClick={goToPurchase}>\n            Buy\n          </Button>\n          <Button type=\"primary\" onClick={goToWithdraw}>\n            Withdraw\n          </Button>\n          <Button type=\"primary\" onClick={goToClaims}>\n            Claims\n          </Button>\n        </ButtonStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & > * + * {\n    margin-left: var(--s0);\n  }\n\n  .ant-typography {\n    flex-grow: 0;\n    flex-shrink: 1;\n    text-align: left;\n  }\n\n  .ant-typography + .ant-typography {\n    flex-grow: 1;\n    flex-shrink: 0;\n    max-width: 13.5rem;\n    text-align: right;\n\n    font-family: var(--ff-montserrat);\n    font-weight: bolder;\n    font-size: var(--s4);\n    line-height: var(--s4);\n  }\n\n  .ant-form-item {\n    flex-grow: 1;\n    flex-shrink: 0;\n    max-width: 13.5rem;\n  }\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n`;\n","import { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { ValidatorData } from \"..\";\nimport { FormField, FormStack } from \"./style\";\n\nconst { Text } = Typography;\n\nexport interface FormWithdrawBalanceFields {\n  readonly amount: string;\n}\n\ninterface FormWithdrawBalanceProps {\n  readonly validatorData: ValidatorData;\n  readonly submitWithdrawBalance: (values: FormWithdrawBalanceFields) => Promise<void>;\n}\n\nexport function FormWithdrawBalance({\n  validatorData,\n  submitWithdrawBalance,\n}: FormWithdrawBalanceProps): JSX.Element {\n  const balanceDecimal = validatorData\n    ? Decimal.fromAtomics(validatorData.balance, validatorData.tokenInfo.decimals)\n    : Decimal.fromUserInput(\"0\", 0);\n\n  const maxAmount = balanceDecimal.toFloatApproximation();\n\n  const withdrawBalanceValidationSchema = Yup.object().shape({\n    amount: Yup.number()\n      .required(\"An amount is required\")\n      .positive(\"Amount should be positive\")\n      .max(maxAmount),\n  });\n\n  return (\n    <Formik\n      initialValues={{ amount: \"\" }}\n      onSubmit={submitWithdrawBalance}\n      validationSchema={withdrawBalanceValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormField>\n              <Text>Balance</Text>\n              <Text>{balanceDecimal.toString()}</Text>\n            </FormField>\n            <FormField>\n              <Text>Withdraw</Text>\n              <FormItem name=\"amount\">\n                <Input name=\"amount\" placeholder=\"Enter amount\" />\n              </FormItem>\n            </FormField>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Withdraw\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport { Typography } from \"antd\";\nimport styled from \"styled-components\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s6);\n  }\n`;\n\nexport const HeaderTitleStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  h1.ant-typography,\n  h2.ant-typography {\n    margin: 0;\n    margin-top: var(--gap);\n  }\n\n  h1 {\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n\n  h2 {\n    font-size: var(--s5);\n    line-height: var(--s5);\n  }\n`;\n\nexport const NavCenter = styled(Center)`\n  --max-width: none;\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n\nexport const ConfirmStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const ConfirmText = styled(Text)`\n  font-size: var(--s-1);\n  color: var(--color-blue);\n`;\n","import { Loading, PageLayout } from \"@cosmicdapp/design\";\nimport {\n  CW20,\n  CW20Instance,\n  displayAmountToNative,\n  getErrorFromStackTrace,\n  TokenInfo,\n  useSdk,\n} from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { pathOperationResult, pathValidator, pathWallet, pathWithdraw } from \"../../paths\";\nimport confirmIcon from \"./assets/confirmIcon.svg\";\nimport { FormWithdrawBalance, FormWithdrawBalanceFields } from \"./FormWithdrawBalance\";\nimport { ConfirmStack, ConfirmText, HeaderTitleStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nexport interface ValidatorData {\n  readonly tokenInfo: TokenInfo;\n  readonly balance: string;\n}\n\nenum View {\n  Form = \"FORM\",\n  Confirm = \"CONFIRM\",\n  Loading = \"LOADING\",\n}\n\ninterface WithdrawParams {\n  readonly validatorAddress: string;\n}\n\nexport function Withdraw(): JSX.Element {\n  const [view, setView] = useState(View.Form);\n\n  const history = useHistory();\n  const { validatorAddress } = useParams<WithdrawParams>();\n  const { getClient, address, refreshBalance } = useSdk();\n\n  const [cw20Contract, setCw20Contract] = useState<CW20Instance>();\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n  const [amount, setAmount] = useState(\"0\");\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateCw20Contract() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n      setCw20Contract(cw20Contract);\n    })();\n  }, [getClient, validatorAddress]);\n\n  useEffect(() => {\n    if (!cw20Contract) return;\n\n    (async function updateValidatorData() {\n      const [tokenInfo, balance] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.balance(address),\n      ]);\n\n      setValidatorData({ tokenInfo, balance });\n    })();\n  }, [cw20Contract, address]);\n\n  async function submitWithdrawBalance({ amount }: FormWithdrawBalanceFields) {\n    setAmount(amount);\n    setView(View.Confirm);\n  }\n\n  async function acceptConfirm() {\n    setView(View.Loading);\n\n    const nativeAmountString = displayAmountToNative(amount, config.coinMap, config.stakingToken);\n\n    try {\n      const txHash = await cw20Contract.unbond(address, nativeAmountString);\n      if (!txHash) {\n        throw Error(\"Withdrawal failed\");\n      }\n\n      refreshBalance();\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: true,\n          message: `${amount} ${config.stakingToken} successfully unbonded`,\n          customButtonText: \"Wallet\",\n          customButtonActionPath: `${pathWallet}/${validatorAddress}`,\n        },\n      });\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Unbond transaction failed:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: `${pathWithdraw}/${validatorAddress}`,\n        },\n      });\n    }\n  }\n\n  function declineConfirm() {\n    setAmount(\"0\");\n    setView(View.Form);\n  }\n\n  function renderForm() {\n    return (\n      <PageLayout>\n        <MainStack>\n          <HeaderTitleStack>\n            <HeaderBackMenu path={`${pathValidator}/${validatorAddress}`} />\n            <Title>Withdraw</Title>\n            <Title level={2}>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n          </HeaderTitleStack>\n          <FormWithdrawBalance validatorData={validatorData} submitWithdrawBalance={submitWithdrawBalance} />\n        </MainStack>\n      </PageLayout>\n    );\n  }\n\n  function renderConfirm() {\n    return (\n      <PageLayout>\n        <ConfirmStack>\n          <img src={confirmIcon} alt=\"Confirm icon\" />\n          <ConfirmText>Your tokens could take up to 3 weeks to be withdrawn...</ConfirmText>\n          <Button type=\"primary\" onClick={acceptConfirm}>\n            Accept\n          </Button>\n          <Button type=\"primary\" onClick={declineConfirm}>\n            Decline\n          </Button>\n        </ConfirmStack>\n      </PageLayout>\n    );\n  }\n\n  function renderLoading() {\n    return <Loading loadingText={`Withdrawing...`} />;\n  }\n\n  switch (view) {\n    case View.Form:\n      return renderForm();\n    case View.Confirm:\n      return renderConfirm();\n    case View.Loading:\n      return renderLoading();\n    default:\n      return renderForm();\n  }\n}\n","import { GlobalStyle } from \"@cosmicdapp/design\";\nimport { ContractsProvider, ErrorProvider, ProtectedSwitch, SdkProvider } from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport {\n  pathClaims,\n  pathDetail,\n  pathLogin,\n  pathOperationResult,\n  pathPurchase,\n  pathValidator,\n  pathValidators,\n  pathWallet,\n  pathWithdraw,\n} from \"./paths\";\nimport { Claims } from \"./routes/Claims\";\nimport { Login } from \"./routes/Login\";\nimport { OperationResult } from \"./routes/OperationResult\";\nimport { Purchase } from \"./routes/Purchase\";\nimport { ValidatorDetail } from \"./routes/ValidatorDetail\";\nimport { ValidatorHome } from \"./routes/ValidatorHome\";\nimport { Validators } from \"./routes/Validators\";\nimport { Wallet } from \"./routes/Wallet\";\nimport { Withdraw } from \"./routes/Withdraw\";\n\nexport function App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <SdkProvider config={config}>\n        <ContractsProvider>\n          <GlobalStyle />\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path={pathLogin} component={Login} />\n              <ProtectedSwitch authPath={pathLogin}>\n                <Route exact path={pathValidators} component={Validators} />\n                <Route exact path={`${pathValidator}/:validatorAddress`} component={ValidatorHome} />\n                <Route\n                  exact\n                  path={`${pathValidator}/:validatorAddress${pathDetail}`}\n                  component={ValidatorDetail}\n                />\n                <Route exact path={`${pathWallet}/:validatorAddress`} component={Wallet} />\n                <Route exact path={`${pathPurchase}/:validatorAddress`} component={Purchase} />\n                <Route exact path={`${pathWithdraw}/:validatorAddress`} component={Withdraw} />\n                <Route exact path={`${pathClaims}/:validatorAddress`} component={Claims} />\n                <Route exact path={pathOperationResult} component={OperationResult} />\n              </ProtectedSwitch>\n            </Switch>\n          </Router>\n        </ContractsProvider>\n      </SdkProvider>\n    </ErrorProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}