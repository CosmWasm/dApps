{"version":3,"sources":["App/assets/backArrow.svg","App/components/AccountMenu/assets/avatar.svg","App/components/AccountMenu/assets/copy.svg","App/components/AccountMenu/assets/cross.svg","App/components/AccountMenu/assets/hamburger.svg","App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","../../src/service/error.tsx","../../src/service/sdk.ts","../../src/service/wallet.tsx","../../src/service/account.tsx","../../src/service/contracts.tsx","../../src/service/cw20.tsx","../../src/service/ProtectedSwitch.tsx","../../src/utils/currency.ts","../../src/utils/errors.ts","../../src/components/layout/Center/component.tsx","../../src/components/layout/Center/style.ts","../../src/components/layout/Stack/component.tsx","../../src/components/layout/Stack/style.ts","../../src/components/layout/PageLayout/component.tsx","../../src/components/layout/PageLayout/style.ts","../../src/components/logic/BackButton/component.tsx","../../src/components/logic/BackButton/style.ts","../../src/components/logic/Loading/style.ts","../../src/components/logic/Loading/index.tsx","../../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/components/logic/Login/style.ts","../../src/components/logic/Login/index.tsx","../../src/components/logic/OperationResult/style.ts","../../src/components/logic/OperationResult/index.tsx","../../src/components/logic/YourAccount/index.tsx","../../src/theme/GlobalStyle/GlobalAntOverride.ts","../../src/theme/GlobalStyle/GlobalColors.ts","../../src/theme/GlobalStyle/GlobalFonts.ts","../../src/theme/GlobalStyle/GlobalReset.ts","../../src/theme/GlobalStyle/GlobalSpacing.ts","../../src/theme/GlobalStyle/index.tsx","config.ts","App/components/DataList/style.ts","App/components/DataList/index.tsx","App/components/AccountMenu/style.ts","App/components/AccountMenu/index.tsx","App/components/HeaderBackMenu/style.ts","App/components/HeaderBackMenu/index.tsx","App/routes/Claims/style.ts","App/routes/Claims/index.tsx","App/routes/Login/index.tsx","App/paths.ts","App/routes/OperationResult/index.tsx","App/routes/Purchase/FormBuyShares/style.ts","App/routes/Purchase/FormBuyShares/index.tsx","App/routes/Purchase/style.ts","App/routes/Purchase/index.tsx","App/routes/ValidatorDetail/style.ts","App/routes/ValidatorDetail/index.tsx","App/routes/ValidatorHome/style.ts","App/routes/ValidatorHome/index.tsx","App/routes/Validators/style.ts","App/routes/Validators/index.tsx","App/routes/Wallet/style.ts","App/routes/Wallet/index.tsx","App/routes/Withdraw/FormWithdrawBalance/style.ts","App/routes/Withdraw/FormWithdrawBalance/index.tsx","App/routes/Withdraw/style.ts","App/routes/Withdraw/index.tsx","App/index.tsx","index.tsx"],"names":["module","exports","defaultContext","setError","clearError","ErrorContext","React","useError","ErrorProvider","children","error","context","value","loadLedgerWallet","TransportWebUSB","ledgerTransport","hdPaths","makeCosmoshubPath","prefix","addressPrefix","e","loadOrCreateWallet","mnemonic","key","loaded","localStorage","generated","Bip39","Random","loadOrCreateMnemonic","hdPath","Secp256k1HdWallet","initialized","address","init","clear","getClient","Error","getStakingClient","CosmWasmContext","useSdk","SdkProvider","config","contextWithInit","signer","firstAddress","gasPrice","GasPrice","upload","exec","migrate","send","changeAdmin","createClient","client","apiUrl","stakingClient","setValue","faucetUrl","acct","fetch","method","headers","body","JSON","ticker","useState","refreshAccount","AccountContext","useAccount","AccountProvider","sdk","account","contracts","addContract","ContractsContext","ContractsProvider","setContracts","contract","newContract","CW20","use","contractAddress","balance","result","allowance","owner","spender","allAllowances","all_allowances","start_after","limit","allAccounts","all_accounts","accounts","tokenInfo","token_info","investment","claims","minter","mint","recipient","amount","transfer","burn","increaseAllowance","increase_allowance","decreaseAllowance","decrease_allowance","transferFrom","transfer_from","bond","unbond","ProtectedSwitch","authPath","location","to","pathname","state","redirectPathname","redirectState","undefined","displayAmountToNative","amountToDisplay","coinMap","nativeDenom","fractionalDigits","Decimal","getErrorFromStackTrace","stackTrace","stringStackTrace","match","Center","tag","Tag","props","StyledCenter","styled","Stack","StyledStack","PageLayout","StyledPageLayout","BackButton","icon","path","history","useHistory","goBack","src","alt","onClick","StyledBackButton","StyledSpin","spinIndicator","style","fontSize","spin","Loading","tip","loadingText","indicator","Symbol","Text","Typography","MainStack","WelcomeStack","LightText","ErrorText","Title","disableLedgerLogin","anyNavigator","Login","loadWallet","setInitializing","recover","console","pathAfterLogin","appName","appLogo","initializing","useEffect","level","type","initBrowser","disabled","initLedger","ResultText","OperationResult","defaultButtonAction","successIcon","failIcon","success","message","customButtonText","customButtonActionPath","customButtonActionState","buttonText","buttonAction","getResultContent","chosenButtonText","chosenButtonAction","GlobalAntOverride","createGlobalStyle","GlobalColors","GlobalFonts","GlobalReset","GlobalSpacing","GlobalStyle","httpUrl","feeToken","stakingToken","faucetToken","codeId","ushell","denom","ureef","ListStack","DataRow","div","KeyText","ValueText","DataList","dataMap","Object","entries","map","index","Fragment","OpenMenuButton","img","CloseMenuButton","MenuCenter","MenuStack","CloseAccountStack","AvatarName","NameText","AddressCopyBox","AddressText","AddressCopy","AccountMenu","name","open","setOpen","accountName","openMenuButton","closeMenuButton","avatarIcon","copyIcon","copyToClipboard","Header","header","HeaderBackMenu","backArrowIcon","HeaderTitleStack","ButtonStack","mockClaims","Date","Tokens","Atom","Claims","claimIndex","setClaimIndex","showClaimDetail","disableNext","length","disablePrevious","claim","day","month","split","getClaimLabel","cosmWasmLogo","goToValidators","push","FormStack","StakePerToken","FormField","FormBuyShares","validatorData","initialValues","onSubmit","async","nativeAmountCoin","cw20Contract","formikProps","formDisabled","isValid","dirty","nominal_value","placeholder","submitForm","Purchase","validatorAddress","useParams","setValidatorData","getContract","Promise","all","ValidatorDetail","fromAtomics","total_supply","decimals","toString","Commission","parseFloat","exit_tax","getValidatorDataMap","TitleNavStack","NavCenter","coin","coinToDisplay","nativeCoinToDisplay","staked_tokens","ValidatorHome","ValidatorStack","ValidatorItem","BorderContainer","getValidatorData","validatorCompare","a","b","Validators","cw20Contracts","validatorsData","setValidatorsData","getContracts","then","forEach","newCw20contract","validatorsDataPromises","sort","validator","goToValidator","Wallet","Balance","FormWithdrawBalance","nativeAmountString","Withdraw","App","basename","process","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a67505b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.e6ceb267.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.173891ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/cross.ccb4620e.svg\";","module.exports = __webpack_public_path__ + \"static/media/hamburger.87d19430.svg\";","module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n","import { CosmWasmFeeTable, SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport {\n  GasLimits,\n  GasPrice,\n  LcdClient,\n  makeCosmoshubPath,\n  OfflineSigner,\n  Secp256k1HdWallet,\n  setupStakingExtension,\n  StakingExtension,\n} from \"@cosmjs/launchpad\";\nimport { LedgerSigner } from \"@cosmjs/launchpad-ledger\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { AppConfig } from \"../config\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport type WalletLoader = (addressPrefix?: string) => Promise<OfflineSigner>;\n\nexport async function loadOrCreateWallet(addressPrefix?: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\nexport async function loadLedgerWallet(addressPrefix?: string): Promise<OfflineSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const gasPrice = GasPrice.fromString(`${config.gasPrice}${config.feeToken}`);\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\n    upload: 1500000,\n    init: 600000,\n    exec: 200000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000,\n  };\n\n  return new SigningCosmWasmClient(config.httpUrl, firstAddress, signer, gasPrice, gasLimits);\n}\n\nexport function createStakingClient(apiUrl: string): LcdClient & StakingExtension {\n  return LcdClient.withExtensions({ apiUrl }, setupStakingExtension);\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { LcdClient, OfflineSigner, StakingExtension } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { createClient, createStakingClient } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly address: string;\n  readonly init: (signer: OfflineSigner) => Promise<void>;\n  readonly clear: () => void;\n  readonly getClient: () => SigningCosmWasmClient;\n  readonly getStakingClient: () => LcdClient & StakingExtension;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  address: \"\",\n  init: async () => {},\n  clear: () => {},\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n  getStakingClient: (): LcdClient & StakingExtension => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface SdkProviderProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly config: AppConfig;\n}\n\nexport function SdkProvider({ config, children }: SdkProviderProps): JSX.Element {\n  const contextWithInit = { ...defaultContext, init };\n  const [value, setValue] = useState<CosmWasmContextType>(contextWithInit);\n\n  function clear() {\n    setValue({ ...contextWithInit });\n  }\n\n  async function init(signer: OfflineSigner) {\n    const client = await createClient(config, signer);\n    const address = client.senderAddress;\n\n    // load from faucet if needed\n    if (config.faucetUrl) {\n      const acct = await client.getAccount();\n      if (!acct?.balance?.length) {\n        await fetch(config.faucetUrl, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ ticker: config.faucetToken, address }),\n        });\n      }\n    }\n\n    const stakingClient = createStakingClient(config.httpUrl);\n\n    setValue({\n      initialized: true,\n      address,\n      init: async () => {},\n      clear,\n      getClient: () => client,\n      getStakingClient: () => stakingClient,\n    });\n  }\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n","import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n","import React, { useState } from \"react\";\nimport { CW20Instance } from \"./cw20\";\n\ninterface ContractsContextType {\n  contracts: CW20Instance[];\n  readonly addContract: (newContract: CW20Instance) => void;\n}\n\nconst defaultContext: ContractsContextType = {\n  contracts: [],\n  addContract: function () {\n    return;\n  },\n};\n\nconst ContractsContext = React.createContext<ContractsContextType>(defaultContext);\n\nexport const useContracts = (): ContractsContextType => React.useContext(ContractsContext);\n\nexport function ContractsProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [contracts, setContracts] = useState<CW20Instance[]>(defaultContext.contracts);\n\n  function addContract(newContract: CW20Instance) {\n    setContracts((contracts) => {\n      const notPresent = !contracts.find(\n        (contract) => contract.contractAddress === newContract.contractAddress,\n      );\n\n      if (notPresent) return [...contracts, newContract];\n      return contracts;\n    });\n  }\n\n  const value: ContractsContextType = { contracts, addContract };\n\n  return <ContractsContext.Provider value={value}>{children}</ContractsContext.Provider>;\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Coin } from \"@cosmjs/launchpad\";\n\nexport type Expiration =\n  | { readonly at_height: number }\n  | { readonly at_time: number }\n  | { readonly never: unknown };\n\nexport interface AllowanceResponse {\n  readonly allowance: string; // integer as string\n  readonly expires: Expiration;\n}\n\nexport interface AllowanceInfo {\n  readonly allowance: string; // integer as string\n  readonly spender: string; // bech32 address\n  readonly expires: Expiration;\n}\n\nexport interface AllAllowancesResponse {\n  readonly allowances: readonly AllowanceInfo[];\n}\n\nexport interface TokenInfo {\n  readonly name: string;\n  readonly symbol: string;\n  readonly decimals: number;\n  readonly total_supply: string;\n}\n\nexport interface Investment {\n  readonly exit_tax: string;\n  readonly min_withdrawal: string;\n  readonly nominal_value: string;\n  readonly owner: string;\n  readonly staked_tokens: Coin;\n  readonly token_supply: string;\n  readonly validator: string;\n}\n\nexport interface Claims {\n  readonly claims: number;\n}\n\nexport interface AllAccountsResponse {\n  // list of bech32 address that have a balance\n  readonly accounts: readonly string[];\n}\n\nexport interface CW20Instance {\n  readonly contractAddress: string;\n\n  // queries\n  balance: (address?: string) => Promise<string>;\n  allowance: (owner: string, spender: string) => Promise<AllowanceResponse>;\n  allAllowances: (owner: string, startAfter?: string, limit?: number) => Promise<AllAllowancesResponse>;\n  allAccounts: (startAfter?: string, limit?: number) => Promise<readonly string[]>;\n  tokenInfo: () => Promise<TokenInfo>;\n  investment: () => Promise<Investment>;\n  claims: (address: string) => Promise<Claims>;\n  minter: () => Promise<any>;\n\n  // actions\n  mint: (recipient: string, amount: string) => Promise<string>;\n  transfer: (recipient: string, amount: string) => Promise<string>;\n  burn: (amount: string) => Promise<string>;\n  increaseAllowance: (recipient: string, amount: string) => Promise<string>;\n  decreaseAllowance: (recipient: string, amount: string) => Promise<string>;\n  transferFrom: (owner: string, recipient: string, amount: string) => Promise<string>;\n  bond: (coin: Coin) => Promise<string>;\n  unbond: (amount: string) => Promise<string>;\n}\n\nexport interface CW20Contract {\n  use: (contractAddress: string) => CW20Instance;\n}\n\nexport const CW20 = (client: SigningCosmWasmClient): CW20Contract => {\n  const use = (contractAddress: string): CW20Instance => {\n    const balance = async (account?: string): Promise<string> => {\n      const address = account || client.senderAddress;\n      const result = await client.queryContractSmart(contractAddress, { balance: { address } });\n      return result.balance;\n    };\n\n    const allowance = async (owner: string, spender: string): Promise<AllowanceResponse> => {\n      return client.queryContractSmart(contractAddress, { allowance: { owner, spender } });\n    };\n\n    const allAllowances = async (\n      owner: string,\n      startAfter?: string,\n      limit?: number,\n    ): Promise<AllAllowancesResponse> => {\n      return client.queryContractSmart(contractAddress, {\n        all_allowances: { owner, start_after: startAfter, limit },\n      });\n    };\n\n    const allAccounts = async (startAfter?: string, limit?: number): Promise<readonly string[]> => {\n      const accounts: AllAccountsResponse = await client.queryContractSmart(contractAddress, {\n        all_accounts: { start_after: startAfter, limit },\n      });\n      return accounts.accounts;\n    };\n\n    const tokenInfo = async (): Promise<TokenInfo> => {\n      return client.queryContractSmart(contractAddress, { token_info: {} });\n    };\n\n    const investment = async (): Promise<Investment> => {\n      return client.queryContractSmart(contractAddress, { investment: {} });\n    };\n\n    const claims = async (address: string): Promise<Claims> => {\n      return client.queryContractSmart(contractAddress, { claims: { address } });\n    };\n\n    const minter = async (): Promise<any> => {\n      return client.queryContractSmart(contractAddress, { minter: {} });\n    };\n\n    // mints tokens, returns transactionHash\n    const mint = async (recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { mint: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // transfers tokens, returns transactionHash\n    const transfer = async (recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { transfer: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // burns tokens, returns transactionHash\n    const burn = async (amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { burn: { amount } });\n      return result.transactionHash;\n    };\n\n    const increaseAllowance = async (spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { increase_allowance: { spender, amount } });\n      return result.transactionHash;\n    };\n\n    const decreaseAllowance = async (spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { decrease_allowance: { spender, amount } });\n      return result.transactionHash;\n    };\n\n    const transferFrom = async (owner: string, recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { transfer_from: { owner, recipient, amount } });\n      return result.transactionHash;\n    };\n\n    const bond = async (coin: Coin): Promise<string> => {\n      const result = await client.execute(contractAddress, { bond: {} }, undefined, [coin]);\n      return result.transactionHash;\n    };\n\n    const unbond = async (amount: string): Promise<string> => {\n      const result = await client.execute(contractAddress, { unbond: { amount } });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      balance,\n      allowance,\n      allAllowances,\n      allAccounts,\n      tokenInfo,\n      investment,\n      claims,\n      minter,\n      mint,\n      transfer,\n      burn,\n      increaseAllowance,\n      decreaseAllowance,\n      transferFrom,\n      bond,\n      unbond,\n    };\n  };\n  return { use };\n};\n","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useSdk } from \"./wallet\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\ninterface ProtectedSwitchProps extends SwitchProps {\n  readonly authPath: string;\n}\n\nexport function ProtectedSwitch({ authPath, children, location }: ProtectedSwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: authPath,\n        state: location ? { redirectPathname: location.pathname, redirectState: location.state } : undefined,\n      }}\n    />\n  );\n}\n","import { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport interface MappedCoin {\n  readonly denom: string;\n  readonly fractionalDigits: number;\n}\n\nexport interface CoinMap {\n  readonly [key: string]: MappedCoin;\n}\n\nexport function nativeCoinToDisplay(coin: Coin, coinMap: CoinMap): Coin {\n  if (!coinMap) return coin;\n\n  const coinToDisplay = coinMap[coin.denom];\n  if (!coinToDisplay) return coin;\n\n  const amountToDisplay = Decimal.fromAtomics(coin.amount, coinToDisplay.fractionalDigits).toString();\n\n  return { denom: coinToDisplay.denom, amount: amountToDisplay };\n}\n\n// display amount is eg \"12.0346\", return is in native tokens\n// with 6 fractional digits, this would be eg. \"12034600\"\nexport function displayAmountToNative(\n  amountToDisplay: string,\n  coinMap: CoinMap,\n  nativeDenom: string,\n): string {\n  const fractionalDigits = coinMap[nativeDenom]?.fractionalDigits;\n  if (fractionalDigits) {\n    // use https://github.com/CosmWasm/cosmjs/blob/v0.22.2/packages/math/src/decimal.ts\n    const decimalAmount = Decimal.fromUserInput(amountToDisplay, fractionalDigits);\n    return decimalAmount.atomics;\n  }\n\n  return amountToDisplay;\n}\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error || stringStackTrace;\n}\n","import * as React from \"react\";\n\nexport interface CenterProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Center({ tag: Tag = \"div\", children, ...props }: CenterProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Center } from \"./component\";\n\nexport const StyledCenter = styled(Center)`\n  box-sizing: content-box;\n\n  max-width: var(--max-width, none);\n\n  margin-left: auto;\n  margin-right: auto;\n\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from \"react\";\n\nexport interface StackProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Stack({ tag: Tag = \"div\", children, ...props }: StackProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"./component\";\n\nexport const StyledStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  & > * {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  & > * + * {\n    margin-top: var(--gap, var(--s0));\n  }\n`;\n","import { Center, CenterProps } from \"../Center\";\nimport * as React from \"react\";\n\nexport function PageLayout({ children, ...props }: CenterProps): JSX.Element {\n  return (\n    <Center tag=\"main\" {...props}>\n      {children}\n    </Center>\n  );\n}\n","import styled from \"styled-components\";\nimport { PageLayout } from \"./component\";\n\nexport const StyledPageLayout = styled(PageLayout)`\n  --max-width: 22rem;\n  --gap: var(--s8);\n\n  padding: var(--s4);\n\n  /* Reduces padding when width < 380px, but uses em for better media query support */\n  @media (max-width: 23.6875em) {\n    padding: var(--s-1) 0 var(--s-2) 0;\n  }\n\n  [alt=\"Back arrow\"] {\n    align-self: flex-start;\n  }\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport interface BackButtonProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly icon: string;\n  readonly path?: string;\n  readonly state?: any;\n}\n\nexport function BackButton({ icon, path, state, ...props }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path, state) : history.goBack;\n\n  return <img src={icon} alt=\"Back arrow\" onClick={goBack} {...props} />;\n}\n","import styled from \"styled-components\";\nimport { BackButton } from \"./component\";\n\nexport const StyledBackButton = styled(BackButton)`\n  cursor: pointer;\n`;\n","import { Spin } from \"antd\";\nimport styled from \"styled-components\";\n\nexport const StyledSpin = styled(Spin)`\n  & > span + div {\n    margin-top: var(--s2);\n  }\n`;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport * as React from \"react\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { StyledSpin } from \"./style\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nexport function Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <PageLayout>\n      <StyledSpin indicator={spinIndicator} tip={tip} />\n    </PageLayout>\n  );\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s9);\n  }\n`;\n\nexport const WelcomeStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const LightText = styled(Text)`\n  display: block;\n  font-weight: lighter;\n`;\n\nexport const ErrorText = styled(Text)`\n  color: var(--color-red);\n`;\n","import {\n  loadLedgerWallet,\n  loadOrCreateWallet,\n  RedirectLocation,\n  useAccount,\n  useError,\n  useSdk,\n  WalletLoader,\n} from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { Loading } from \"../../logic/Loading\";\nimport { ErrorText, LightText, MainStack, WelcomeStack } from \"./style\";\n\nconst { Title } = Typography;\n\nfunction disableLedgerLogin() {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n\ninterface LoginProps {\n  readonly pathAfterLogin: string;\n  readonly appName: string;\n  readonly appLogo: string;\n  readonly addressPrefix?: string;\n}\n\nexport function Login({ addressPrefix, pathAfterLogin, appName, appLogo }: LoginProps): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const { error, setError, clearError } = useError();\n  const sdk = useSdk();\n  const { refreshAccount, account } = useAccount();\n\n  const [initializing, setInitializing] = useState(false);\n\n  async function init(loadWallet: WalletLoader) {\n    setInitializing(true);\n    clearError();\n\n    try {\n      const signer = await loadWallet(addressPrefix);\n      await sdk.init(signer);\n    } catch (error) {\n      console.error(error);\n      setError(Error(error).message);\n      setInitializing(false);\n    }\n  }\n\n  async function initBrowser() {\n    await init(loadOrCreateWallet);\n  }\n\n  async function initLedger() {\n    await init(loadLedgerWallet);\n  }\n\n  useEffect(() => {\n    if (sdk.initialized) {\n      refreshAccount();\n    }\n  }, [sdk.initialized, refreshAccount]);\n\n  useEffect(() => {\n    if (account) {\n      if (state) {\n        history.push(state.redirectPathname, state.redirectState);\n      } else {\n        history.push(pathAfterLogin);\n      }\n    }\n  }, [account, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <PageLayout>\n      <MainStack>\n        <img src={appLogo} alt=\"CosmWasm logo\" />\n        <WelcomeStack>\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <LightText>Welcome to your {appName}</LightText>\n            <LightText>Select one of the following options to start:</LightText>\n          </Typography>\n          {error && <ErrorText>{error}</ErrorText>}\n          <Button type=\"primary\" onClick={initBrowser}>\n            Browser (Demo)\n          </Button>\n          <Button type=\"primary\" disabled={disableLedgerLogin()} onClick={initLedger}>\n            Ledger (Secure)\n          </Button>\n          <Button type=\"primary\" disabled>\n            Keplr (Secure)\n          </Button>\n        </WelcomeStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const ResultText = styled(Text)`\n  font-size: var(--s-1);\n\n  &[data-result=\"success\"] {\n    color: var(--color-green);\n  }\n\n  &[data-result=\"failure\"] {\n    color: var(--color-red);\n  }\n`;\n","import { Button } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { MainStack, ResultText } from \"./style\";\n\ninterface ResultContent {\n  readonly result: \"success\" | \"failure\";\n  readonly icon: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n  readonly customButtonActionState?: any;\n}\n\nexport interface OperationResultProps {\n  readonly defaultButtonAction: (history: History) => void;\n  readonly successIcon: string;\n  readonly failIcon: string;\n}\n\nexport function OperationResult({\n  defaultButtonAction,\n  successIcon,\n  failIcon,\n}: OperationResultProps): JSX.Element {\n  const history = useHistory();\n\n  const {\n    success,\n    message,\n    error,\n    customButtonText,\n    customButtonActionPath,\n    customButtonActionState,\n  } = history.location.state as OperationResultState;\n\n  function getResultContent(success: boolean): ResultContent {\n    if (success) {\n      return {\n        result: \"success\",\n        icon: successIcon,\n        buttonText: \"Home\",\n        buttonAction: () => defaultButtonAction(history),\n      };\n    }\n\n    return {\n      result: \"failure\",\n      icon: failIcon,\n      buttonText: \"Retry\",\n      buttonAction: history.goBack,\n    };\n  }\n\n  const { icon, result, buttonText, buttonAction } = getResultContent(success);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath, customButtonActionState)\n    : buttonAction;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <img src={icon} alt=\"Result icon\" />\n        <ResultText data-result={result}>{message}</ResultText>\n        {error && <ResultText data-result={result}>{error}</ResultText>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { printableBalance, useAccount } from \"@cosmicdapp/logic\";\nimport { Button, Divider, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport { StackProps } from \"../../layout/Stack\";\nimport { AccountStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface YourAccountProps extends StackProps {\n  readonly hideTitle?: boolean;\n  readonly hideBalance?: boolean;\n}\n\nexport function YourAccount({ tag, hideTitle, hideBalance }: YourAccountProps): JSX.Element {\n  const accountProvider = useAccount();\n  const { address, balance } = accountProvider.account ?? { address: \"\", balance: [] };\n\n  return (\n    <AccountStack tag={tag}>\n      {!hideTitle && (\n        <header>\n          <Title level={3}>Your Account</Title>\n          {!hideBalance && <Divider />}\n        </header>\n      )}\n      <Text>{address}</Text>\n      {!hideBalance && <Text>({printableBalance(balance)})</Text>}\n      <Button type=\"primary\" onClick={() => copyToClipboard(address)}>\n        Copy Account Address\n      </Button>\n    </AccountStack>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalAntOverride = createGlobalStyle`\n  .ant-btn:not(.ant-input-search-button) {\n    width: var(--max-width);\n    max-width: 100vw;\n  }\n  \n  .ant-form div[role=\"alert\"] li {\n    color: var(--form-error);\n    font-size: var(--s-1);\n    text-align: left;\n    margin: var(--s-1);\n  \n    &::before {\n      content: \"* \";\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalColors = createGlobalStyle`\n  :root {\n    --color-black: #333;\n    --color-gray-light: #f2f2f2;\n    --color-red: #eb5757;\n    --color-green: #27ae60;\n    --color-blue: #2f80ed;\n    --color-blue-light: #1890ff;\n\n    --color-primary: var(--color-blue);\n    --button-color: var(--color-blue-light);\n    --text-color: var(--color-primary);\n    --heading-color: var(--color-primary);\n    --form-error: var(--color-red);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalFonts = createGlobalStyle`\n  :root {\n    --ff-montserrat: Montserrat, sans-serif;\n    --ff-iceland: Iceland, serif;\n\n    --ff-text: var(--ff-montserrat);\n    --ff-heading: var(--ff-iceland);\n    \n    font-family: var(--ff-text);\n  }\n\n  p,\n  span {\n    font-family: var(--ff-text);\n    font-size: var(--s0);\n    overflow-wrap: anywhere;\n  }\n  \n  h1,\n  h2,\n  h3 {\n    font-family: var(--ff-heading);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalReset = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    min-height: 100vh;\n    line-height: 1.5;\n    text-rendering: optimizeSpeed;\n  }\n  \n  body,\n  h1,\n  h2,\n  p,\n  ul[class],\n  ol[class] {\n    margin: 0;\n  }\n  \n  ul[class],\n  ol[class] {\n    padding: 0;\n    list-style: none;\n  }\n  \n  button,\n  input,\n  select,\n  textarea {\n    font: inherit;\n  }\n  \n  img {\n    display: block;\n    max-width: 100%;\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01s !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01s !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalSpacing = createGlobalStyle`\n  :root {\n    --ratio: 1.25;\n\n    --s-6: calc(var(--s-5) / var(--ratio));\n    --s-5: calc(var(--s-4) / var(--ratio));\n    --s-4: calc(var(--s-3) / var(--ratio));\n    --s-3: calc(var(--s-2) / var(--ratio));\n    --s-2: calc(var(--s-1) / var(--ratio));\n    --s-1: calc(var(--s0) / var(--ratio));\n    --s0: 1rem;\n    --s1: calc(var(--s0) * var(--ratio));\n    --s2: calc(var(--s1) * var(--ratio));\n    --s3: calc(var(--s2) * var(--ratio));\n    --s4: calc(var(--s3) * var(--ratio));\n    --s5: calc(var(--s4) * var(--ratio));\n    --s6: calc(var(--s5) * var(--ratio));\n    --s7: calc(var(--s6) * var(--ratio));\n    --s8: calc(var(--s7) * var(--ratio));\n    --s9: calc(var(--s8) * var(--ratio));\n  }\n`;\n","import React from \"react\";\nimport { GlobalAntOverride } from \"./GlobalAntOverride\";\nimport { GlobalColors } from \"./GlobalColors\";\nimport { GlobalFonts } from \"./GlobalFonts\";\nimport { GlobalReset } from \"./GlobalReset\";\nimport { GlobalSpacing } from \"./GlobalSpacing\";\n\nexport function GlobalStyle(): JSX.Element {\n  return (\n    <>\n      <GlobalReset />\n      <GlobalSpacing />\n      <GlobalColors />\n      <GlobalFonts />\n      <GlobalAntOverride />\n    </>\n  );\n}\n","import { AppConfig, CoinMap } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  addressPrefix: \"cosmos\",\n  gasPrice: 0.025,\n  httpUrl: \"http://localhost:1317\",\n  feeToken: \"ucosm\",\n  faucetUrl: \"http://localhost:8000/credit\",\n  faucetToken: \"COSM\",\n};\n\nconst coinMap: CoinMap = {\n  ushell: { denom: \"SHELL\", fractionalDigits: 6 },\n  ureef: { denom: \"REEF\", fractionalDigits: 6 },\n};\n\nconst coralnet: AppConfig = {\n  addressPrefix: \"coral\",\n  gasPrice: 0.025,\n  httpUrl: \"https://lcd.coralnet.cosmwasm.com\",\n  feeToken: \"ushell\",\n  stakingToken: \"ureef\",\n  faucetUrl: \"https://faucet.coralnet.cosmwasm.com/credit\",\n  faucetToken: \"SHELL\",\n  codeId: 107,\n  coinMap,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : coralnet;\n","import { Stack } from \"@cosmicdapp/design\";\nimport { Typography } from \"antd\";\nimport styled from \"styled-components\";\n\nconst { Text } = Typography;\n\nexport const ListStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  div[role=\"separator\"] {\n    margin-bottom: 0;\n  }\n`;\n\nexport const DataRow = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n`;\n\nexport const KeyText = styled(Text)`\n  font-family: var(--ff-iceland);\n  font-size: var(--s2);\n  line-height: var(--s2);\n`;\n\nexport const ValueText = styled(Text)`\n  font-family: var(--ff-montserrat);\n  font-weight: bolder;\n  font-size: var(--s4);\n  line-height: var(--s4);\n`;\n","import { Divider } from \"antd\";\nimport React from \"react\";\nimport { DataRow, KeyText, ListStack, ValueText } from \"./style\";\n\nexport interface DataListProps {\n  readonly [key: string]: string;\n}\n\nexport function DataList(dataMap: DataListProps): JSX.Element {\n  return (\n    <ListStack>\n      {Object.entries(dataMap).map(([key, value], index) => (\n        <React.Fragment key={key}>\n          {index > 0 && <Divider />}\n          <DataRow>\n            <KeyText>{key}</KeyText>\n            <ValueText>{value}</ValueText>\n          </DataRow>\n        </React.Fragment>\n      ))}\n    </ListStack>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport { Typography } from \"antd\";\nimport styled from \"styled-components\";\n\nconst { Text } = Typography;\n\nexport const OpenMenuButton = styled.img`\n  cursor: pointer;\n  width: 2.625rem;\n`;\n\nexport const CloseMenuButton = styled.img`\n  cursor: pointer;\n  width: 1.75rem;\n`;\n\nexport const MenuCenter = styled(Center)`\n  box-sizing: border-box;\n  position: absolute;\n  z-index: 1;\n\n  min-width: var(--max-width);\n  padding: var(--s0);\n  background-color: var(--color-blue);\n`;\n\nexport const MenuStack = styled(Stack)`\n  width: 100%;\n  color: var(--color-gray-light);\n\n  & > * {\n    --gap: var(--s4);\n  }\n`;\n\nexport const CloseAccountStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  width: 100%;\n\n  & > * {\n    --gap: var(--s0);\n  }\n\n  & > img {\n    align-self: flex-end;\n  }\n`;\n\nexport const AvatarName = styled.div`\n  display: flex;\n`;\n\nexport const NameText = styled(Text)`\n  margin-left: var(--s-1);\n  font-size: var(--s2);\n  color: inherit;\n`;\n\nexport const AddressCopyBox = styled.div`\n  width: 100%;\n  padding: var(--s-4) 0;\n  border-radius: 2px;\n  background-color: var(--color-gray-light);\n\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n`;\n\nexport const AddressText = styled(Text)`\n  font-size: var(--s-2);\n`;\n\nexport const AddressCopy = styled.img`\n  cursor: pointer;\n`;\n\nexport const LinksStack = styled(Stack)`\n  & > * {\n    --gap: var(--s-3);\n  }\n`;\n\nexport const LinkText = styled(Text)`\n  cursor: pointer;\n\n  font-family: var(--ff-iceland);\n  font-size: var(--s5);\n\n  color: inherit;\n`;\n","import { useAccount } from \"@cosmicdapp/logic\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React, { useState } from \"react\";\nimport avatarIcon from \"./assets/avatar.svg\";\nimport copyIcon from \"./assets/copy.svg\";\nimport closeMenuButton from \"./assets/cross.svg\";\nimport openMenuButton from \"./assets/hamburger.svg\";\nimport {\n  AddressCopy,\n  AddressCopyBox,\n  AddressText,\n  AvatarName,\n  CloseAccountStack,\n  CloseMenuButton,\n  MenuCenter,\n  MenuStack,\n  NameText,\n  OpenMenuButton,\n} from \"./style\";\n\nexport interface AccountMenuProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly name?: string;\n}\n\nexport function AccountMenu({ name, ...props }: AccountMenuProps): JSX.Element {\n  const { account } = useAccount();\n\n  // NOTE Link functionality not clear, removing for now\n  /* const history = useHistory();\n   function goToHelp() {\n    //TODO: set path to help\n    history.push(pathValidator);\n  }\n  function goToLogout() {\n    //TODO: set path to logout\n    history.push(pathValidator);\n  } */\n\n  const [open, setOpen] = useState(false);\n  const openMenu = () => setOpen(true);\n  const closeMenu = () => setOpen(false);\n\n  const accountName = name ? `${name}'s` : \"Your\";\n\n  return (\n    <>\n      <OpenMenuButton src={openMenuButton} alt=\"Open account menu\" onClick={openMenu} {...props} />\n      {open && (\n        <MenuCenter {...props}>\n          <MenuStack>\n            <CloseAccountStack>\n              <CloseMenuButton src={closeMenuButton} alt=\"Close account menu\" onClick={closeMenu} />\n              <AvatarName>\n                <img src={avatarIcon} alt=\"Avatar\" />\n                <NameText>{accountName} account</NameText>\n              </AvatarName>\n              <AddressCopyBox>\n                <AddressText>{account.address}</AddressText>\n                <AddressCopy\n                  src={copyIcon}\n                  alt=\"Copy address icon\"\n                  onClick={() => {\n                    copyToClipboard(account.address);\n                  }}\n                />\n              </AddressCopyBox>\n            </CloseAccountStack>\n            {\n              // NOTE Link functionality not clear, removing for now\n              /* <LinksStack>\n              <div onClick={goToHelp}>\n                <LinkText>Help</LinkText>\n              </div>\n              <div onClick={goToLogout}>\n                <LinkText>Logout</LinkText>\n              </div>\n            </LinksStack> */\n            }\n          </MenuStack>\n        </MenuCenter>\n      )}\n    </>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const Header = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n","import { BackButton, BackButtonProps } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { AccountMenu, AccountMenuProps } from \"../AccountMenu\";\nimport { Header } from \"./style\";\n\ntype HeaderBackMenu = Omit<BackButtonProps, \"icon\"> & AccountMenuProps;\n\nexport function HeaderBackMenu({ path, state, name, ...props }: HeaderBackMenu): JSX.Element {\n  return (\n    <Header {...props}>\n      <BackButton icon={backArrowIcon} path={path} state={state} />\n      <AccountMenu name={name} />\n    </Header>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s6);\n  }\n\n  width: 100%;\n`;\n\nexport const HeaderTitleStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  h1.ant-typography,\n  h2.ant-typography {\n    margin: 0;\n    margin-top: var(--gap);\n  }\n\n  h1 {\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n\n  h2 {\n    font-size: var(--s5);\n    line-height: var(--s5);\n  }\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { Button, Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { DataList } from \"../../components/DataList\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { ButtonStack, HeaderTitleStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface MockClaim {\n  readonly Date: string;\n  readonly Tokens: string;\n  readonly Atom: string;\n}\n\nfunction getClaimLabel(claim: MockClaim) {\n  const [day, month] = claim.Date.split(\"/\");\n  return `${day} ${month} - ${claim.Tokens.split(\",\")[0]} tokens`;\n}\n\nconst mockClaims: MockClaim[] = [\n  { Date: \"20/Oct/20\", Tokens: \"500,000\", Atom: \"586\" },\n  { Date: \"18/Nov/20\", Tokens: \"140,000\", Atom: \"425\" },\n];\n\nexport function Claims(): JSX.Element {\n  const [claimIndex, setClaimIndex] = useState<number>();\n\n  const showClaimDetail = claimIndex !== undefined;\n  const disableNext = claimIndex === mockClaims.length - 1;\n  const disablePrevious = claimIndex === 0;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderTitleStack>\n          <HeaderBackMenu />\n          <Title>Pending Claims</Title>\n          <Title level={2}>Iris Net</Title>\n        </HeaderTitleStack>\n        {!showClaimDetail && (\n          <ButtonStack>\n            {mockClaims.map((claim, index) => (\n              <Button\n                key={claim.Tokens + \"todofixthiskey\"}\n                type=\"primary\"\n                onClick={() => {\n                  setClaimIndex(index);\n                }}\n              >\n                {getClaimLabel(claim)}\n              </Button>\n            ))}\n          </ButtonStack>\n        )}\n        {showClaimDetail && (\n          <>\n            <DataList {...mockClaims[claimIndex]} />\n            <ButtonStack>\n              <Button\n                type=\"primary\"\n                disabled={disableNext}\n                onClick={() => {\n                  !disableNext && setClaimIndex((claimIndex) => claimIndex + 1);\n                }}\n              >\n                Next\n              </Button>\n              <Button\n                type=\"primary\"\n                disabled={disablePrevious}\n                onClick={() => {\n                  !disablePrevious && setClaimIndex((claimIndex) => claimIndex - 1);\n                }}\n              >\n                Previous\n              </Button>\n            </ButtonStack>\n          </>\n        )}\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Login as LoginDesign } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport { config } from \"../../../config\";\nimport { pathValidators } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\n\nexport function Login(): JSX.Element {\n  return (\n    <LoginDesign\n      pathAfterLogin={pathValidators}\n      appName=\"Staking service\"\n      appLogo={cosmWasmLogo}\n      addressPrefix={config.addressPrefix}\n    />\n  );\n}\n","export const pathLogin = \"/login\";\nexport const pathValidators = \"/validators\";\nexport const pathValidator = \"/validator\";\nexport const pathDetail = \"/detail\";\nexport const pathWallet = \"/wallet\";\nexport const pathPurchase = \"/purchase\";\nexport const pathWithdraw = \"/withdraw\";\nexport const pathClaims = \"/claims\";\nexport const pathOperationResult = \"/result\";\n","import { OperationResult as OperationResultDesign } from \"@cosmicdapp/design\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { pathValidators } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\n\nfunction goToValidators(history: History) {\n  history.push(pathValidators);\n}\n\nexport function OperationResult(): JSX.Element {\n  return (\n    <OperationResultDesign\n      defaultButtonAction={goToValidators}\n      successIcon={successIcon}\n      failIcon={failIcon}\n    />\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport const StakePerToken = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n\n  span + span {\n    margin-left: var(--s2);\n\n    font-family: var(--ff-montserrat);\n    font-weight: bolder;\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & > * + * {\n    margin-left: var(--s0);\n  }\n\n  .ant-typography {\n    flex-grow: 0;\n    flex-shrink: 1;\n    text-align: left;\n  }\n\n  .ant-form-item {\n    flex-grow: 1;\n    flex-shrink: 0;\n    max-width: 13.5rem;\n  }\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n`;\n","import { displayAmountToNative, getErrorFromStackTrace, useAccount } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ValidatorData } from \"..\";\nimport { config } from \"../../../../config\";\nimport { pathOperationResult, pathPurchase, pathWallet } from \"../../../paths\";\nimport { FormField, FormStack, StakePerToken } from \"./style\";\n\nconst { Text } = Typography;\n\ninterface FormBuySharesFields {\n  readonly amount: string;\n}\n\ninterface FormBuySharesProps {\n  readonly validatorData: ValidatorData;\n}\n\nexport function FormBuyShares({ validatorData }: FormBuySharesProps): JSX.Element {\n  const history = useHistory();\n  const { refreshAccount } = useAccount();\n\n  async function submitBuyShares({ amount }: FormBuySharesFields) {\n    const nativeAmountString = displayAmountToNative(amount, config.coinMap, config.stakingToken);\n    const nativeAmountCoin: Coin = { amount: nativeAmountString, denom: config.stakingToken };\n\n    try {\n      const txHash = await validatorData.cw20Contract.bond(nativeAmountCoin);\n      if (!txHash) {\n        throw Error(\"Transfer from failed\");\n      }\n\n      refreshAccount();\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: true,\n          message: `${amount} ${config.stakingToken} successfully bonded`,\n          customButtonText: \"Wallet\",\n          customButtonActionPath: `${pathWallet}/${validatorData.address}`,\n        },\n      });\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Bond transaction failed:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: `${pathPurchase}/${validatorData.address}`,\n        },\n      });\n    }\n  }\n\n  return (\n    <Formik initialValues={{ amount: \"\" }} onSubmit={submitBuyShares}>\n      {(formikProps) => {\n        const formDisabled = !(formikProps.isValid && formikProps.dirty);\n\n        return (\n          <Form>\n            <FormStack>\n              <StakePerToken>\n                <Text>Stake/Token:</Text>\n                <Text>{validatorData?.investment.nominal_value}</Text>\n              </StakePerToken>\n              <FormField>\n                <Text>{config.coinMap[config.stakingToken].denom}</Text>\n                <FormItem name=\"amount\">\n                  <Input name=\"amount\" placeholder=\"Enter amount\" />\n                </FormItem>\n              </FormField>\n              <Button type=\"primary\" onClick={formikProps.submitForm} disabled={formDisabled}>\n                Buy\n              </Button>\n            </FormStack>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s6);\n  }\n`;\n\nexport const HeaderTitleStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  h1.ant-typography,\n  h2.ant-typography {\n    margin: 0;\n    margin-top: var(--gap);\n  }\n\n  h1 {\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n\n  h2 {\n    font-size: var(--s5);\n    line-height: var(--s5);\n  }\n`;\n\nexport const NavCenter = styled(Center)`\n  --max-width: none;\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, CW20Instance, Investment, TokenInfo, useSdk } from \"@cosmicdapp/logic\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { FormBuyShares } from \"./FormBuyShares\";\nimport { HeaderTitleStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nexport interface ValidatorData {\n  readonly address: string;\n  readonly cw20Contract: CW20Instance;\n  readonly tokenInfo: TokenInfo;\n  readonly investment: Investment;\n}\n\ninterface PurchaseParams {\n  readonly validatorAddress: string;\n}\n\nexport function Purchase(): JSX.Element {\n  const { validatorAddress } = useParams<PurchaseParams>();\n  const { getClient } = useSdk();\n\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateValidatorData() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [tokenInfo, investment] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.investment(),\n      ]);\n\n      setValidatorData({ address: validatorAddress, cw20Contract, tokenInfo, investment });\n    })();\n  }, [getClient, validatorAddress]);\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderTitleStack>\n          <HeaderBackMenu />\n          <Title>Purchase</Title>\n          <Title level={2}>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n        </HeaderTitleStack>\n        <FormBuyShares validatorData={validatorData} />\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  width: 100%;\n\n  & > * {\n    --gap: var(--s5);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, Investment, TokenInfo, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { DataList } from \"../../components/DataList\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { pathValidator } from \"../../paths\";\nimport { MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface ValidatorData {\n  readonly tokenInfo: TokenInfo;\n  readonly investment: Investment;\n}\n\nfunction getValidatorDataMap(validatorData?: ValidatorData) {\n  if (!validatorData) return {};\n\n  const totalSupply = Decimal.fromAtomics(\n    validatorData.tokenInfo.total_supply,\n    validatorData.tokenInfo.decimals,\n  ).toString();\n  const commissionPercent = `${parseFloat(validatorData.investment.exit_tax)} %`;\n\n  return { \"Total Supply\": totalSupply, Commission: commissionPercent };\n}\n\ninterface ValidatorDetailParams {\n  readonly validatorAddress: string;\n}\n\nexport function ValidatorDetail(): JSX.Element {\n  const { validatorAddress } = useParams<ValidatorDetailParams>();\n  const { getClient } = useSdk();\n\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateValidatorData() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [tokenInfo, investment] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.investment(),\n      ]);\n\n      setValidatorData({ tokenInfo, investment });\n    })();\n  }, [getClient, validatorAddress]);\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderBackMenu path={`${pathValidator}/${validatorAddress}`} />\n        <Title>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n        <DataList {...getValidatorDataMap(validatorData)} />\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s5);\n  }\n`;\n\nexport const TitleNavStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const NavCenter = styled(Center)`\n  --max-width: none;\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, Investment, nativeCoinToDisplay, TokenInfo, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { DataList } from \"../../components/DataList\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport {\n  pathClaims,\n  pathDetail,\n  pathPurchase,\n  pathValidator,\n  pathValidators,\n  pathWallet,\n  pathWithdraw,\n} from \"../../paths\";\nimport { ButtonStack, MainStack, NavCenter, TitleNavStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface ValidatorData {\n  readonly tokenInfo: TokenInfo;\n  readonly investment: Investment;\n}\n\nfunction getValidatorDataMap(validatorData: ValidatorData) {\n  if (!validatorData) return {};\n\n  const totalSupply = Decimal.fromAtomics(\n    validatorData.tokenInfo.total_supply,\n    validatorData.tokenInfo.decimals,\n  ).toString();\n  const stakedCoin = validatorData.investment.staked_tokens;\n  const stakedAmount = nativeCoinToDisplay(stakedCoin, config.coinMap).amount;\n  const stakePerToken = validatorData.investment.nominal_value;\n\n  return { \"Total Supply\": totalSupply, \"Staked Tokens\": stakedAmount, \"Stake/Token\": stakePerToken };\n}\n\ninterface ValidatorHomeParams {\n  readonly validatorAddress: string;\n}\n\nexport function ValidatorHome(): JSX.Element {\n  const history = useHistory();\n  const { validatorAddress } = useParams<ValidatorHomeParams>();\n  const { getClient } = useSdk();\n\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateValidatorData() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [tokenInfo, investment] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.investment(),\n      ]);\n\n      setValidatorData({ tokenInfo, investment });\n    })();\n  }, [getClient, validatorAddress]);\n\n  function goToWallet() {\n    history.push(`${pathWallet}/${validatorAddress}`);\n  }\n\n  function goToValidatorDetail() {\n    history.push(`${pathValidator}/${validatorAddress}${pathDetail}`);\n  }\n\n  function goToPurchase() {\n    history.push(`${pathPurchase}/${validatorAddress}`);\n  }\n\n  function goToWithdraw() {\n    history.push(`${pathWithdraw}/${validatorAddress}`);\n  }\n\n  function goToClaims() {\n    history.push(`${pathClaims}/${validatorAddress}`);\n  }\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderBackMenu path={pathValidators} />\n        <TitleNavStack>\n          <Title>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n          <NavCenter>\n            <ButtonStack>\n              <Button type=\"primary\" onClick={goToWallet}>\n                Wallet\n              </Button>\n              <Button type=\"primary\" onClick={goToValidatorDetail}>\n                View Details\n              </Button>\n            </ButtonStack>\n          </NavCenter>\n        </TitleNavStack>\n        <DataList {...getValidatorDataMap(validatorData)} />\n        <ButtonStack>\n          <Button type=\"primary\" onClick={goToPurchase}>\n            Buy\n          </Button>\n          <Button type=\"primary\" onClick={goToWithdraw}>\n            Withdraw\n          </Button>\n          {/* Disable while claims are only a number */}\n          <Button disabled type=\"primary\" onClick={goToClaims}>\n            Claims\n          </Button>\n        </ButtonStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  width: 100%;\n\n  & > * {\n    --gap: var(--s5);\n  }\n`;\n\nexport const ValidatorStack = styled(Stack)`\n  & > * {\n    --gap: 0;\n  }\n`;\n\nexport const ValidatorItem = styled.div`\n  --v-padding: var(--s-2);\n  --border-size: 1px;\n\n  padding-top: var(--v-padding);\n  padding-bottom: var(--v-padding);\n\n  padding-left: var(--s4);\n  margin-left: calc(-1 * var(--s4));\n  padding-right: var(--s4);\n  margin-right: calc(-1 * var(--s4));\n\n  margin-bottom: calc(-1 * var(--border-size));\n\n  cursor: pointer;\n\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: var(--color-primary);\n\n    & * {\n      color: white;\n    }\n  }\n\n  &:first-child > * {\n    --border-size: 0;\n  }\n\n  & > * {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n\n    span:first-child {\n      font-family: var(--ff-iceland);\n      font-size: var(--s2);\n    }\n\n    span:not(:first-child) {\n      font-weight: bolder;\n      font-size: var(--s-1);\n    }\n  }\n`;\n\nexport const BorderContainer = styled.div`\n  border-top: var(--border-size) solid var(--color-primary);\n  padding-top: var(--v-padding);\n  margin-top: calc(-1 * var(--v-padding));\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, CW20Instance, useContracts, useSdk } from \"@cosmicdapp/logic\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { pathValidator, pathValidators } from \"../../paths\";\nimport { BorderContainer, MainStack, ValidatorItem, ValidatorStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface ValidatorData {\n  readonly name: string;\n  readonly address: string;\n}\n\nasync function getValidatorData(contract: CW20Instance): Promise<ValidatorData> {\n  const { name } = await contract.tokenInfo();\n  const address = contract.contractAddress;\n\n  return { name, address };\n}\n\nfunction validatorCompare(a: ValidatorData, b: ValidatorData) {\n  if (a.name < b.name) {\n    return -1;\n  }\n  if (a.name > b.name) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function Validators(): JSX.Element {\n  const history = useHistory();\n  const { getClient } = useSdk();\n  const { contracts: cw20Contracts, addContract } = useContracts();\n\n  const [validatorsData, setValidatorsData] = useState<ValidatorData[]>([]);\n\n  useEffect(() => {\n    const client = getClient();\n\n    client.getContracts(config.codeId).then((contracts) => {\n      contracts.forEach((contract) => {\n        const newCw20contract = CW20(client).use(contract.address);\n        addContract(newCw20contract);\n      });\n    });\n  }, [getClient, addContract]);\n\n  useEffect(() => {\n    const validatorsDataPromises = cw20Contracts.map(getValidatorData);\n    Promise.all(validatorsDataPromises).then((validatorsData) =>\n      setValidatorsData(validatorsData.sort(validatorCompare)),\n    );\n  }, [cw20Contracts]);\n\n  function goToValidator(address: string) {\n    history.push(`${pathValidator}/${address}`);\n  }\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderBackMenu path={pathValidators} />\n        <Title>Validators</Title>\n        <ValidatorStack>\n          {validatorsData.map((validator) => (\n            <ValidatorItem key={validator.name} onClick={() => goToValidator(validator.address)}>\n              <BorderContainer>\n                <Text>{validator.name}</Text>\n              </BorderContainer>\n            </ValidatorItem>\n          ))}\n        </ValidatorStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s5);\n  }\n`;\n\nexport const TitleNavStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const NavCenter = styled(Center)`\n  --max-width: none;\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { Claims, CW20, Investment, TokenInfo, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { DataList } from \"../../components/DataList\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { pathClaims, pathDetail, pathPurchase, pathValidator, pathWithdraw } from \"../../paths\";\nimport { ButtonStack, MainStack, NavCenter, TitleNavStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface ValidatorData {\n  readonly tokenInfo: TokenInfo;\n  readonly investment: Investment;\n  readonly balance: string;\n  readonly claims: Claims;\n}\n\nfunction getValidatorDataMap(validatorData: ValidatorData) {\n  if (!validatorData) return {};\n\n  const stakePerToken = validatorData.investment.nominal_value;\n  const balance = Decimal.fromAtomics(validatorData.balance, validatorData.tokenInfo.decimals).toString();\n  const claims = validatorData.claims.claims.toString();\n\n  return { \"Stake/Token\": stakePerToken, Balance: balance, Claims: claims };\n}\n\ninterface WalletParams {\n  readonly validatorAddress: string;\n}\n\nexport function Wallet(): JSX.Element {\n  const history = useHistory();\n  const { validatorAddress } = useParams<WalletParams>();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateValidatorData() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [tokenInfo, investment, balance, claims] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.investment(),\n        cw20Contract.balance(account.address),\n        cw20Contract.claims(account.address),\n      ]);\n\n      setValidatorData({ tokenInfo, investment, balance, claims });\n    })();\n  }, [getClient, validatorAddress, account.address]);\n\n  function goToValidatorDetail() {\n    history.push(`${pathValidator}/${validatorAddress}${pathDetail}`);\n  }\n\n  function goToPurchase() {\n    history.push(`${pathPurchase}/${validatorAddress}`);\n  }\n\n  function goToWithdraw() {\n    history.push(`${pathWithdraw}/${validatorAddress}`);\n  }\n\n  function goToClaims() {\n    history.push(`${pathClaims}/${validatorAddress}`);\n  }\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderBackMenu />\n        <TitleNavStack>\n          <Title>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n          <NavCenter>\n            <Button type=\"primary\" onClick={goToValidatorDetail}>\n              View Details\n            </Button>\n          </NavCenter>\n        </TitleNavStack>\n        <DataList {...getValidatorDataMap(validatorData)} />\n        <ButtonStack>\n          <Button type=\"primary\" onClick={goToPurchase}>\n            Buy\n          </Button>\n          <Button type=\"primary\" onClick={goToWithdraw}>\n            Withdraw\n          </Button>\n          {/* Disable while claims are only a number */}\n          <Button disabled type=\"primary\" onClick={goToClaims}>\n            Claims\n          </Button>\n        </ButtonStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & > * + * {\n    margin-left: var(--s0);\n  }\n\n  .ant-typography {\n    flex-grow: 0;\n    flex-shrink: 1;\n    text-align: left;\n  }\n\n  .ant-typography + .ant-typography {\n    flex-grow: 1;\n    flex-shrink: 0;\n    max-width: 13.5rem;\n    text-align: right;\n\n    font-family: var(--ff-montserrat);\n    font-weight: bolder;\n    font-size: var(--s4);\n    line-height: var(--s4);\n  }\n\n  .ant-form-item {\n    flex-grow: 1;\n    flex-shrink: 0;\n    max-width: 13.5rem;\n  }\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n`;\n","import { displayAmountToNative, getErrorFromStackTrace, useAccount } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ValidatorData } from \"..\";\nimport { config } from \"../../../../config\";\nimport { pathOperationResult, pathWallet, pathWithdraw } from \"../../../paths\";\nimport { FormField, FormStack } from \"./style\";\n\nconst { Text } = Typography;\n\ninterface FormWithdrawBalanceFields {\n  readonly amount: string;\n}\n\ninterface FormWithdrawBalanceProps {\n  readonly validatorData: ValidatorData;\n}\n\nexport function FormWithdrawBalance({ validatorData }: FormWithdrawBalanceProps): JSX.Element {\n  const history = useHistory();\n  const { refreshAccount } = useAccount();\n\n  async function submitWithdrawBalance({ amount }: FormWithdrawBalanceFields) {\n    const nativeAmountString = displayAmountToNative(amount, config.coinMap, config.stakingToken);\n\n    try {\n      const txHash = await validatorData.cw20Contract.unbond(nativeAmountString);\n      if (!txHash) {\n        throw Error(\"Transfer from failed\");\n      }\n\n      refreshAccount();\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: true,\n          message: `${amount} ${config.stakingToken} successfully bonded`,\n          customButtonText: \"Wallet\",\n          customButtonActionPath: `${pathWallet}/${validatorData.address}`,\n        },\n      });\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Bond transaction failed:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: `${pathWithdraw}/${validatorData.address}`,\n        },\n      });\n    }\n  }\n\n  const balance = validatorData\n    ? Decimal.fromAtomics(validatorData.balance, validatorData.tokenInfo.decimals).toString()\n    : \"0\";\n\n  return (\n    <Formik initialValues={{ amount: \"\" }} onSubmit={submitWithdrawBalance}>\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormField>\n              <Text>Balance</Text>\n              <Text>{balance}</Text>\n            </FormField>\n            <FormField>\n              <Text>Withdraw</Text>\n              <FormItem name=\"amount\">\n                <Input name=\"amount\" placeholder=\"Enter amount\" />\n              </FormItem>\n            </FormField>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Withdraw\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Center, Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s6);\n  }\n`;\n\nexport const HeaderTitleStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  h1.ant-typography,\n  h2.ant-typography {\n    margin: 0;\n    margin-top: var(--gap);\n  }\n\n  h1 {\n    font-size: var(--s2);\n    line-height: var(--s2);\n  }\n\n  h2 {\n    font-size: var(--s5);\n    line-height: var(--s5);\n  }\n`;\n\nexport const NavCenter = styled(Center)`\n  --max-width: none;\n`;\n\nexport const ButtonStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n","import { PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, CW20Instance, TokenInfo, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { HeaderBackMenu } from \"../../components/HeaderBackMenu\";\nimport { FormWithdrawBalance } from \"./FormWithdrawBalance\";\nimport { HeaderTitleStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nexport interface ValidatorData {\n  readonly address: string;\n  readonly cw20Contract: CW20Instance;\n  readonly tokenInfo: TokenInfo;\n  readonly balance: string;\n}\n\ninterface WithdrawParams {\n  readonly validatorAddress: string;\n}\n\nexport function Withdraw(): JSX.Element {\n  const { validatorAddress } = useParams<WithdrawParams>();\n  const { getClient } = useSdk();\n  const { account } = useAccount();\n\n  const [validatorData, setValidatorData] = useState<ValidatorData>();\n\n  useEffect(() => {\n    const client = getClient();\n\n    (async function updateValidatorData() {\n      const contract = await client.getContract(validatorAddress);\n      const cw20Contract = CW20(client).use(contract.address);\n\n      const [tokenInfo, balance] = await Promise.all([\n        cw20Contract.tokenInfo(),\n        cw20Contract.balance(account.address),\n      ]);\n\n      setValidatorData({ address: validatorAddress, cw20Contract, tokenInfo, balance });\n    })();\n  }, [getClient, validatorAddress, account.address]);\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <HeaderTitleStack>\n          <HeaderBackMenu />\n          <Title>Withdraw</Title>\n          <Title level={2}>{validatorData?.tokenInfo.name ?? \"\"}</Title>\n        </HeaderTitleStack>\n        <FormWithdrawBalance validatorData={validatorData} />\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { GlobalStyle } from \"@cosmicdapp/design\";\nimport {\n  AccountProvider,\n  ContractsProvider,\n  ErrorProvider,\n  ProtectedSwitch,\n  SdkProvider,\n} from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport {\n  pathClaims,\n  pathDetail,\n  pathLogin,\n  pathOperationResult,\n  pathPurchase,\n  pathValidator,\n  pathValidators,\n  pathWallet,\n  pathWithdraw,\n} from \"./paths\";\nimport { Claims } from \"./routes/Claims\";\nimport { Login } from \"./routes/Login\";\nimport { OperationResult } from \"./routes/OperationResult\";\nimport { Purchase } from \"./routes/Purchase\";\nimport { ValidatorDetail } from \"./routes/ValidatorDetail\";\nimport { ValidatorHome } from \"./routes/ValidatorHome\";\nimport { Validators } from \"./routes/Validators\";\nimport { Wallet } from \"./routes/Wallet\";\nimport { Withdraw } from \"./routes/Withdraw\";\n\nexport function App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <SdkProvider config={config}>\n        <AccountProvider>\n          <ContractsProvider>\n            <GlobalStyle />\n            <Router basename={process.env.PUBLIC_URL}>\n              <Switch>\n                <Route exact path=\"/\" component={Login} />\n                <Route exact path={pathLogin} component={Login} />\n                <ProtectedSwitch authPath={pathLogin}>\n                  <Route exact path={pathValidators} component={Validators} />\n                  <Route exact path={`${pathValidator}/:validatorAddress`} component={ValidatorHome} />\n                  <Route\n                    exact\n                    path={`${pathValidator}/:validatorAddress${pathDetail}`}\n                    component={ValidatorDetail}\n                  />\n                  <Route exact path={`${pathWallet}/:validatorAddress`} component={Wallet} />\n                  <Route exact path={`${pathPurchase}/:validatorAddress`} component={Purchase} />\n                  <Route exact path={`${pathWithdraw}/:validatorAddress`} component={Withdraw} />\n                  <Route exact path={`${pathClaims}/:validatorAddress`} component={Claims} />\n                  <Route exact path={pathOperationResult} component={OperationResult} />\n                </ProtectedSwitch>\n              </Switch>\n            </Router>\n          </ContractsProvider>\n        </AccountProvider>\n      </SdkProvider>\n    </ErrorProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}