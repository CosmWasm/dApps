{"version":3,"sources":["App/components/BackButton/assets/backArrow.svg","App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","config.ts","service/error.tsx","service/sdk.ts","utils/currency.ts","service/wallet.tsx","service/account.tsx","App/components/ProtectedSwitch.tsx","App/paths.ts","theme/layout/Center/index.tsx","theme/layout/Stack/index.tsx","App/components/BackButton/index.tsx","App/components/Loading/index.tsx","service/helpers.ts","App/components/YourAccount/index.tsx","App/forms/Search.tsx","App/forms/validationSchemas.ts","App/routes/Contract/components/FormSearchName.tsx","utils/errors.ts","App/routes/Contract/components/SearchResult/index.tsx","App/routes/Contract/index.tsx","App/routes/Home/index.tsx","App/routes/Login/index.tsx","App/routes/OperationResult/index.tsx","App/routes/Transfer/FormTransferName.tsx","App/routes/Transfer/index.tsx","App/index.tsx","index.tsx"],"names":["module","exports","config","httpUrl","feeToken","gasPrice","faucetUrl","faucetToken","addressPrefix","codeId","ErrorContext","React","setError","clearError","useError","ErrorProvider","children","error","context","undefined","Provider","value","loadOrCreateMnemonic","key","loaded","localStorage","getItem","generated","Bip39","encode","Random","getBytes","toString","setItem","async","loadOrCreateWallet","mnemonic","hdPath","makeCosmoshubPath","Secp256k1Wallet","fromMnemonic","createClient","signer","firstAddress","getAccounts","address","feeTable","stdFee","gas","denom","price","amount","Math","floor","upload","init","exec","migrate","send","changeAdmin","buildFeeTable","SigningCosmWasmClient","defaultContext","initialized","getClient","Error","CosmWasmContext","useSdk","BurnerWalletProvider","SdkProvider","loadWallet","contextWithInit","then","client","senderAddress","acct","getAccount","balance","length","fetch","method","headers","body","JSON","stringify","ticker","setValue","useState","AccountContext","refreshAccount","useAccount","AccountProvider","sdk","account","catch","ProtectedSwitch","location","to","pathname","state","redirectPathname","redirectState","Center","tag","Tag","className","props","classNames","joinClassNames","Stack","BackButton","path","history","useHistory","goBack","push","src","backArrow","alt","onClick","spinIndicator","LoadingOutlined","style","fontSize","spin","Loading","loadingText","tip","indicator","printableCoin","coin","startsWith","slice","toUpperCase","Decimal","fromAtomics","Title","Text","YourAccount","accountProvider","level","map","join","type","copyToClipboard","TypedInput","name","validate","fast","onChange","$onChange","onBlur","$onBlur","restProps","ref","field","event","Search","SearchValidationSchema","Yup","shape","min","required","TransferValidationSchema","FormSearchName","initialName","setSearchedName","initialValues","validationSchema","onSubmit","values","formikProps","placeholder","enterButton","onSearch","isValid","getErrorFromStackTrace","stackTrace","match","substring","lastIndexOf","SearchResult","contractLabel","contractAddress","setLoading","fullContractPath","nameOwnerAddress","setNameOwnerAddress","prices","setPrices","useEffect","queryContractSmart","resolve_record","response","includes","purchase","purchase_price","transfer","transfer_price","message","actionText","action","myAddress","tryRegister","navigateToTransfer","getResult","purchasePrice","payment","execute","register","success","customButtonText","customButtonActionPath","console","Contract","label","useParams","loading","searchedName","newName","toLowerCase","Home","contracts","setContracts","getContracts","Login","initializing","setInitializing","cosmWasmLogo","disabled","OperationResult","icon","textClass","buttonText","buttonAction","successIcon","goToHome","failIcon","getResultContent","chosenButtonText","chosenButtonAction","FormTransferName","setNewOwnerAddress","transferButtonText","transferButtonAction","target","dirty","Transfer","newOwnerAddress","transferPrice","setTransferPrice","App","basename","process","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7969189.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","export interface AppConfig {\n  readonly httpUrl: string;\n  readonly feeToken: string;\n  readonly gasPrice: 0.025;\n  readonly faucetUrl?: string;\n  readonly faucetToken?: string;\n  readonly addressPrefix: string;\n  // codeId is the wasm codeId for the name service contract on the given chain\n  readonly codeId: number;\n}\n\nconst local: AppConfig = {\n  httpUrl: \"http://localhost:1317\",\n  feeToken: \"ucosm\",\n  gasPrice: 0.025,\n  faucetUrl: \"http://localhost:8000/credit\",\n  faucetToken: \"COSM\",\n  addressPrefix: \"cosmos\",\n  codeId: 2,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst demonet: AppConfig = {\n  httpUrl: \"https://lcd.demo-10.cosmwasm.com\",\n  feeToken: \"ucosm\",\n  gasPrice: 0.025,\n  faucetUrl: \"https://faucet.demo-10.cosmwasm.com/credit\",\n  faucetToken: \"COSM\",\n  addressPrefix: \"cosmos\",\n  codeId: 2,\n};\n\nconst coralnet: AppConfig = {\n  httpUrl: \"https://lcd.coralnet.cosmwasm.com\",\n  feeToken: \"ushell\",\n  gasPrice: 0.025,\n  faucetUrl: \"https://faucet.coralnet.cosmwasm.com/credit\",\n  faucetToken: \"SHELL\",\n  addressPrefix: \"coral\",\n  codeId: 5,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : coralnet;\n","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { makeCosmoshubPath, OfflineSigner, Secp256k1Wallet } from \"@cosmjs/launchpad\";\nimport { buildFeeTable } from \"../utils/currency\";\nimport { config } from \"../config\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport async function loadOrCreateWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(httpUrl: string, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const feeTable = buildFeeTable(config);\n  return new SigningCosmWasmClient(httpUrl, firstAddress, signer, feeTable);\n}\n","import { AppConfig } from \"../config\";\nimport { FeeTable } from \"@cosmjs/cosmwasm\";\n\nexport function buildFeeTable({ feeToken, gasPrice }: AppConfig): FeeTable {\n  const stdFee = (gas: number, denom: string, price: number) => {\n    const amount = Math.floor(gas * price);\n    return {\n      amount: [{ amount: amount.toString(), denom: denom }],\n      gas: gas.toString(),\n    };\n  };\n\n  return {\n    upload: stdFee(1500000, feeToken, gasPrice),\n    init: stdFee(600000, feeToken, gasPrice),\n    exec: stdFee(200000, feeToken, gasPrice),\n    migrate: stdFee(600000, feeToken, gasPrice),\n    send: stdFee(80000, feeToken, gasPrice),\n    changeAdmin: stdFee(80000, feeToken, gasPrice),\n  };\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { OfflineSigner } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { createClient, loadOrCreateWallet } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly address: string;\n  readonly init: () => void;\n  readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  address: \"\",\n  init: () => {\n    return;\n  },\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface ConfigProp {\n  readonly config: AppConfig;\n}\n\ntype BurnerWalletProviderProps = ConfigProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function BurnerWalletProvider({ config, children }: BurnerWalletProviderProps): JSX.Element {\n  return (\n    <SdkProvider config={config} loadWallet={loadOrCreateWallet}>\n      {children}\n    </SdkProvider>\n  );\n}\n\ninterface ConfigWalletProps extends ConfigProp {\n  readonly loadWallet: (addressPrefix: string) => Promise<OfflineSigner>;\n}\n\ntype SdkProviderProps = ConfigWalletProps & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function SdkProvider({ config, loadWallet, children }: SdkProviderProps): JSX.Element {\n  const contextWithInit = { ...defaultContext, init: init };\n  const [value, setValue] = useState(contextWithInit);\n\n  function init() {\n    loadWallet(config.addressPrefix)\n      .then((signer) => createClient(config.httpUrl, signer))\n      .then(async (client) => {\n        const address = client.senderAddress;\n        // load from faucet if needed\n        if (config.faucetUrl) {\n          const acct = await client.getAccount();\n          if (!acct?.balance?.length) {\n            await fetch(config.faucetUrl, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ ticker: config.faucetToken, address }),\n            });\n          }\n        }\n\n        setValue({\n          initialized: true,\n          address: address,\n          init: () => {\n            return;\n          },\n          getClient: () => client,\n        });\n      });\n  }\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n","import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useSdk } from \"../../service\";\nimport { pathLogin } from \"../paths\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: unknown;\n}\n\nfunction ProtectedSwitch({ children, location }: SwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: pathLogin,\n        state: { redirectPathname: location.pathname, redirectState: location.state },\n      }}\n    />\n  );\n}\n\nexport default ProtectedSwitch;\n","export const pathLogin = \"/login\";\nexport const pathHome = \"/home\";\nexport const pathContract = \"/contract\";\nexport const pathTransfer = \"/transfer\";\nexport const pathOperationResult = \"/result\";\n","import joinClassNames from \"classnames\";\nimport * as React from \"react\";\nimport \"./Center.less\";\n\ninterface TagProp {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport type CenterProps = TagProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nfunction Center({ tag: Tag = \"div\", className, children, ...props }: CenterProps): JSX.Element {\n  const classNames = joinClassNames(\"Center\", className);\n\n  return (\n    <Tag className={classNames} {...props}>\n      {children}\n    </Tag>\n  );\n}\n\nexport default Center;\n","import joinClassNames from \"classnames\";\nimport * as React from \"react\";\nimport \"./Stack.less\";\n\ninterface TagProp {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport type StackProps = TagProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nfunction Stack({ tag: Tag = \"div\", className, children, ...props }: StackProps): JSX.Element {\n  const classNames = joinClassNames(\"Stack\", className);\n\n  return (\n    <Tag className={classNames} {...props}>\n      {children}\n    </Tag>\n  );\n}\n\nexport default Stack;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport backArrow from \"./assets/backArrow.svg\";\nimport \"./BackButton.less\";\n\ninterface BackButtonProps {\n  readonly path?: string;\n}\n\nfunction BackButton({ path }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path) : history.goBack;\n\n  return <img src={backArrow} alt=\"Back arrow\" className=\"BackButton\" onClick={goBack} />;\n}\n\nexport default BackButton;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport { Spin } from \"antd\";\nimport React from \"react\";\nimport Center from \"../../../theme/layout/Center\";\nimport \"./Loading.less\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nfunction Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <Center tag=\"main\" className=\"Loading\">\n      <Spin indicator={spinIndicator} tip={tip} className=\"Spin\" />\n    </Center>\n  );\n}\n\nexport default Loading;\n","import { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n","import { Button, Divider, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport { useAccount } from \"../../../service\";\nimport { printableBalance } from \"../../../service/helpers\";\nimport Center, { CenterProps } from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport \"./YourAccount.less\";\n\nconst { Title, Text } = Typography;\n\nfunction YourAccount(props: CenterProps): JSX.Element {\n  const accountProvider = useAccount();\n\n  return (\n    <Center className=\"YourAccount\" {...props}>\n      <Stack>\n        <header>\n          <Title level={3}>Your Account</Title>\n          <Divider />\n        </header>\n        {accountProvider.account && (\n          <>\n            <Typography>\n              <Text>{accountProvider.account.address}</Text>\n              <Text>({printableBalance(accountProvider.account.balance)})</Text>\n            </Typography>\n            <Button type=\"primary\" onClick={() => copyToClipboard(accountProvider.account.address)}>\n              Copy Account Address\n            </Button>\n          </>\n        )}\n      </Stack>\n    </Center>\n  );\n}\n\nexport default YourAccount;\n","// Search form not present in form-antd: https://github.com/jannikbuschke/formik-antd/blob/master/src/input/index.tsx\nimport { Input as BaseInput } from \"antd\";\nimport { InputProps as BaseInputProps, SearchProps as BaseSearchProps } from \"antd/lib/input\";\nimport { FieldProps } from \"formik\";\nimport { Field } from \"formik-antd\";\nimport * as React from \"react\";\nimport Search from \"antd/lib/input/Search\";\n\ninterface FormikFieldProps {\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validate?: (value: any) => undefined | string | Promise<any>;\n  fast?: boolean;\n}\n\ntype InputProps = FormikFieldProps & BaseInputProps;\n\ninterface InputType\n  extends React.ForwardRefExoticComponent<\n    FormikFieldProps & BaseInputProps & React.RefAttributes<BaseInput>\n  > {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  Search: React.ForwardRefExoticComponent<FormikFieldProps & BaseSearchProps & React.RefAttributes<Search>>;\n}\n\n// eslint-disable-next-line react/display-name\nconst Input = React.forwardRef((\n  { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: InputProps,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  ref: React.Ref<Search>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({ field: { value, onChange, onBlur } }: FieldProps) => (\n      <BaseInput\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(event) => {\n          onChange(event);\n          $onChange && $onChange(event);\n        }}\n        onBlur={(event) => {\n          onBlur(event);\n          $onBlur && $onBlur(event);\n        }}\n        {...restProps}\n      />\n    )}\n  </Field>\n));\n\nconst TypedInput = (Input as unknown) as InputType;\ntype SearchProps = FormikFieldProps & BaseSearchProps;\n\n// eslint-disable-next-line react/display-name\nTypedInput.Search = React.forwardRef(\n  (\n    { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: SearchProps,\n    ref: React.Ref<BaseInput>,\n  ) => (\n    <Field name={name} validate={validate} fast={fast}>\n      {({ field: { value, onChange, onBlur } }: FieldProps) => (\n        <BaseInput.Search\n          ref={ref}\n          name={name}\n          value={value}\n          onChange={(event) => {\n            onChange(event);\n            $onChange && $onChange(event);\n          }}\n          onBlur={(event) => {\n            onBlur(event);\n            $onBlur && $onBlur(event);\n          }}\n          {...restProps}\n        />\n      )}\n    </Field>\n  ),\n);\n\nexport default TypedInput.Search;\n","import * as Yup from \"yup\";\n\nexport const SearchValidationSchema = Yup.object().shape({\n  name: Yup.string().min(4, \"Name can not be less than 4 characters\").required(\"A Name is required\"),\n});\n\nexport const TransferValidationSchema = Yup.object().shape({\n  address: Yup.string().min(45, \"Address invalid\").required(\"An address is required\"),\n});\n","import { Formik } from \"formik\";\nimport { Form, FormItem } from \"formik-antd\";\nimport React from \"react\";\nimport Search from \"../../../forms/Search\";\nimport { SearchValidationSchema } from \"../../../forms/validationSchemas\";\n\ninterface FormSearchNameProps {\n  readonly initialName?: string;\n  readonly setSearchedName: (value: React.SetStateAction<string>) => void;\n}\n\nfunction FormSearchName({ initialName, setSearchedName }: FormSearchNameProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ name: initialName }}\n      validationSchema={SearchValidationSchema}\n      onSubmit={(values) => {\n        setSearchedName(values.name);\n      }}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"name\">\n            <Search\n              name=\"name\"\n              placeholder=\"Name\"\n              enterButton\n              onSearch={(value) => {\n                formikProps.isValid && setSearchedName(value);\n              }}\n            />\n          </FormItem>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default FormSearchName;\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error;\n}\n","import { Coin } from \"@cosmjs/launchpad\";\nimport { Button, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../../../service\";\nimport { printableCoin } from \"../../../../../service/helpers\";\nimport Center from \"../../../../../theme/layout/Center\";\nimport Stack from \"../../../../../theme/layout/Stack\";\nimport { getErrorFromStackTrace } from \"../../../../../utils/errors\";\nimport { pathContract, pathOperationResult, pathTransfer } from \"../../../../paths\";\nimport { OperationResultState } from \"../../../OperationResult\";\nimport \"./SearchResult.less\";\n\nconst { Text } = Typography;\n\nexport interface Prices {\n  readonly purchase?: Coin;\n  readonly transfer?: Coin;\n}\n\ninterface Result {\n  readonly message: string;\n  readonly actionText: string;\n  readonly action: () => void;\n}\n\nfunction getResult(\n  myAddress: string,\n  nameOwnerAddress: string,\n  prices: Prices,\n  tryRegister: () => void,\n  navigateToTransfer: () => void,\n): Result {\n  if (!nameOwnerAddress) {\n    return {\n      message: \"is available!\",\n      actionText: `Register ${printableCoin(prices.purchase)}`,\n      action: tryRegister,\n    };\n  }\n\n  if (myAddress === nameOwnerAddress) {\n    return {\n      message: \"is owned by you !\",\n      actionText: `Transfer ${printableCoin(prices.transfer)}`,\n      action: navigateToTransfer,\n    };\n  } else {\n    return {\n      message: `is owned by ${nameOwnerAddress}`,\n      actionText: \"Copy Owner Address\",\n      action: () => {\n        copyToClipboard(nameOwnerAddress);\n      },\n    };\n  }\n}\n\ninterface SearchResultProps {\n  readonly contractLabel: string;\n  readonly contractAddress: string;\n  readonly name: string;\n  readonly setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction SearchResult({ contractLabel, contractAddress, name, setLoading }: SearchResultProps): JSX.Element {\n  const fullContractPath = `${pathContract}/${contractLabel}/${contractAddress}/${name}`;\n\n  const history = useHistory();\n  const { setError, error } = useError();\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const [nameOwnerAddress, setNameOwnerAddress] = useState(\"\");\n  const [prices, setPrices] = useState<Prices>({});\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { resolve_record: { name } })\n      .then((response) => {\n        setNameOwnerAddress(response.address);\n      })\n      .catch((error) => {\n        // a not found error means it is free, other errors need to be reported\n        if (!error.toString().includes(\"NameRecord not found\")) {\n          setError(error);\n        }\n      });\n  }, [setError, contractAddress, getClient, name]);\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setPrices({\n          purchase: response.purchase_price,\n          transfer: response.transfer_price,\n        });\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryRegister() {\n    setLoading(true);\n\n    const purchasePrice = prices.purchase;\n    const payment = purchasePrice ? [purchasePrice] : undefined;\n\n    getClient()\n      .execute(contractAddress, { register: { name: name } }, \"Buying my name\", payment)\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `Succesfully registered ${name}`,\n            customButtonText: \"Name details\",\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Name register failed:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      });\n  }\n\n  function navigateToTransfer() {\n    history.push(`${pathTransfer}/${contractLabel}/${contractAddress}/${name}`);\n  }\n\n  const { message, actionText, action } = getResult(\n    accountProvider.account.address,\n    nameOwnerAddress,\n    prices,\n    tryRegister,\n    navigateToTransfer,\n  );\n\n  return (\n    <Center tag=\"main\" className=\"SearchResult\">\n      <Stack>\n        <Text>{error}</Text>\n        <Text className=\"SearchedName\">{name}</Text>\n        <Text className=\"LightText\">{message}</Text>\n        <Button type=\"primary\" onClick={action}>\n          {actionText}\n        </Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default SearchResult;\n","import { Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport BackButton from \"../../components/BackButton\";\nimport Loading from \"../../components/Loading\";\nimport YourAccount from \"../../components/YourAccount\";\nimport FormSearchName from \"./components/FormSearchName\";\nimport SearchResult from \"./components/SearchResult\";\nimport \"./Contract.less\";\nimport { pathHome } from \"../../paths\";\n\nconst { Title, Text } = Typography;\n\ninterface ContractParams {\n  readonly label: string;\n  readonly address: string;\n  readonly name?: string;\n}\n\nfunction Contract(): JSX.Element {\n  const { label, address, name } = useParams() as ContractParams;\n\n  const [loading, setLoading] = useState(false);\n  const [searchedName, setSearchedName] = useState(name);\n\n  function setLowercaseSearchedName(newName: string) {\n    setSearchedName(newName.toLowerCase());\n  }\n\n  return (\n    (loading && <Loading loadingText={`Registering name: ${searchedName}...`} />) ||\n    (!loading && (\n      <Center tag=\"main\" className=\"Contract\">\n        <Stack>\n          <BackButton path={pathHome} />\n          <Stack className=\"SearchAndResultStack\">\n            <Stack className=\"SearchStack\">\n              <Title>{label}</Title>\n              <Text>({address})</Text>\n              <FormSearchName initialName={name} setSearchedName={setLowercaseSearchedName} />\n            </Stack>\n            {searchedName && (\n              <SearchResult\n                contractLabel={label}\n                contractAddress={address}\n                name={searchedName}\n                setLoading={setLoading}\n              />\n            )}\n          </Stack>\n          <YourAccount tag=\"footer\" />\n        </Stack>\n      </Center>\n    ))\n  );\n}\n\nexport default Contract;\n","import { Contract } from \"@cosmjs/cosmwasm\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { useError, useSdk } from \"../../../service\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport YourAccount from \"../../components/YourAccount\";\nimport { pathContract } from \"../../paths\";\nimport \"./Home.less\";\n\nconst { Title } = Typography;\n\nfunction Home(): JSX.Element {\n  const { setError } = useError();\n  const { getClient } = useSdk();\n\n  const [contracts, setContracts] = useState<readonly Contract[]>([]);\n\n  useEffect(() => {\n    getClient()\n      .getContracts(config.codeId)\n      .then((contracts) => setContracts(contracts))\n      .catch(setError);\n  }, [getClient, setError]);\n\n  return (\n    <Center tag=\"main\" className=\"Home\">\n      <Stack>\n        <Title>Name Service</Title>\n        <Stack tag=\"nav\">\n          {contracts.map(({ label, address }) => (\n            <Link key={address} to={`${pathContract}/${label.toLowerCase()}/${address}`}>\n              <Button type=\"primary\">{label}</Button>\n            </Link>\n          ))}\n        </Stack>\n        <YourAccount tag=\"footer\" />\n      </Stack>\n    </Center>\n  );\n}\n\nexport default Home;\n","import { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAccount, useSdk } from \"../../../service\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport Loading from \"../../components/Loading\";\nimport { RedirectLocation } from \"../../components/ProtectedSwitch\";\nimport { pathHome } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\nimport \"./Login.less\";\n\nconst { Title, Text } = Typography;\n\nfunction Login(): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const sdk = useSdk();\n  const { refreshAccount, account } = useAccount();\n\n  const [initializing, setInitializing] = useState(false);\n\n  function init() {\n    setInitializing(true);\n    sdk.init();\n  }\n\n  useEffect(() => {\n    if (sdk.initialized) {\n      refreshAccount();\n    }\n  }, [sdk.initialized, refreshAccount]);\n\n  useEffect(() => {\n    if (account) {\n      if (state) {\n        history.push(state.redirectPathname, state.redirectState);\n      } else {\n        history.push(pathHome);\n      }\n    }\n  }, [account, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <Center tag=\"main\" className=\"Login\">\n      <Stack className=\"MainStack\">\n        <img src={cosmWasmLogo} alt=\"CosmWasm logo\" />\n        <Stack className=\"WelcomeStack\">\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <Text className=\"LightText\">Select one of the following options to start:</Text>\n          </Typography>\n          <Button type=\"primary\" onClick={init}>\n            Browser (Demo)\n          </Button>\n          <Button disabled type=\"primary\">\n            Keplr (Secure)\n          </Button>\n        </Stack>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default Login;\n","import { Button, Typography } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport { pathHome } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\nimport \"./OperationResult.less\";\n\nconst { Text } = Typography;\n\nfunction goToHome(history: History) {\n  history.push(pathHome);\n}\n\ninterface ResultContent {\n  readonly icon: string;\n  readonly textClass: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nfunction getResultContent(success: boolean, history: History): ResultContent {\n  if (success) {\n    return {\n      icon: successIcon,\n      textClass: \"SuccessText\",\n      buttonText: \"Home\",\n      buttonAction: () => goToHome(history),\n    };\n  }\n\n  return {\n    icon: failIcon,\n    textClass: \"FailText\",\n    buttonText: \"Retry\",\n    buttonAction: history.goBack,\n  };\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n}\n\nfunction OperationResult(): JSX.Element {\n  const history = useHistory();\n\n  const { success, message, error, customButtonText, customButtonActionPath } = history.location\n    .state as OperationResultState;\n  const { icon, textClass, buttonText, buttonAction } = getResultContent(success, history);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath)\n    : buttonAction;\n\n  return (\n    <Center tag=\"main\" className=\"OperationResult\">\n      <Stack className=\"MainStack\">\n        <img src={icon} alt=\"Result icon\" />\n        <Text className={textClass}>{message}</Text>\n        {error && <Text className={textClass}>{error}</Text>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </Stack>\n    </Center>\n  );\n}\n\nexport default OperationResult;\n","import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { TransferValidationSchema } from \"../../forms/validationSchemas\";\n\ninterface FormTransferNameProps {\n  readonly setNewOwnerAddress: (value: React.SetStateAction<string>) => void;\n  readonly transferButtonText: string;\n  readonly transferButtonAction: () => void;\n}\n\nfunction FormTransferName({\n  setNewOwnerAddress,\n  transferButtonText,\n  transferButtonAction,\n}: FormTransferNameProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ address: \"\" }}\n      validationSchema={TransferValidationSchema}\n      onSubmit={transferButtonAction}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"address\">\n            <Input\n              name=\"address\"\n              placeholder=\"Enter address\"\n              onChange={(event) => {\n                setNewOwnerAddress(event.target.value);\n              }}\n            />\n          </FormItem>\n          <Button\n            type=\"primary\"\n            onClick={transferButtonAction}\n            disabled={!(formikProps.isValid && formikProps.dirty)}\n          >\n            {transferButtonText}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default FormTransferName;\n","import { Coin } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useAccount, useError, useSdk } from \"../../../service\";\nimport { printableCoin } from \"../../../service/helpers\";\nimport Center from \"../../../theme/layout/Center\";\nimport Stack from \"../../../theme/layout/Stack\";\nimport { getErrorFromStackTrace } from \"../../../utils/errors\";\nimport BackButton from \"../../components/BackButton\";\nimport Loading from \"../../components/Loading\";\nimport YourAccount from \"../../components/YourAccount\";\nimport { pathContract, pathOperationResult, pathTransfer } from \"../../paths\";\nimport { OperationResultState } from \"../OperationResult\";\nimport FormTransferName from \"./FormTransferName\";\nimport \"./Transfer.less\";\n\nconst { Title, Text } = Typography;\n\ninterface TransferParams {\n  readonly contractLabel: string;\n  readonly contractAddress: string;\n  readonly name: string;\n}\n\nfunction Transfer(): JSX.Element {\n  const { contractLabel, contractAddress, name } = useParams() as TransferParams;\n  const fullContractPath = `${pathContract}/${contractLabel}/${contractAddress}/${name}`;\n\n  const history = useHistory();\n  const { setError } = useError();\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const [loading, setLoading] = useState(false);\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [transferPrice, setTransferPrice] = useState<Coin>();\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setTransferPrice(response.transfer_price);\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    setLoading(true);\n    const payment = transferPrice ? [transferPrice] : undefined;\n\n    getClient()\n      .execute(\n        contractAddress,\n        { transfer: { name: name, to: newOwnerAddress } },\n        \"Transferring my name\",\n        payment,\n      )\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `Succesfully transferred ${name} to ${newOwnerAddress}`,\n            customButtonText: \"Name details\",\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Name transfer failed:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: `${pathTransfer}/${contractLabel}/${contractAddress}/${name}`,\n          } as OperationResultState,\n        });\n      });\n  }\n\n  return (\n    (loading && <Loading loadingText={`Transferring name: ${name}...`} />) ||\n    (!loading && (\n      <Center tag=\"main\" className=\"Transfer\">\n        <Stack>\n          <BackButton path={fullContractPath} />\n          <Stack className=\"TransferStack\">\n            <Title>Transfer</Title>\n            <Typography>\n              <Text>Name: </Text>\n              <Text>{name}</Text>\n            </Typography>\n            <Text>to</Text>\n            <FormTransferName\n              setNewOwnerAddress={setNewOwnerAddress}\n              transferButtonText={`Transfer ${printableCoin(transferPrice)}`}\n              transferButtonAction={tryTransfer}\n            />\n          </Stack>\n          <YourAccount tag=\"footer\" />\n        </Stack>\n      </Center>\n    ))\n  );\n}\n\nexport default Transfer;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport { AccountProvider, BurnerWalletProvider, ErrorProvider } from \"../service\";\nimport ProtectedSwitch from \"./components/ProtectedSwitch\";\nimport { pathContract, pathHome, pathLogin, pathOperationResult, pathTransfer } from \"./paths\";\nimport Contract from \"./routes/Contract\";\nimport Home from \"./routes/Home\";\nimport Login from \"./routes/Login\";\nimport OperationResult from \"./routes/OperationResult\";\nimport Transfer from \"./routes/Transfer\";\n\nfunction App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <BurnerWalletProvider config={config}>\n        <AccountProvider>\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path={pathLogin} component={Login} />\n              <ProtectedSwitch>\n                <Route exact path={pathHome} component={Home} />\n                <Route exact path={`${pathContract}/:label/:address/:name?`} component={Contract} />\n                <Route\n                  exact\n                  path={`${pathTransfer}/:contractLabel/:contractAddress/:name`}\n                  component={Transfer}\n                />\n                <Route exact path={pathOperationResult} component={OperationResult} />\n              </ProtectedSwitch>\n            </Switch>\n          </Router>\n        </AccountProvider>\n      </BurnerWalletProvider>\n    </ErrorProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.less\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}