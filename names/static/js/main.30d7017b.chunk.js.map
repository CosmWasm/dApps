{"version":3,"sources":["App/assets/backArrow.svg","App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","../../src/service/error.tsx","../../src/utils/currency.ts","../../src/service/sdk.ts","../../src/service/wallet.tsx","../../src/service/account.tsx","../../src/service/ProtectedSwitch.tsx","../../src/utils/errors.ts","../../src/components/layout/Center/component.tsx","../../src/components/layout/Center/style.ts","../../src/components/layout/Stack/component.tsx","../../src/components/layout/Stack/style.ts","../../src/components/layout/PageLayout/component.tsx","../../src/components/layout/PageLayout/style.ts","../../src/components/logic/BackButton/component.tsx","../../src/components/logic/BackButton/style.ts","../../src/components/logic/Loading/style.ts","../../src/components/logic/Loading/index.tsx","../../src/components/logic/Login/style.ts","../../src/components/logic/Login/index.tsx","../../src/components/logic/OperationResult/style.ts","../../src/components/logic/OperationResult/index.tsx","../../src/components/logic/YourAccount/style.ts","../../src/components/logic/YourAccount/index.tsx","../../src/theme/GlobalStyle/GlobalAntOverride.ts","../../src/theme/GlobalStyle/GlobalColors.ts","../../src/theme/GlobalStyle/GlobalFonts.ts","../../src/theme/GlobalStyle/GlobalReset.ts","../../src/theme/GlobalStyle/GlobalSpacing.ts","../../src/theme/GlobalStyle/index.tsx","config.ts","App/forms/Search.tsx","App/forms/validationSchemas.ts","App/routes/Contract/components/FormSearchName.tsx","App/routes/Contract/components/SearchResult/style.ts","App/routes/Contract/components/SearchResult/index.tsx","App/paths.ts","App/routes/Contract/style.ts","App/routes/Contract/index.tsx","App/routes/Home/style.ts","App/routes/Home/index.tsx","App/routes/Login/index.tsx","App/routes/OperationResult/index.tsx","App/routes/Transfer/FormTransferName.tsx","App/routes/Transfer/style.ts","App/routes/Transfer/index.tsx","App/index.tsx","index.tsx"],"names":["module","exports","defaultContext","setError","clearError","ErrorContext","React","useError","ErrorProvider","children","error","context","value","printableCoin","coin","ticker","Decimal","createClient","signer","firstAddress","feeTable","buildFeeTable","feeToken","gasPrice","stdFee","gas","amount","Math","denom","upload","init","exec","migrate","send","changeAdmin","config","e","loadOrCreateWallet","mnemonic","key","loaded","localStorage","generated","Bip39","Random","loadOrCreateMnemonic","hdPath","makeCosmoshubPath","Secp256k1Wallet","initialized","address","getClient","Error","CosmWasmContext","useSdk","SdkProvider","loadWallet","contextWithInit","setValue","client","faucetUrl","acct","fetch","method","headers","body","JSON","useState","BurnerWalletProvider","refreshAccount","AccountContext","useAccount","AccountProvider","sdk","account","ProtectedSwitch","authPath","location","to","pathname","state","redirectPathname","redirectState","undefined","getErrorFromStackTrace","stackTrace","match","stringStackTrace","Center","tag","Tag","props","StyledCenter","styled","Stack","StyledStack","PageLayout","StyledPageLayout","BackButton","icon","path","history","useHistory","goBack","src","alt","onClick","StyledBackButton","StyledSpin","spinIndicator","style","fontSize","spin","Loading","tip","loadingText","indicator","Text","Typography","MainStack","WelcomeStack","LightText","Title","Login","pathAfterLogin","appName","appLogo","initializing","setInitializing","useEffect","level","type","disabled","ResultText","OperationResult","defaultButtonAction","successIcon","failIcon","success","message","customButtonText","customButtonActionPath","customButtonActionState","result","buttonText","buttonAction","getResultContent","chosenButtonText","chosenButtonAction","AccountStack","YourAccount","hideTitle","hideBalance","balance","printableBalance","copyToClipboard","GlobalAntOverride","createGlobalStyle","GlobalColors","GlobalFonts","GlobalReset","GlobalSpacing","GlobalStyle","httpUrl","faucetToken","addressPrefix","codeId","TypedInput","name","validate","fast","onChange","$onChange","onBlur","$onBlur","restProps","ref","field","event","Search","SearchValidationSchema","Yup","shape","min","required","regexStartsWithPrefix","RegExp","TransferValidationSchema","matches","length","FormSearchName","initialName","setSearchedName","initialValues","validationSchema","onSubmit","values","formikProps","placeholder","enterButton","onSearch","isValid","ResultStack","BlackText","SearchResult","contractLabel","contractAddress","setLoading","fullContractPath","accountProvider","nameOwnerAddress","setNameOwnerAddress","prices","setPrices","queryContractSmart","resolve_record","then","response","catch","toString","includes","purchase","purchase_price","transfer","transfer_price","actionText","action","myAddress","tryRegister","navigateToTransfer","getResult","purchasePrice","payment","execute","register","push","console","BackSearchResultStack","SearchStack","Contract","label","useParams","loading","searchedName","backArrowIcon","newName","toLowerCase","ContractStack","Home","contracts","setContracts","getContracts","map","cosmWasmLogo","goToHome","FormTransferName","setNewOwnerAddress","transferButtonText","transferButtonAction","target","dirty","BackTransferStack","TransferStack","Transfer","newOwnerAddress","transferPrice","setTransferPrice","App","basename","process","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30d7017b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n","import { FeeTable } from \"@cosmjs/cosmwasm\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { AppConfig } from \"../config\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function buildFeeTable({ feeToken, gasPrice }: AppConfig): FeeTable {\n  const stdFee = (gas: number, denom: string, price: number) => {\n    const amount = Math.floor(gas * price);\n    return {\n      amount: [{ amount: amount.toString(), denom: denom }],\n      gas: gas.toString(),\n    };\n  };\n\n  return {\n    upload: stdFee(1500000, feeToken, gasPrice),\n    init: stdFee(600000, feeToken, gasPrice),\n    exec: stdFee(200000, feeToken, gasPrice),\n    migrate: stdFee(600000, feeToken, gasPrice),\n    send: stdFee(80000, feeToken, gasPrice),\n    changeAdmin: stdFee(80000, feeToken, gasPrice),\n  };\n}\n\nexport interface MappedCoin {\n  readonly denom: string;\n  readonly fractionalDigits: number;\n}\n\nexport interface CoinMap {\n  readonly [key: string]: MappedCoin;\n}\n\nexport function nativeCoinToDisplay(coin: Coin, coinMap: CoinMap): Coin {\n  if (!coinMap) return coin;\n\n  const coinToDisplay = coinMap[coin.denom];\n  if (!coinToDisplay) return coin;\n\n  const amountToDisplay = Decimal.fromAtomics(coin.amount, coinToDisplay.fractionalDigits).toString();\n\n  return { denom: coinToDisplay.denom, amount: amountToDisplay };\n}\n\n// display amount is eg \"12.0346\", return is in native tokens\n// with 6 fractional digits, this would be eg. \"12034600\"\nexport function displayAmountToNative(\n  amountToDisplay: string,\n  coinMap: CoinMap,\n  nativeDenom: string,\n): string {\n  const fractionalDigits = coinMap[nativeDenom]?.fractionalDigits;\n  if (fractionalDigits) {\n    // use https://github.com/CosmWasm/cosmjs/blob/v0.22.2/packages/math/src/decimal.ts\n    const decimalAmount = Decimal.fromUserInput(amountToDisplay, fractionalDigits);\n    return decimalAmount.atomics;\n  }\n\n  return amountToDisplay;\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { makeCosmoshubPath, OfflineSigner, Secp256k1Wallet } from \"@cosmjs/launchpad\";\nimport { AppConfig } from \"../config\";\nimport { buildFeeTable } from \"../utils/currency\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport async function loadOrCreateWallet(addressPrefix: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, hdPath, addressPrefix);\n  return wallet;\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const firstAddress = (await signer.getAccounts())[0].address;\n  const feeTable = buildFeeTable(config);\n  return new SigningCosmWasmClient(config.httpUrl, firstAddress, signer, feeTable);\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm\";\nimport { OfflineSigner } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { createClient, loadOrCreateWallet } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly address: string;\n  readonly init: () => void;\n  readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  address: \"\",\n  init: () => {\n    return;\n  },\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface ConfigWalletProps extends ConfigProp {\n  readonly loadWallet: (addressPrefix: string) => Promise<OfflineSigner>;\n}\n\ntype SdkProviderProps = ConfigWalletProps & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function SdkProvider({ config, loadWallet, children }: SdkProviderProps): JSX.Element {\n  const contextWithInit = { ...defaultContext, init: init };\n  const [value, setValue] = useState(contextWithInit);\n\n  function init() {\n    loadWallet(config.addressPrefix)\n      .then((signer) => createClient(config, signer))\n      .then(async (client) => {\n        const address = client.senderAddress;\n        // load from faucet if needed\n        if (config.faucetUrl) {\n          const acct = await client.getAccount();\n          if (!acct?.balance?.length) {\n            await fetch(config.faucetUrl, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ ticker: config.faucetToken, address }),\n            });\n          }\n        }\n\n        setValue({\n          initialized: true,\n          address: address,\n          init: () => {\n            return;\n          },\n          getClient: () => client,\n        });\n      });\n  }\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n\ninterface ConfigProp {\n  readonly config: AppConfig;\n}\n\ntype BurnerWalletProviderProps = ConfigProp & React.HTMLAttributes<HTMLOrSVGElement>;\n\nexport function BurnerWalletProvider({ config, children }: BurnerWalletProviderProps): JSX.Element {\n  return (\n    <SdkProvider config={config} loadWallet={loadOrCreateWallet}>\n      {children}\n    </SdkProvider>\n  );\n}\n","import { Account } from \"@cosmjs/launchpad\";\nimport * as React from \"react\";\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n}\n\ninterface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nconst defaultContext: AccountContextType = {\n  refreshAccount: () => {\n    return;\n  },\n};\n\nconst AccountContext = React.createContext<AccountContextType>(defaultContext);\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const { setError } = useError();\n  const sdk = useSdk();\n\n  const [value, setValue] = React.useState<State>({});\n\n  function refreshAccount() {\n    if (sdk.initialized) {\n      sdk\n        .getClient()\n        .getAccount()\n        .then((account) => setValue({ account }))\n        .catch(setError);\n    }\n  }\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [sdk, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{children}</AccountContext.Provider>;\n}\n","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useSdk } from \"./wallet\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\ninterface ProtectedSwitchProps extends SwitchProps {\n  readonly authPath: string;\n}\n\nexport function ProtectedSwitch({ authPath, children, location }: ProtectedSwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: authPath,\n        state: location ? { redirectPathname: location.pathname, redirectState: location.state } : undefined,\n      }}\n    />\n  );\n}\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error;\n}\n","import * as React from \"react\";\n\nexport interface CenterProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Center({ tag: Tag = \"div\", children, ...props }: CenterProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Center } from \"./component\";\n\nexport const StyledCenter = styled(Center)`\n  box-sizing: content-box;\n\n  max-width: var(--max-width, none);\n\n  margin-left: auto;\n  margin-right: auto;\n\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from \"react\";\n\nexport interface StackProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Stack({ tag: Tag = \"div\", children, ...props }: StackProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"./component\";\n\nexport const StyledStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  & > * {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  & > * + * {\n    margin-top: var(--gap, var(--s0));\n  }\n`;\n","import { Center, CenterProps } from \"../Center\";\nimport * as React from \"react\";\n\nexport function PageLayout({ children, ...props }: CenterProps): JSX.Element {\n  return (\n    <Center tag=\"main\" {...props}>\n      {children}\n    </Center>\n  );\n}\n","import styled from \"styled-components\";\nimport { PageLayout } from \"./component\";\n\nexport const StyledPageLayout = styled(PageLayout)`\n  --max-width: 22rem;\n  --gap: var(--s8);\n\n  padding: var(--s4);\n\n  /* Reduces padding when width < 380px, but uses em for better media query support */\n  @media (max-width: 23.6875em) {\n    padding: var(--s-1) 0 var(--s-2) 0;\n  }\n\n  [alt=\"Back arrow\"] {\n    align-self: flex-start;\n  }\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface BackButtonProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly icon: string;\n  readonly path?: string;\n  readonly state?: any;\n}\n\nexport function BackButton({ icon, path, state, ...props }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path, state) : history.goBack;\n\n  return <img src={icon} alt=\"Back arrow\" onClick={goBack} {...props} />;\n}\n","import styled from \"styled-components\";\nimport { BackButton } from \"./component\";\n\nexport const StyledBackButton = styled(BackButton)`\n  cursor: pointer;\n`;\n","import { Spin } from \"antd\";\nimport styled from \"styled-components\";\n\nexport const StyledSpin = styled(Spin)`\n  & > span + div {\n    margin-top: var(--s2);\n  }\n`;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport * as React from \"react\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { StyledSpin } from \"./style\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nexport function Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <PageLayout>\n      <StyledSpin indicator={spinIndicator} tip={tip} />\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s9);\n  }\n`;\n\nexport const WelcomeStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const LightText = styled(Text)`\n  display: block;\n  font-weight: lighter;\n`;\n","import { RedirectLocation, useAccount, useSdk } from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { Loading } from \"../../logic/Loading\";\nimport { LightText, MainStack, WelcomeStack } from \"./style\";\n\nconst { Title } = Typography;\n\ninterface LoginProps {\n  readonly pathAfterLogin: string;\n  readonly appName: string;\n  readonly appLogo: string;\n}\n\nexport function Login({ pathAfterLogin, appName, appLogo }: LoginProps): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const sdk = useSdk();\n  const { refreshAccount, account } = useAccount();\n\n  const [initializing, setInitializing] = useState(false);\n\n  function init() {\n    setInitializing(true);\n    sdk.init();\n  }\n\n  useEffect(() => {\n    if (sdk.initialized) {\n      refreshAccount();\n    }\n  }, [sdk.initialized, refreshAccount]);\n\n  useEffect(() => {\n    if (account) {\n      if (state) {\n        history.push(state.redirectPathname, state.redirectState);\n      } else {\n        history.push(pathAfterLogin);\n      }\n    }\n  }, [account, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <PageLayout>\n      <MainStack>\n        <img src={appLogo} alt=\"CosmWasm logo\" />\n        <WelcomeStack>\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <LightText>Welcome to your {appName}</LightText>\n            <LightText>Select one of the following options to start:</LightText>\n          </Typography>\n          <Button type=\"primary\" onClick={init}>\n            Browser (Demo)\n          </Button>\n          <Button disabled type=\"primary\">\n            Keplr (Secure)\n          </Button>\n        </WelcomeStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const ResultText = styled(Text)`\n  font-size: var(--s-1);\n\n  &[data-result=\"success\"] {\n    color: var(--color-green);\n  }\n\n  &[data-result=\"failure\"] {\n    color: var(--color-red);\n  }\n`;\n","import { Button } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { MainStack, ResultText } from \"./style\";\n\ninterface ResultContent {\n  readonly result: \"success\" | \"failure\";\n  readonly icon: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n  readonly customButtonActionState?: any;\n}\n\nexport interface OperationResultProps {\n  readonly defaultButtonAction: (history: History) => void;\n  readonly successIcon: string;\n  readonly failIcon: string;\n}\n\nexport function OperationResult({\n  defaultButtonAction,\n  successIcon,\n  failIcon,\n}: OperationResultProps): JSX.Element {\n  const history = useHistory();\n\n  const {\n    success,\n    message,\n    error,\n    customButtonText,\n    customButtonActionPath,\n    customButtonActionState,\n  } = history.location.state as OperationResultState;\n\n  function getResultContent(success: boolean): ResultContent {\n    if (success) {\n      return {\n        result: \"success\",\n        icon: successIcon,\n        buttonText: \"Home\",\n        buttonAction: () => defaultButtonAction(history),\n      };\n    }\n\n    return {\n      result: \"failure\",\n      icon: failIcon,\n      buttonText: \"Retry\",\n      buttonAction: history.goBack,\n    };\n  }\n\n  const { icon, result, buttonText, buttonAction } = getResultContent(success);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath, customButtonActionState)\n    : buttonAction;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <img src={icon} alt=\"Result icon\" />\n        <ResultText data-result={result}>{message}</ResultText>\n        {error && <ResultText data-result={result}>{error}</ResultText>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s-2);\n  }\n\n  h3,\n  div[role=\"separator\"] {\n    margin: 0;\n  }\n\n  span,\n  button {\n    overflow-wrap: anywhere;\n  }\n\n  span {\n    display: block;\n    font-size: var(--s-1);\n  }\n\n  span + span {\n    font-weight: bold;\n  }\n\n  button,\n  button span {\n    font-size: var(--s0);\n  }\n\n  button {\n    height: 100%;\n    white-space: normal;\n  }\n`;\n","import { printableBalance, useAccount } from \"@cosmicdapp/logic\";\nimport { Button, Divider, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport { StackProps } from \"../../layout/Stack\";\nimport { AccountStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface YourAccountProps extends StackProps {\n  readonly hideTitle?: boolean;\n  readonly hideBalance?: boolean;\n}\n\nexport function YourAccount({ tag, hideTitle, hideBalance }: YourAccountProps): JSX.Element {\n  const accountProvider = useAccount();\n  const { address, balance } = accountProvider.account ?? { address: \"\", balance: [] };\n\n  return (\n    <AccountStack tag={tag}>\n      {!hideTitle && (\n        <header>\n          <Title level={3}>Your Account</Title>\n          {!hideBalance && <Divider />}\n        </header>\n      )}\n      <Text>{address}</Text>\n      {!hideBalance && <Text>({printableBalance(balance)})</Text>}\n      <Button type=\"primary\" onClick={() => copyToClipboard(address)}>\n        Copy Account Address\n      </Button>\n    </AccountStack>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalAntOverride = createGlobalStyle`\n  .ant-btn:not(.ant-input-search-button) {\n    width: var(--max-width);\n    max-width: 100vw;\n  }\n  \n  .ant-form div[role=\"alert\"] li {\n    color: var(--form-error);\n    font-size: var(--s-1);\n    text-align: left;\n    margin: var(--s-1);\n  \n    &::before {\n      content: \"* \";\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalColors = createGlobalStyle`\n  :root {\n    --color-black: #333;\n    --color-red: #eb5757;\n    --color-green: #27ae60;\n    --color-blue: #2f80ed;\n    --color-blue-light: #1890ff;\n\n    --color-primary: var(--color-blue);\n    --button-color: var(--color-blue-light);\n    --text-color: var(--color-primary);\n    --heading-color: var(--color-primary);\n    --form-error: var(--color-red);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalFonts = createGlobalStyle`\n  :root {\n    --ff-montserrat: Montserrat, sans-serif;\n    --ff-iceland: Iceland, serif;\n\n    --ff-text: var(--ff-montserrat);\n    --ff-heading: var(--ff-iceland);\n    \n    font-family: var(--ff-text);\n  }\n\n  p,\n  span {\n    font-family: var(--ff-text);\n    font-size: var(--s0);\n    overflow-wrap: anywhere;\n  }\n  \n  h1,\n  h2,\n  h3 {\n    font-family: var(--ff-heading);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalReset = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    min-height: 100vh;\n    line-height: 1.5;\n    text-rendering: optimizeSpeed;\n  }\n  \n  body,\n  h1,\n  h2,\n  p,\n  ul[class],\n  ol[class] {\n    margin: 0;\n  }\n  \n  ul[class],\n  ol[class] {\n    padding: 0;\n    list-style: none;\n  }\n  \n  button,\n  input,\n  select,\n  textarea {\n    font: inherit;\n  }\n  \n  img {\n    display: block;\n    max-width: 100%;\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01s !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01s !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalSpacing = createGlobalStyle`\n  :root {\n    --ratio: 1.25;\n\n    --s-6: calc(var(--s-5) / var(--ratio));\n    --s-5: calc(var(--s-4) / var(--ratio));\n    --s-4: calc(var(--s-3) / var(--ratio));\n    --s-3: calc(var(--s-2) / var(--ratio));\n    --s-2: calc(var(--s-1) / var(--ratio));\n    --s-1: calc(var(--s0) / var(--ratio));\n    --s0: 1rem;\n    --s1: calc(var(--s0) * var(--ratio));\n    --s2: calc(var(--s1) * var(--ratio));\n    --s3: calc(var(--s2) * var(--ratio));\n    --s4: calc(var(--s3) * var(--ratio));\n    --s5: calc(var(--s4) * var(--ratio));\n    --s6: calc(var(--s5) * var(--ratio));\n    --s7: calc(var(--s6) * var(--ratio));\n    --s8: calc(var(--s7) * var(--ratio));\n    --s9: calc(var(--s8) * var(--ratio));\n  }\n`;\n","import React from \"react\";\nimport { GlobalAntOverride } from \"./GlobalAntOverride\";\nimport { GlobalColors } from \"./GlobalColors\";\nimport { GlobalFonts } from \"./GlobalFonts\";\nimport { GlobalReset } from \"./GlobalReset\";\nimport { GlobalSpacing } from \"./GlobalSpacing\";\n\nexport function GlobalStyle(): JSX.Element {\n  return (\n    <>\n      <GlobalReset />\n      <GlobalSpacing />\n      <GlobalColors />\n      <GlobalFonts />\n      <GlobalAntOverride />\n    </>\n  );\n}\n","import { AppConfig } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  httpUrl: \"http://localhost:1317\",\n  feeToken: \"ucosm\",\n  gasPrice: 0.025,\n  faucetUrl: \"http://localhost:8000/credit\",\n  faucetToken: \"COSM\",\n  addressPrefix: \"cosmos\",\n  codeId: 2,\n};\n\nconst coralnet: AppConfig = {\n  httpUrl: \"https://lcd.coralnet.cosmwasm.com\",\n  feeToken: \"ushell\",\n  gasPrice: 0.025,\n  faucetUrl: \"https://faucet.coralnet.cosmwasm.com/credit\",\n  faucetToken: \"SHELL\",\n  addressPrefix: \"coral\",\n  codeId: 5,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : coralnet;\n","// Search form not present in form-antd: https://github.com/jannikbuschke/formik-antd/blob/master/src/input/index.tsx\nimport { Input as BaseInput } from \"antd\";\nimport { InputProps as BaseInputProps, SearchProps as BaseSearchProps } from \"antd/lib/input\";\nimport { FieldProps } from \"formik\";\nimport { Field } from \"formik-antd\";\nimport * as React from \"react\";\nimport Search from \"antd/lib/input/Search\";\n\ninterface FormikFieldProps {\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validate?: (value: any) => undefined | string | Promise<any>;\n  fast?: boolean;\n}\n\ntype InputProps = FormikFieldProps & BaseInputProps;\n\ninterface InputType\n  extends React.ForwardRefExoticComponent<\n    FormikFieldProps & BaseInputProps & React.RefAttributes<BaseInput>\n  > {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  Search: React.ForwardRefExoticComponent<FormikFieldProps & BaseSearchProps & React.RefAttributes<Search>>;\n}\n\n// eslint-disable-next-line react/display-name\nconst Input = React.forwardRef((\n  { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: InputProps,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  ref: React.Ref<Search>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({ field: { value, onChange, onBlur } }: FieldProps) => (\n      <BaseInput\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(event) => {\n          onChange(event);\n          $onChange && $onChange(event);\n        }}\n        onBlur={(event) => {\n          onBlur(event);\n          $onBlur && $onBlur(event);\n        }}\n        {...restProps}\n      />\n    )}\n  </Field>\n));\n\nconst TypedInput = (Input as unknown) as InputType;\ntype SearchProps = FormikFieldProps & BaseSearchProps;\n\n// eslint-disable-next-line react/display-name\nTypedInput.Search = React.forwardRef(\n  (\n    { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: SearchProps,\n    ref: React.Ref<BaseInput>,\n  ) => (\n    <Field name={name} validate={validate} fast={fast}>\n      {({ field: { value, onChange, onBlur } }: FieldProps) => (\n        <BaseInput.Search\n          ref={ref}\n          name={name}\n          value={value}\n          onChange={(event) => {\n            onChange(event);\n            $onChange && $onChange(event);\n          }}\n          onBlur={(event) => {\n            onBlur(event);\n            $onBlur && $onBlur(event);\n          }}\n          {...restProps}\n        />\n      )}\n    </Field>\n  ),\n);\n\nexport default TypedInput.Search;\n","import * as Yup from \"yup\";\nimport { config } from \"../../config\";\n\nexport const SearchValidationSchema = Yup.object().shape({\n  name: Yup.string().min(4, \"Name can not be less than 4 characters\").required(\"A Name is required\"),\n});\n\nconst regexStartsWithPrefix = new RegExp(`^${config.addressPrefix}`);\n\nexport const TransferValidationSchema = Yup.object().shape({\n  address: Yup.string()\n    .required(\"An address is required\")\n    .matches(regexStartsWithPrefix, `\"${config.addressPrefix}\" prefix required`)\n    .length(39 + config.addressPrefix.length, \"Address invalid\"),\n});\n","import { Formik } from \"formik\";\nimport { Form, FormItem } from \"formik-antd\";\nimport React from \"react\";\nimport Search from \"../../../forms/Search\";\nimport { SearchValidationSchema } from \"../../../forms/validationSchemas\";\n\ninterface FormSearchNameProps {\n  readonly initialName?: string;\n  readonly setSearchedName: (value: React.SetStateAction<string>) => void;\n}\n\nexport function FormSearchName({ initialName, setSearchedName }: FormSearchNameProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ name: initialName }}\n      validationSchema={SearchValidationSchema}\n      onSubmit={(values) => {\n        setSearchedName(values.name);\n      }}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"name\">\n            <Search\n              name=\"name\"\n              placeholder=\"Name\"\n              enterButton\n              onSearch={(value) => {\n                formikProps.isValid && setSearchedName(value);\n              }}\n            />\n          </FormItem>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport { Typography } from \"antd\";\nimport styled from \"styled-components\";\n\nconst { Text } = Typography;\n\nexport const ResultStack = styled(Stack)`\n  & > * {\n    --gap: var(--s-3);\n  }\n`;\n\nexport const BlackText = styled(Text)`\n  color: var(--color-black);\n`;\n\nexport const LightText = styled(Text)`\n  font-weight: lighter;\n`;\n","import { OperationResultState } from \"@cosmicdapp/design\";\nimport { getErrorFromStackTrace, printableCoin, useAccount, useError, useSdk } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Button, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { pathContract, pathOperationResult, pathTransfer } from \"../../../../paths\";\nimport { BlackText, LightText, ResultStack } from \"./style\";\n\nconst { Text } = Typography;\n\nexport interface Prices {\n  readonly purchase?: Coin;\n  readonly transfer?: Coin;\n}\n\ninterface Result {\n  readonly message: string;\n  readonly actionText: string;\n  readonly action: () => void;\n}\n\nfunction getResult(\n  myAddress: string,\n  nameOwnerAddress: string,\n  prices: Prices,\n  tryRegister: () => void,\n  navigateToTransfer: () => void,\n): Result {\n  if (!nameOwnerAddress) {\n    return {\n      message: \"is available!\",\n      actionText: `Register ${printableCoin(prices.purchase)}`,\n      action: tryRegister,\n    };\n  }\n\n  if (myAddress === nameOwnerAddress) {\n    return {\n      message: \"is owned by you !\",\n      actionText: `Transfer ${printableCoin(prices.transfer)}`,\n      action: navigateToTransfer,\n    };\n  } else {\n    return {\n      message: `is owned by ${nameOwnerAddress}`,\n      actionText: \"Copy Owner Address\",\n      action: () => {\n        copyToClipboard(nameOwnerAddress);\n      },\n    };\n  }\n}\n\ninterface SearchResultProps {\n  readonly contractLabel: string;\n  readonly contractAddress: string;\n  readonly name: string;\n  readonly setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport function SearchResult({\n  contractLabel,\n  contractAddress,\n  name,\n  setLoading,\n}: SearchResultProps): JSX.Element {\n  const fullContractPath = `${pathContract}/${contractLabel}/${contractAddress}/${name}`;\n\n  const history = useHistory();\n  const { setError, error } = useError();\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const [nameOwnerAddress, setNameOwnerAddress] = useState(\"\");\n  const [prices, setPrices] = useState<Prices>({});\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { resolve_record: { name } })\n      .then((response) => {\n        setNameOwnerAddress(response.address);\n      })\n      .catch((error) => {\n        // a not found error means it is free, other errors need to be reported\n        if (!error.toString().includes(\"NameRecord not found\")) {\n          setError(error);\n        }\n      });\n  }, [setError, contractAddress, getClient, name]);\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setPrices({\n          purchase: response.purchase_price,\n          transfer: response.transfer_price,\n        });\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryRegister() {\n    setLoading(true);\n\n    const purchasePrice = prices.purchase;\n    const payment = purchasePrice ? [purchasePrice] : undefined;\n\n    getClient()\n      .execute(contractAddress, { register: { name: name } }, \"Buying my name\", payment)\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `Successfully registered ${name}`,\n            customButtonText: \"Name details\",\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Name register failed:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      });\n  }\n\n  function navigateToTransfer() {\n    history.push(`${pathTransfer}/${contractLabel}/${contractAddress}/${name}`);\n  }\n\n  const { message, actionText, action } = getResult(\n    accountProvider.account.address,\n    nameOwnerAddress,\n    prices,\n    tryRegister,\n    navigateToTransfer,\n  );\n\n  return (\n    <ResultStack>\n      <Text>{error}</Text>\n      <BlackText>{name}</BlackText>\n      <LightText>{message}</LightText>\n      <Button type=\"primary\" onClick={action}>\n        {actionText}\n      </Button>\n    </ResultStack>\n  );\n}\n","export const pathLogin = \"/login\";\nexport const pathHome = \"/home\";\nexport const pathContract = \"/contract\";\nexport const pathTransfer = \"/transfer\";\nexport const pathOperationResult = \"/result\";\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  h1 {\n    margin: 0;\n    text-transform: capitalize;\n  }\n\n  span {\n    font-size: var(--s-1);\n    overflow-wrap: anywhere;\n  }\n`;\n\nexport const BackSearchResultStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n`;\n\nexport const SearchStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n","import { BackButton, Loading, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { Typography } from \"antd\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathHome } from \"../../paths\";\nimport { FormSearchName } from \"./components/FormSearchName\";\nimport { SearchResult } from \"./components/SearchResult\";\nimport { BackSearchResultStack, MainStack, SearchStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface ContractParams {\n  readonly label: string;\n  readonly address: string;\n  readonly name?: string;\n}\n\nexport function Contract(): JSX.Element {\n  const { label, address, name } = useParams() as ContractParams;\n\n  const [loading, setLoading] = useState(false);\n  const [searchedName, setSearchedName] = useState(name);\n\n  function setLowercaseSearchedName(newName: string) {\n    setSearchedName(newName.toLowerCase());\n  }\n\n  return (\n    (loading && <Loading loadingText={`Registering name: ${searchedName}...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackSearchResultStack>\n            <BackButton icon={backArrowIcon} path={pathHome} />\n            <SearchStack>\n              <Title>{label}</Title>\n              <Text>({address})</Text>\n              <FormSearchName initialName={name} setSearchedName={setLowercaseSearchedName} />\n            </SearchStack>\n            {searchedName && (\n              <SearchResult\n                contractLabel={label}\n                contractAddress={address}\n                name={searchedName}\n                setLoading={setLoading}\n              />\n            )}\n          </BackSearchResultStack>\n          <YourAccount tag=\"footer\" />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  h1 {\n    margin: 0;\n    text-transform: capitalize;\n  }\n\n  span {\n    font-size: var(--s-1);\n    overflow-wrap: anywhere;\n  }\n`;\n\nexport const ContractStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n`;\n","import { PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { useError, useSdk } from \"@cosmicdapp/logic\";\nimport { Contract } from \"@cosmjs/cosmwasm\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { config } from \"../../../config\";\nimport { pathContract } from \"../../paths\";\nimport { ContractStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nexport function Home(): JSX.Element {\n  const { setError } = useError();\n  const { getClient } = useSdk();\n\n  const [contracts, setContracts] = useState<readonly Contract[]>([]);\n\n  useEffect(() => {\n    getClient()\n      .getContracts(config.codeId)\n      .then((contracts) => setContracts(contracts))\n      .catch(setError);\n  }, [getClient, setError]);\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <Title>Name Service</Title>\n        <ContractStack tag=\"nav\">\n          {contracts.map(({ label, address }) => (\n            <Link key={address} to={`${pathContract}/${label.toLowerCase()}/${address}`}>\n              <Button type=\"primary\">{label}</Button>\n            </Link>\n          ))}\n        </ContractStack>\n        <YourAccount tag=\"footer\" />\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { Login as LoginDesign } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport { pathHome } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\n\nexport function Login(): JSX.Element {\n  return <LoginDesign pathAfterLogin={pathHome} appName=\"Name service\" appLogo={cosmWasmLogo} />;\n}\n","import { OperationResult as OperationResultDesign } from \"@cosmicdapp/design\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { pathHome } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\n\nfunction goToHome(history: History) {\n  history.push(pathHome);\n}\n\nexport function OperationResult(): JSX.Element {\n  return (\n    <OperationResultDesign defaultButtonAction={goToHome} successIcon={successIcon} failIcon={failIcon} />\n  );\n}\n","import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { TransferValidationSchema } from \"../../forms/validationSchemas\";\n\ninterface FormTransferNameProps {\n  readonly setNewOwnerAddress: (value: React.SetStateAction<string>) => void;\n  readonly transferButtonText: string;\n  readonly transferButtonAction: () => void;\n}\n\nexport function FormTransferName({\n  setNewOwnerAddress,\n  transferButtonText,\n  transferButtonAction,\n}: FormTransferNameProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ address: \"\" }}\n      validationSchema={TransferValidationSchema}\n      onSubmit={transferButtonAction}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"address\">\n            <Input\n              name=\"address\"\n              placeholder=\"Enter address\"\n              onChange={(event) => {\n                setNewOwnerAddress(event.target.value);\n              }}\n            />\n          </FormItem>\n          <Button\n            type=\"primary\"\n            onClick={transferButtonAction}\n            disabled={!(formikProps.isValid && formikProps.dirty)}\n          >\n            {transferButtonText}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  h1 {\n    margin: 0;\n  }\n\n  span {\n    font-size: var(--s-1);\n    overflow-wrap: anywhere;\n  }\n`;\n\nexport const BackTransferStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n`;\n\nexport const TransferStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { getErrorFromStackTrace, printableCoin, useAccount, useError, useSdk } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/launchpad\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathContract, pathOperationResult, pathTransfer } from \"../../paths\";\nimport { FormTransferName } from \"./FormTransferName\";\nimport { BackTransferStack, MainStack, TransferStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface TransferParams {\n  readonly contractLabel: string;\n  readonly contractAddress: string;\n  readonly name: string;\n}\n\nexport function Transfer(): JSX.Element {\n  const { contractLabel, contractAddress, name } = useParams() as TransferParams;\n  const fullContractPath = `${pathContract}/${contractLabel}/${contractAddress}/${name}`;\n\n  const history = useHistory();\n  const { setError } = useError();\n  const { getClient } = useSdk();\n  const accountProvider = useAccount();\n\n  const [loading, setLoading] = useState(false);\n  const [newOwnerAddress, setNewOwnerAddress] = useState(\"\");\n  const [transferPrice, setTransferPrice] = useState<Coin>();\n\n  useEffect(() => {\n    getClient()\n      .queryContractSmart(contractAddress, { config: {} })\n      .then((response) => {\n        setTransferPrice(response.transfer_price);\n      })\n      .catch(setError);\n  }, [setError, contractAddress, getClient]);\n\n  function tryTransfer() {\n    setLoading(true);\n    const payment = transferPrice ? [transferPrice] : undefined;\n\n    getClient()\n      .execute(\n        contractAddress,\n        { transfer: { name: name, to: newOwnerAddress } },\n        \"Transferring my name\",\n        payment,\n      )\n      .then(() => {\n        accountProvider.refreshAccount();\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `Successfully transferred ${name} to ${newOwnerAddress}`,\n            customButtonText: \"Name details\",\n            customButtonActionPath: fullContractPath,\n          } as OperationResultState,\n        });\n      })\n      .catch((stackTrace) => {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Name transfer failed:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: `${pathTransfer}/${contractLabel}/${contractAddress}/${name}`,\n          } as OperationResultState,\n        });\n      });\n  }\n\n  return (\n    (loading && <Loading loadingText={`Transferring name: ${name}...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackTransferStack>\n            <BackButton icon={backArrowIcon} path={fullContractPath} />\n            <TransferStack>\n              <Title>Transfer</Title>\n              <Typography>\n                <Text>Name: </Text>\n                <Text>{name}</Text>\n              </Typography>\n              <Text>to</Text>\n              <FormTransferName\n                setNewOwnerAddress={setNewOwnerAddress}\n                transferButtonText={`Transfer ${printableCoin(transferPrice)}`}\n                transferButtonAction={tryTransfer}\n              />\n            </TransferStack>\n          </BackTransferStack>\n          <YourAccount tag=\"footer\" />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n","import { GlobalStyle } from \"@cosmicdapp/design\";\nimport { AccountProvider, BurnerWalletProvider, ErrorProvider, ProtectedSwitch } from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport { pathContract, pathHome, pathLogin, pathOperationResult, pathTransfer } from \"./paths\";\nimport { Contract } from \"./routes/Contract\";\nimport { Home } from \"./routes/Home\";\nimport { Login } from \"./routes/Login\";\nimport { OperationResult } from \"./routes/OperationResult\";\nimport { Transfer } from \"./routes/Transfer\";\n\nexport function App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <BurnerWalletProvider config={config}>\n        <AccountProvider>\n          <GlobalStyle />\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path={pathLogin} component={Login} />\n              <ProtectedSwitch authPath={pathLogin}>\n                <Route exact path={pathHome} component={Home} />\n                <Route exact path={`${pathContract}/:label/:address/:name?`} component={Contract} />\n                <Route\n                  exact\n                  path={`${pathTransfer}/:contractLabel/:contractAddress/:name`}\n                  component={Transfer}\n                />\n                <Route exact path={pathOperationResult} component={OperationResult} />\n              </ProtectedSwitch>\n            </Switch>\n          </Router>\n        </AccountProvider>\n      </BurnerWalletProvider>\n    </ErrorProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}